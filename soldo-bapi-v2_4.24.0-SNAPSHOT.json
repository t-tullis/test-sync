{
  "openapi": "3.1.0",
  "info": {
    "description": "Soldo Business API v2.0 OpenAPI specification",
    "title": "Soldo Business API v2.0",
    "version": "0.0.0-dev-SNAPSHOT"
  },
  "servers": [
    {
      "description": "Production server (using live data)",
      "url": "https://api.soldo.com"
    },
    {
      "description": "Sandbox server (using test data)",
      "url": "https://api-demo.soldocloud.net"
    }
  ],
  "components": {
    "schemas": {
      "AccountIdentificationType": {
        "type": [
          "string"
        ],
        "enum": [
          "SORT_CODE",
          "ACCOUNT_NUMBER",
          "IBAN"
        ]
      },
      "AccountInfoContact": {
        "properties": {
          "identification": {
            "type": [
              "string"
            ],
            "description": "The account identification related to the type.",
            "example": "GB00ABCD00000123456789"
          },
          "type": {
            "$ref": "#/components/schemas/AccountIdentificationType",
            "description": "The `type` of account identification.",
            "example": "IBAN"
          }
        }
      },
      "AddAssignees": {
        "description": "Add `Subscription` assignees JSON parameters.",
        "properties": {
          "add_assignees": {
            "type": [
              "array"
            ],
            "description": "List of new `User` IDs to add as assignees.",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "add_assignees"
        ]
      },
      "AddCardOrder": {
        "description": "Add `Card` JSON parameters.",
        "properties": {
          "address_id": {
            "type": [
              "string"
            ],
            "description": "The `Address` ID the `Card` has to be shipped to (if empty, the default shipping `Address` is used i.e. where `default_shipping` = `true`), only applicable for `PLASTIC` and `FUEL` cards.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "card_label": {
            "type": [
              "string"
            ],
            "description": "A label for the `Card` (max 20 characters).",
            "example": "CardLabel"
          },
          "emboss_line4": {
            "type": [
              "string"
            ],
            "description": "The emboss line 4 of the `Card`.",
            "example": "Example Inc."
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The logical name of the `Card` for a `company` card, ignored in case of `employee` card (the cardholder full name is used instead).",
            "example": "CardName"
          },
          "owner_public_id": {
            "type": [
              "string"
            ],
            "description": "The `Card` owner ID, only applicable for `owner` type `employee` cards.",
            "example": "XMPL1234-000001"
          },
          "owner_type": {
            "$ref": "#/components/schemas/AddOrderCardOwnerType",
            "description": "The type of the resource the `Card` is created for.",
            "example": "employee"
          },
          "preset_id": {
            "type": [
              "string"
            ],
            "description": "The `cardRulePreset` ID assigned to the `Card`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "reserved_iso4217_supported_currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The reserved `Wallet` currency, only required when adding a dedicated card.",
            "example": "EUR"
          },
          "type": {
            "$ref": "#/components/schemas/AddCardType",
            "description": "The type of the `Card`.",
            "example": "PLASTIC"
          },
          "vehicle_id": {
            "type": [
              "string"
            ],
            "description": "The `Vehicle` ID assigned to the `Card`, only valid for `FUEL` cards.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID, if not specified a reserved `Wallet` will be created for the added `Card`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          }
        },
        "required": [
          "name",
          "owner_public_id",
          "owner_type",
          "request_timestamp",
          "type"
        ]
      },
      "AddCardType": {
        "type": [
          "string"
        ],
        "enum": [
          "PLASTIC",
          "VIRTUAL",
          "FUEL",
          "GOOGLE_CARD",
          "PLASTIC_CHARGE",
          "VIRTUAL_CHARGE"
        ]
      },
      "AddOrderCardOwnerType": {
        "type": [
          "string"
        ],
        "enum": [
          "company",
          "employee",
          "expensecentre"
        ]
      },
      "AddUserOrder": {
        "description": "Add `User` JSON parameters.",
        "properties": {
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `User` reference in an external system.",
            "example": "123456-user-1"
          },
          "dob": {
            "$ref": "#/components/schemas/DateParam",
            "description": "The date of birth of the `User`.",
            "example": "1970-10-21"
          },
          "email": {
            "type": [
              "string"
            ],
            "description": "The email address of the `User`.",
            "example": "jdoe@fake.soldo.com"
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User`.",
            "example": "Business Strategist"
          },
          "middlename": {
            "type": [
              "string"
            ],
            "description": "The middle name of the `User`."
          },
          "mobile": {
            "type": [
              "string"
            ],
            "description": "The mobile number of the `User`.",
            "example": "+44123323232"
          },
          "mobile_access": {
            "type": [
              "boolean"
            ],
            "default": "false",
            "description": "It determines whether the `User` has mobile access.",
            "example": true
          },
          "mobile_prefix": {
            "type": [
              "string"
            ],
            "description": "The mobile number country prefix.",
            "example": "+44"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `User`.",
            "example": "John"
          },
          "reports_to": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` they report to.",
            "example": "XMPL1234-000001"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the `User`.",
            "example": "Smith"
          },
          "web_access": {
            "type": [
              "boolean"
            ],
            "default": "false",
            "description": "It determines whether the `User` has web access.",
            "example": true
          }
        },
        "required": [
          "mobile_access",
          "name",
          "request_timestamp",
          "surname",
          "web_access"
        ]
      },
      "AddWalletOrder": {
        "description": "Add `Wallet` JSON parameters.",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The currency of the `Wallet`.",
            "example": "EUR"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet`.",
            "example": "John Doe"
          },
          "owner_type": {
            "$ref": "#/components/schemas/AddWalletOwnerType",
            "description": "The type of the owner of the `Wallet`.",
            "example": "company"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          }
        },
        "required": [
          "currency",
          "name",
          "request_timestamp"
        ]
      },
      "AddWalletOwnerType": {
        "type": [
          "string"
        ],
        "enum": [
          "company"
        ]
      },
      "Address": {
        "properties": {
          "address_category": {
            "type": [
              "string"
            ],
            "description": "The category of the `Address`.",
            "example": "COMPANY"
          },
          "address_type": {
            "type": [
              "string"
            ],
            "description": "The type of the `Address`.",
            "example": "SHIPPING"
          },
          "addressee_name": {
            "type": [
              "string"
            ],
            "description": "The name of the addressee.",
            "example": "John"
          },
          "addressee_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the addressee.",
            "example": "Smith"
          },
          "city": {
            "type": [
              "string"
            ],
            "description": "The city of the `Address`.",
            "example": "London"
          },
          "country": {
            "type": [
              "string"
            ],
            "description": "The country of the `Address`.",
            "example": "GB"
          },
          "county": {
            "type": [
              "string"
            ],
            "description": "The county of the `Address`.",
            "example": "LD"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Address` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "default_shipping": {
            "type": [
              "boolean"
            ],
            "description": "True if the `Address` is the default shipping address.",
            "example": false
          },
          "employee_id": {
            "type": [
              "string"
            ],
            "description": "The `User` ID, only if `address_category` is `USER`."
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Address` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "line1": {
            "type": [
              "string"
            ],
            "description": "The actual name of the `Address`.",
            "example": "Foo Street 75"
          },
          "line2": {
            "type": [
              "string"
            ],
            "description": "The `Address` street.",
            "example": "Bar Street 64"
          },
          "line3": {
            "type": [
              "string"
            ],
            "description": "An optional other street.",
            "example": "Other street 31"
          },
          "post_code": {
            "type": [
              "string"
            ],
            "description": "The postal code of the `Address`.",
            "example": "00000"
          },
          "public_id": {
            "type": [
              "string"
            ],
            "description": "The `Address` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "AddressResourceType": {
        "type": [
          "string"
        ],
        "enum": [
          "USER",
          "COMPANY"
        ]
      },
      "Addresses": {
        "properties": {
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "AssignedUserRoles": {
        "properties": {
          "id": {
            "type": [
              "string"
            ],
            "description": "The `User` ID.",
            "example": "XMPL1234-000001"
          },
          "roles": {
            "type": [
              "array"
            ],
            "description": "The list of `UserRole` of the `User`.",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          }
        }
      },
      "Autotag": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Autotag` was created (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "criteria": {
            "type": [
              "array"
            ],
            "description": "The list of `Criteria` that need to be satisfied in order for the `Autotag` to be executed (sortable: no)",
            "items": {
              "$ref": "#/components/schemas/AutotagCriteria"
            }
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Autotag` rule is enabled (if a rule is not enabled, it won't be executed) (sortable: no).",
            "example": true
          },
          "expense_category_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseCategory` of to be assigned to a `Transaction` satisfying the `Criteria` (sortable: no).",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Autotag` ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Autotag` was last updated (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Autotag` (sortable: no).",
            "example": "AutotagRule"
          },
          "operation": {
            "$ref": "#/components/schemas/AutotagOperation",
            "description": "The logical operator applied to the `Criteria` (AND, OR) (sortable: no).",
            "example": "AND"
          },
          "owner_id": {
            "type": [
              "string"
            ],
            "description": "The `User` ID who created the `Autotag` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "status": {
            "$ref": "#/components/schemas/AutotagStatus",
            "description": "The status of the `Autotag` (sortable: no).",
            "example": "VALID"
          },
          "tag_ids": {
            "type": [
              "array"
            ],
            "description": "The IDs of the `Tag` and related `List` to be assigned to a `Transaction` satisfying the `Criteria` (sortable: no)",
            "items": {
              "$ref": "#/components/schemas/AutotagTag"
            }
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `VATRate` to be assigned to a `Transaction` satisfying the `Criteria` (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        }
      },
      "AutotagCriteria": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AutotagCriteriaName",
            "description": "The name of the criteria to be satisfied in order for the `Autotag` to be executed.",
            "example": "MERCHANT_CATEGORY"
          },
          "value": {
            "type": [
              "array"
            ],
            "description": "The values of the criteria to be satisfied in order for the `Autotag` to be executed, in case of `USER`, `CARD`, `COMPANY_CARD` it's a list of IDs; in case of `MERCHANT_CATEGORY` it's one or more `MerchantCategories`; in case of `MERCHANT` it's a text string which should be included in the merchant name",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "AutotagCriteriaName": {
        "type": [
          "string"
        ],
        "enum": [
          "USER",
          "CARD",
          "COMPANY_CARD",
          "MERCHANT_CATEGORY",
          "MERCHANT"
        ]
      },
      "AutotagOperation": {
        "type": [
          "string"
        ],
        "enum": [
          "AND",
          "OR"
        ]
      },
      "AutotagStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "VALID",
          "NOT_VALID",
          "PARTIAL_VALID"
        ]
      },
      "AutotagTag": {
        "properties": {
          "dictionary_id": {
            "type": [
              "string"
            ],
            "description": "The `List` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "tag_id": {
            "type": [
              "string"
            ],
            "description": "The `Tag` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "Autotags": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Autotag"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Card": {
        "properties": {
          "active": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Card` is active (sortable: yes).",
            "example": true
          },
          "assignees": {
            "type": [
              "array"
            ],
            "description": "List of `User` IDs currently assigned to the `Card`, when `owner_type` is `employee` there is only one assignee, when is `company` there could be none or more assignees (sortable: no).",
            "items": {
              "example": "XMPL1234-000005"
            }
          },
          "card_holder": {
            "type": [
              "string"
            ],
            "description": "The name and surname of the Cardholder of the `Card`, only available when `owner_type` is `employee` (sortable: yes).",
            "example": "John Doe"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Card` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "currency_code": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency of the `Wallet` the `Card` is linked to ([ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code) (sortable: no).",
            "example": "EUR"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference ID of the Cardholder (sortable: no).",
            "example": "123456-user-1"
          },
          "emboss_line4": {
            "type": [
              "string"
            ],
            "description": "The fourth line printed on the `Card` (sortable: no).",
            "example": "Example Inc."
          },
          "expiration_date": {
            "type": [
              "string"
            ],
            "description": "The expiration date and time of the `Card` (sortable: yes).",
            "example": "2026-05-07T23:59:59Z"
          },
          "group_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Group` the `Card` is related to (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Card` ID (sortable: yes).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "label": {
            "type": [
              "string"
            ],
            "description": "The label of the `Card (sortable: no)`.",
            "example": "CardLabel"
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Card` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "masked_pan": {
            "type": [
              "string"
            ],
            "description": "The masked PAN of the `Card` (sortable: yes).",
            "example": "123456******1234"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Card` (sortable: yes).",
            "example": "CardName"
          },
          "owner_public_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the Cardholder available when `owner_type` is `employee`.",
            "example": "XMPL1234-000001"
          },
          "owner_type": {
            "$ref": "#/components/schemas/CardOwnerType",
            "description": "The owner type (sortable: no).",
            "example": "employee"
          },
          "payment_method": {
            "$ref": "#/components/schemas/CardPaymentMethod",
            "description": "The `Card` payment method (sortable: no).",
            "example": "ONLINE_ADS"
          },
          "payment_method_id": {
            "type": [
              "string"
            ],
            "description": "The payment method ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "preset_id": {
            "type": [
              "string"
            ],
            "description": "The `cardRulePreset` ID assigned to the `Card`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "sensitive_data": {
            "$ref": "#/components/schemas/CardSensitiveData",
            "description": "The `Card` sensitive data (sortable: no)."
          },
          "status": {
            "$ref": "#/components/schemas/CardStatus",
            "description": "The status of the `Card` (sortable: yes).",
            "example": "Normal"
          },
          "type": {
            "$ref": "#/components/schemas/CardType",
            "description": "The type of `Card` (sortable: no).",
            "example": "PLASTIC"
          },
          "vehicle_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Vehicle` assigned to the card (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` the `Card` is linked to (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "CardAttachedResourceType": {
        "type": [
          "string"
        ],
        "description": "The type of a resource the `Card` is attached to.",
        "enum": [
          "wallet",
          "company",
          "employee",
          "onlineAd",
          "subscription",
          "purchase"
        ],
        "example": "wallet"
      },
      "CardOwnerType": {
        "type": [
          "string"
        ],
        "enum": [
          "company",
          "employee"
        ]
      },
      "CardPaymentMethod": {
        "type": [
          "string"
        ],
        "enum": [
          "SUBSCRIPTION",
          "ONLINE_ADS",
          "PURCHASE"
        ]
      },
      "CardRuleCashPointLimitName": {
        "type": [
          "string"
        ],
        "description": "A `CardRuleCashPointRule` limit name.",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "chipAndPin",
          "magstripe"
        ]
      },
      "CardRuleCashPointRule": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "Amount of the limit.",
            "example": 10.25
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          }
        }
      },
      "CardRuleCashPointRules": {
        "properties": {
          "chip_and_pin": {
            "$ref": "#/components/schemas/CardRuleChipAndPin",
            "description": "It determines whether the `chipAndPin` is enabled."
          },
          "daily": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to withdraw at ATM up to a certain amount on a daily basis."
          },
          "magstripe": {
            "$ref": "#/components/schemas/CardRuleMagstripe",
            "description": "It determines whether the `magstripe` is enabled."
          },
          "monthly": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to withdraw at ATM up to a certain amount on a monthly basis."
          },
          "weekly": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to withdraw at ATM up to a certain amount on a weekly basis."
          }
        }
      },
      "CardRuleChipAndPin": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          }
        }
      },
      "CardRuleCountries": {
        "properties": {
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/CardRuleCountry"
            }
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "CardRuleCountry": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ISO3166CardRuleCountryCode",
            "description": "The code of the country [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) to be updated.",
            "example": "GBR"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card should be allowed to spend money in that country.",
            "example": true
          }
        },
        "required": [
          "code",
          "enabled"
        ]
      },
      "CardRuleItem": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `CardRule` is enabled.",
            "example": true
          },
          "name": {
            "$ref": "#/components/schemas/CardRuleName",
            "description": "The name of the `CardRule` to update. To follow the implications of each rule when enabled (`enabled=true`) on a card:\n- `OpenCloseMasterLock`, card is locked and only admins can unlock it\n- `OpenClose`, card is locked and any user who have access to the card can unlock it\n- `OpenCloseAfterOneTx`, card is automatically locked after each transaction\n- `Online`, card can spend online\n- `Contactless`, card can spend contactless",
            "example": "CashPoint"
          }
        },
        "required": [
          "enabled",
          "name"
        ]
      },
      "CardRuleLimitPeriod": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          },
          "left": {
            "type": [
              "number"
            ]
          },
          "max": {
            "type": [
              "number"
            ],
            "description": "Maximum spendable amount related to the limit.",
            "example": 10.25
          },
          "spent": {
            "type": [
              "number"
            ]
          }
        }
      },
      "CardRuleList": {
        "properties": {
          "rules": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/CardRuleItem"
            }
          }
        }
      },
      "CardRuleMagstripe": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          }
        }
      },
      "CardRuleMaxPerTransaction": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          },
          "left": {
            "type": [
              "number"
            ]
          },
          "max": {
            "type": [
              "number"
            ],
            "description": "Maximum spendable amount related to the limit.",
            "example": 10.25
          },
          "spent": {
            "type": [
              "number"
            ]
          }
        }
      },
      "CardRuleMerchantCategories": {
        "properties": {
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/CardRuleMerchantCategory"
            }
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "CardRuleMerchantCategory": {
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the rule is enabled.",
            "example": true
          },
          "name": {
            "$ref": "#/components/schemas/MerchantCategory",
            "description": "The `MerchantCategory`.",
            "example": "Services_Business"
          }
        },
        "required": [
          "enabled",
          "name"
        ]
      },
      "CardRuleName": {
        "type": [
          "string"
        ],
        "enum": [
          "OpenCloseMasterLock",
          "OpenClose",
          "OpenCloseAfterOneTx",
          "Online",
          "Contactless"
        ]
      },
      "CardRulePreset": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `CardRulePreset` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of `CardRulePreset` (sortable: no).",
            "example": "Default CardRule preset policy"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `CardRulePreset` ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `CardRulePreset` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of `CardRulePreset` (sortable: no).",
            "example": "DefaultPreset"
          }
        }
      },
      "CardRulePresets": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/CardRulePreset"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "CardRuleSpendingLimitsLimitName": {
        "type": [
          "string"
        ],
        "description": "A SpendingLimit rule name.",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "perTransaction"
        ]
      },
      "CardRuleSpendingLimitsRule": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "Amount of the limit.",
            "example": 10.25
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          }
        }
      },
      "CardRuleSpendingLimitsRules": {
        "properties": {
          "daily": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to spend up to a certain amount on a daily basis."
          },
          "monthly": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to spend up to a certain amount on a monthly basis."
          },
          "per_transaction": {
            "$ref": "#/components/schemas/CardRuleMaxPerTransaction",
            "description": "It determines the possibility to spend up to a certain amount on a weekly basis."
          },
          "weekly": {
            "$ref": "#/components/schemas/CardRuleLimitPeriod",
            "description": "It determines the possibility to spend up to a certain amount per transaction."
          }
        }
      },
      "CardSensitiveData": {
        "properties": {
          "encrypted_cvv": {
            "type": [
              "string"
            ],
            "description": "The encrypted cvv of the card."
          },
          "encrypted_full_pan": {
            "type": [
              "string"
            ],
            "description": "The encrypted PAN of the card."
          },
          "encrypted_pin": {
            "type": [
              "string"
            ],
            "description": "The encrypted pin of the card (only valid for PLASTIC or FUEL card type)."
          }
        }
      },
      "CardStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "Normal",
          "Do not honor",
          "Lost card",
          "Stolen card",
          "Expired card",
          "Restricted card",
          "Security Violation",
          "Cardholder to contact the issuer",
          "Card Destroyed"
        ]
      },
      "CardType": {
        "type": [
          "string"
        ],
        "enum": [
          "PLASTIC",
          "VIRTUAL",
          "FUEL",
          "GOOGLE_CARD"
        ]
      },
      "Cards": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Channel": {
        "type": [
          "string"
        ],
        "enum": [
          "WEB",
          "MOBILE"
        ]
      },
      "Company": {
        "properties": {
          "company_account_id": {
            "type": [
              "string"
            ],
            "description": "The `Company` ID requested at the login.",
            "example": "XMPL1234"
          },
          "financial_entity": {
            "$ref": "#/components/schemas/FinancialEntity",
            "description": "The Soldo entity providing financial services to the ‘Company‘ (‘SFS-UK‘ stands for Soldo Financial Services Ltd. while ‘SFS-IRL‘ stands for Soldo Financial Services Ireland DAC).",
            "example": "SFS-IRL"
          },
          "icon_code": {
            "type": [
              "string"
            ],
            "deprecated": true,
            "description": "The iconCode of the `Company`."
          },
          "market": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) code of the country the `Company` Soldo account is registered in.",
            "example": "GBR"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Company`.",
            "example": "Example Inc."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address",
            "description": "The default shipping `Address` of the `Company`."
          },
          "time_zone": {
            "type": [
              "string"
            ],
            "description": "The time zone name of the country the `Company` Soldo account is registered to (based on tz database format).",
            "example": "Europe/London"
          },
          "vat_number": {
            "type": [
              "string"
            ],
            "description": "The VAT number of the `Company`.",
            "example": 98746784967
          }
        }
      },
      "Configuration": {
        "properties": {
          "resource_ids": {
            "type": [
              "array"
            ],
            "description": "The list of resource IDs belonging to the scope, only in case of scope of type `LIST`.",
            "items": {
              "example": "776f5018-07e5-426b-a426-8b23fa1e985d"
            }
          },
          "resource_type": {
            "$ref": "#/components/schemas/ResourceSetResourceType",
            "description": "The type of resource for which the scope is defined.",
            "example": "GROUP"
          },
          "scope": {
            "$ref": "#/components/schemas/ResourceSetScope",
            "description": "The scope defined for the resource.",
            "example": "ALL"
          }
        }
      },
      "Contact": {
        "properties": {
          "account_info": {
            "type": [
              "array"
            ],
            "description": "The account info",
            "items": {
              "$ref": "#/components/schemas/AccountInfoContact"
            }
          },
          "country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) code of the country of the `Contact`.",
            "example": "GBR"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the contact was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Contact` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the contact was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Contact`.",
            "example": "John Doe"
          },
          "payment_scheme": {
            "type": [
              "array"
            ],
            "description": "The type of payment accepted by the `Contact`.",
            "items": {
              "$ref": "#/components/schemas/PaymentSchema"
            },
            "uniqueItems": true
          },
          "status": {
            "$ref": "#/components/schemas/ContactStatus",
            "description": "The status of the `Contact`.",
            "example": "SUGGESTED"
          },
          "type": {
            "$ref": "#/components/schemas/ContactType",
            "description": "The type of `Contact`.",
            "example": "SUPPLIER"
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` the bank details are assigned to (only available for `Contacts` of type `EMPLOYEE`).",
            "example": "XMPL1234-000001"
          }
        }
      },
      "ContactStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "CREATED",
          "SUGGESTED"
        ]
      },
      "ContactType": {
        "type": [
          "string"
        ],
        "enum": [
          "SUPPLIER",
          "CLIENT",
          "EMPLOYEE",
          "ACCOUNT"
        ]
      },
      "Contacts": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "CreateAddress": {
        "description": "Create `Address` JSON parameters.",
        "properties": {
          "addressee_name": {
            "type": [
              "string"
            ],
            "description": "The name of the addressee.",
            "example": "John"
          },
          "addressee_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the addressee.",
            "example": "Smith"
          },
          "city": {
            "type": [
              "string"
            ],
            "description": "The city name.",
            "example": "London"
          },
          "country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The country code in [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) standard."
          },
          "county": {
            "type": [
              "string"
            ],
            "description": "The county code.",
            "example": "00000"
          },
          "default_shipping": {
            "type": [
              "boolean"
            ],
            "description": "It is `true` if it's the default shipping address (for `COMPANY` addresses only).",
            "example": true
          },
          "employee_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` owner of the `Address`, required only when `resource_type` is `USER`.",
            "example": "XMPL1234-000003"
          },
          "line1": {
            "type": [
              "string"
            ],
            "description": "The actual name of the `Address`.",
            "example": "Actual address of John"
          },
          "line2": {
            "type": [
              "string"
            ],
            "description": "The primary street of the `Address`.",
            "example": "Foo street 33"
          },
          "line3": {
            "type": [
              "string"
            ],
            "description": "The optional secondary street.",
            "example": "Second floor"
          },
          "post_code": {
            "type": [
              "string"
            ],
            "description": "The post code of the city.",
            "example": "00000"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AddressResourceType",
            "description": "The type of the `Address`.",
            "example": "COMPANY"
          }
        },
        "required": [
          "city",
          "country",
          "line1",
          "post_code",
          "resource_type"
        ]
      },
      "CreateAutotag": {
        "description": "Add `Autotag` JSON parameters.",
        "properties": {
          "criteria": {
            "type": [
              "array"
            ],
            "description": "The list of `Criteria` that need to be satisfied in order for the `Autotag` to be executed.",
            "items": {
              "$ref": "#/components/schemas/AutotagCriteria"
            }
          },
          "expense_category_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseCategory` of to be assigned to a `Transaction` satisfying the `Criteria`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Autotag`.",
            "example": "Autotag"
          },
          "operation": {
            "$ref": "#/components/schemas/AutotagOperation",
            "description": "The logical operator applied to the `Criteria`.",
            "example": "AND"
          },
          "tag_ids": {
            "type": [
              "array"
            ],
            "description": "The IDs of the `Tag` and related `List` to be assigned to a `Transaction` satisfying the `Criteria`.",
            "items": {
              "$ref": "#/components/schemas/AutotagTag"
            }
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `VATRate` to be assigned to a `Transaction` satisfying the `Criteria`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          }
        },
        "required": [
          "criteria",
          "name",
          "operation"
        ]
      },
      "CreateContact": {
        "description": "Create `Contact` JSON parameters.",
        "properties": {
          "account_info": {
            "type": [
              "array"
            ],
            "description": "The account info.",
            "items": {
              "$ref": "#/components/schemas/AccountInfoContact"
            }
          },
          "country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) code of the country of the `Contact`",
            "example": "GBR"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Contact`.",
            "example": "John Doe"
          },
          "type": {
            "$ref": "#/components/schemas/ContactType",
            "description": "The type of the `Contact`.",
            "example": "SUPPLIER"
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` the bank details are assigned to (only available for `Contacts` of type `EMPLOYEE`).",
            "example": "XMPL1234-000001"
          }
        },
        "required": [
          "country",
          "name",
          "type"
        ]
      },
      "CreateExpenseCategory": {
        "description": "Add `ExpenseCategory` JSON parameters.",
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the `ExpenseCategory`.",
            "example": 123
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ExpenseCategory`.",
            "example": "An expense category"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "it determines whether the `ExpenseCategory` is visible on the transaction detail.",
            "example": true
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of expense this `ExpenseCategory` is assigned to.",
            "example": "company"
          },
          "merchant_categories": {
            "type": [
              "array"
            ],
            "description": "A list of merchant categories this `ExpenseCategory` is auto-assigned to.",
            "items": {
              "$ref": "#/components/schemas/MerchantCategory"
            }
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseCategory`.",
            "example": "category-one"
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the VAT Rate linked to the `ExpenseCategory`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        },
        "required": [
          "expense_type",
          "name"
        ]
      },
      "CreateExpenseReviewConfiguration": {
        "description": "Create conf JSON parameters.",
        "properties": {
          "activity_groups": {
            "type": [
              "array"
            ],
            "description": "It determines the filter by types of cards whose transactions are considered as expenses to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseConfigurationActivityGroup"
            },
            "uniqueItems": true
          },
          "policy_url": {
            "type": [
              "string"
            ],
            "description": "The URL of the company spending policy.",
            "example": "https://www.policy.pdf"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "start_date": {
            "type": [
              "string"
            ],
            "description": "The starting date from which the expenses can be reviewed.",
            "example": "2017-06-01T12:48:40Z"
          },
          "start_date_type": {
            "$ref": "#/components/schemas/ExpenseDateType",
            "description": "It determines the filter by the type of date, multiple statuses can be included.",
            "example": "SETTLEMENT"
          },
          "transaction_categories": {
            "type": [
              "array"
            ],
            "description": "It determines the filter by category of the transaction.",
            "items": {
              "$ref": "#/components/schemas/ExpenseTransactionCategoryInput"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "activity_groups",
          "policy_url",
          "request_timestamp",
          "start_date"
        ]
      },
      "CreateExpenseReviewProcess": {
        "description": "Create `ExpenseReviewProcess` JSON parameters.",
        "properties": {
          "conditions": {
            "type": [
              "array"
            ],
            "description": "The conditions a transaction needs to match in order to be included in the `ExpenseReviewProcess`.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessCondition"
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS DESCRIPTION"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS"
          },
          "steps": {
            "type": [
              "array"
            ],
            "description": "The approval steps a transaction needs to go through in order to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessStep"
            }
          }
        },
        "required": [
          "conditions",
          "description",
          "name",
          "steps"
        ]
      },
      "CreateGroup": {
        "description": "Create `Group` JSON parameters.",
        "properties": {
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `Group` reference in an external system.",
            "example": "hr-division-0001"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Group`.",
            "example": "HR"
          },
          "note": {
            "type": [
              "string"
            ],
            "description": "Any notes about the `Group`.",
            "example": "division"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType",
            "description": "The `Group`'s type.",
            "example": "DIVISION"
          }
        }
      },
      "CreateOnlineAds": {
        "description": "Add `OnlineAd` JSON parameters.",
        "properties": {
          "assignees": {
            "type": [
              "array"
            ],
            "description": "List of `User` IDs to be assigned to the `OnlineAds` and its `Cards`.",
            "items": {
              "type": [
                "string"
              ]
            },
            "uniqueItems": true
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `OnlineAds`.",
            "example": "Google Ads Campaign"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `OnlineAds`.",
            "example": "Google Ads"
          },
          "platform": {
            "$ref": "#/components/schemas/OnlineAdsPlatform",
            "description": "The platform of the `OnlineAds`.",
            "example": "GOOGLE"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID associated to the `OnlineAds`.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        },
        "required": [
          "assignees",
          "description",
          "name",
          "platform",
          "wallet_id"
        ]
      },
      "CreateOutOfOfficeDelegation": {
        "description": "Create `out_of_office` JSON parameters.",
        "properties": {
          "delegate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the person covering for the delegator.",
            "example": "XMPL1234-000002"
          },
          "delegator_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the person assigning the `out_of_office`.",
            "example": "XMPL1234-000001"
          },
          "features": {
            "type": [
              "array"
            ],
            "description": "The features of `out_of_office`.",
            "items": {
              "$ref": "#/components/schemas/DelegationFeature"
            }
          },
          "from_date": {
            "type": [
              "string"
            ],
            "description": "Defines when the out_of_office entry starts. fromDate included.(i.e. greater than or equal to) (Format: `yyyy-MM-dd`).",
            "example": "2020-04-06"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "to_date": {
            "type": [
              "string"
            ],
            "description": "Defines when the out_of_office entry ends. toDate included.(i.e. less than) (Format: `yyyy-MM-dd`).",
            "example": "2020-04-06"
          }
        },
        "required": [
          "delegate_id",
          "delegator_id",
          "features",
          "request_timestamp"
        ]
      },
      "CreatePayment": {
        "description": "Create `Payment` JSON parameters.",
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "amount_currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the amount (sortable: no).",
            "example": "EUR"
          },
          "idempotency_id": {
            "type": [
              "string"
            ],
            "description": "A unique ID who’s going to be used for idempotency check.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "reference": {
            "type": [
              "string"
            ],
            "description": "The `Payment` reference. The maximum length is `18` characters for `FPS` and `35` for `SEPA` and `SEPA_INSTANT`.",
            "example": "sepa-eur"
          },
          "schema": {
            "$ref": "#/components/schemas/PaymentSchema",
            "description": "The type of payment, must be one accepted by the contact.",
            "example": "SEPA"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "CreatePurchase": {
        "description": "Create `Purchase` JSON parameters.",
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The maximum spendable amount of the `Purchase`.",
            "example": 10.25
          },
          "assignee_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` assigned to the `Purchase`.",
            "example": "XMPL1234-000003"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Purchase`.",
            "example": "A purchase to approve"
          },
          "max_tx_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "default": "1",
            "description": "The total number of `Transactions` the temporary virtual `Card` can make.",
            "example": 3
          },
          "notes": {
            "type": [
              "string"
            ],
            "description": "The notes of the `Purchase`.",
            "example": "Notes about the purchase request"
          },
          "title": {
            "type": [
              "string"
            ],
            "description": "The name of the `Purchase`.",
            "example": "Tech book"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` the money are taken from, the funding source of the `Purchase`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        },
        "required": [
          "amount",
          "assignee_id",
          "description",
          "max_tx_number",
          "title",
          "wallet_id"
        ]
      },
      "CreateResourceSet": {
        "description": "Create `ResourceSet` JSON parameters.",
        "properties": {
          "configuration": {
            "type": [
              "array"
            ],
            "description": "The configuration of the `ResourceSet`.",
            "items": {
              "$ref": "#/components/schemas/Configuration"
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ResourceSet`.",
            "example": "This is a resource set"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ResourceSet`.",
            "example": "Resource set 01"
          }
        },
        "required": [
          "configuration",
          "name"
        ]
      },
      "CreateSubscription": {
        "description": "Add `Subscription` JSON parameters.",
        "properties": {
          "assignees": {
            "type": [
              "array"
            ],
            "description": "The assignees of the `Subscription`.",
            "example": "XMPL1234-000005",
            "items": {
              "type": [
                "string"
              ]
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Subscription`.",
            "example": "This is a resource set"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Subscription`.",
            "example": "Google Ads"
          },
          "payment_frequency": {
            "$ref": "#/components/schemas/SubscriptionPaymentFrequency",
            "description": "The payment frequency indicates how often a `Transaction` is expected to be made.",
            "example": "YEARLY"
          },
          "platform": {
            "$ref": "#/components/schemas/SubscriptionPlatform",
            "description": "The platform of the `Subscription`.",
            "example": "GOOGLE"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the associated `Wallet`.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        },
        "required": [
          "assignees",
          "description",
          "name",
          "payment_frequency",
          "platform",
          "wallet_id"
        ]
      },
      "CreateTransactionSplit": {
        "description": "Create `Transaction` split JSON parameters.",
        "properties": {
          "split_transactions": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/SplitTransaction"
            },
            "minItems": 2
          }
        },
        "required": [
          "split_transactions"
        ]
      },
      "CreateUser": {
        "properties": {
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `User` reference in an external system.",
            "example": "123456-user-1"
          },
          "email": {
            "type": [
              "string"
            ],
            "description": "The email address of the `User`.",
            "example": "jdoe@fake.soldo.com"
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User`.",
            "example": "Business Strategist"
          },
          "middlename": {
            "type": [
              "string"
            ],
            "description": "The middle name of the `User`.",
            "example": "John"
          },
          "mobile": {
            "type": [
              "string"
            ],
            "description": "The mobile number of the `User`.",
            "example": "+44123323232"
          },
          "mobile_access": {
            "type": [
              "boolean"
            ],
            "default": "false",
            "description": "It determines whether the `User` has mobile access.",
            "example": true
          },
          "mobile_prefix": {
            "type": [
              "string"
            ],
            "description": "The mobile number country prefix (e.g. +44).",
            "example": "+44"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `User`.",
            "example": "John"
          },
          "reports_to": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` they report to.",
            "example": "XMPL1234-000001"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the `User`.",
            "example": "Smith"
          },
          "web_access": {
            "type": [
              "boolean"
            ],
            "default": "false",
            "description": "It determines whether the `User` has web access.",
            "example": true
          }
        },
        "required": [
          "mobile",
          "mobile_access",
          "mobile_prefix",
          "name",
          "request_timestamp",
          "surname",
          "web_access"
        ]
      },
      "CreateVatRate": {
        "description": "Add `VatRate` JSON parameters.",
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the VATRate.",
            "example": "code-vat-11"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "the description of the VATRate.",
            "example": "Number 11 of Tax code"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "the VATRate is visible in the transaction detail.",
            "example": true
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the VATRate.",
            "example": "Tax 11"
          },
          "percentage": {
            "type": [
              "number"
            ],
            "format": "double",
            "description": "The percentage value of the VATRate.",
            "example": "something"
          }
        },
        "required": [
          "name",
          "percentage"
        ]
      },
      "CreateVehicle": {
        "description": "Create vehicle JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Vehicle`.",
            "example": "Employee electric vehicle"
          },
          "fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type of the `Vehicle`.",
            "example": "PETROL"
          },
          "number_plate": {
            "type": [
              "string"
            ],
            "description": "The plate number of the `Vehicle`.",
            "example": "AA000BB"
          },
          "vat_deductible": {
            "$ref": "#/components/schemas/VatDeductibilityPercentage",
            "description": "The VAT deductibility rate.",
            "example": 40
          }
        },
        "required": [
          "description",
          "fuel_type",
          "number_plate",
          "vat_deductible"
        ]
      },
      "CreateWallet": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Wallet`.",
            "example": "EUR"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Wallet`.",
            "example": "My company wallet"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet`.",
            "example": "John Doe"
          },
          "owner_type": {
            "$ref": "#/components/schemas/AddWalletOwnerType",
            "description": "The type of the owner of the `Wallet`.",
            "example": "company"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          }
        },
        "required": [
          "currency",
          "name",
          "request_timestamp"
        ]
      },
      "CreateWebhookSubscription": {
        "description": "Create `WebhookSubscription` JSON parameters.",
        "properties": {
          "active": {
            "type": [
              "boolean"
            ],
            "description": "The status of the `WebhookSubscription` (if `false`, notifications are not sent).",
            "example": false
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `WebhookSubscription`.",
            "example": "Google Ads Campaign"
          },
          "enabled_events": {
            "type": [
              "array"
            ],
            "description": "The list of the `WebhookSubscription` enabled events.",
            "example": "card_activated",
            "items": {
              "$ref": "#/components/schemas/WebhookEventName"
            }
          },
          "webhook_url": {
            "type": [
              "string"
            ],
            "description": "The URL of the `WebhookSubscription`.",
            "example": "https://your_domain.com/xx/xx"
          }
        },
        "required": [
          "active",
          "enabled_events",
          "webhook_url"
        ]
      },
      "DateParam": {
        "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
        "example": "1970-01-30"
      },
      "DelegationFeature": {
        "type": [
          "string"
        ],
        "enum": [
          "REQUEST_MONEY",
          "REQUEST_PURCHASE",
          "EXPENSE_REVIEW"
        ]
      },
      "DelegationStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "EXPIRED",
          "SCHEDULED",
          "DELETED"
        ]
      },
      "Direction": {
        "type": [
          "string"
        ],
        "description": "It indicates how the pages are ordered.",
        "enum": [
          "ASC",
          "DESC"
        ],
        "example": "DESC"
      },
      "DownloadStatement": {
        "description": "Download `statement` JSON parameters.",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Statement` to search for.",
            "example": "EUR"
          },
          "file_type": {
            "$ref": "#/components/schemas/StatementFileType",
            "description": "The generated `Statement` file type.",
            "example": "PDF"
          },
          "month": {
            "$ref": "#/components/schemas/Month",
            "description": "The reference month of the `Statement`.",
            "example": "JANUARY"
          },
          "year": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "example": 2025,
            "maximum": 2099,
            "minimum": 2015
          }
        },
        "required": [
          "currency",
          "file_type",
          "month",
          "year"
        ]
      },
      "EntityIdDTO": {
        "properties": {
          "id": {
            "type": [
              "string"
            ],
            "description": "The resource ID."
          }
        }
      },
      "Expense": {
        "properties": {
          "exported_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `EXPORTED` (sortable: no).",
            "example": 1
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User` (sortable: yes).",
            "example": "CTO"
          },
          "reviewed_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `REVIEWED` (sortable: no).",
            "example": 2
          },
          "to_review_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `TO_REVIEW` (sortable: no).",
            "example": 1
          },
          "total_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of `Transaction` items (sortable: no).",
            "example": 3
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "user_name": {
            "type": [
              "string"
            ],
            "description": "The name of the `User` (sortable: yes).",
            "example": "JOHN"
          },
          "user_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the `User` (sortable: yes).",
            "example": "DONNE"
          }
        }
      },
      "ExpenseCategories": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/ExpenseCategory"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "ExpenseCategory": {
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the `ExpenseCategory`.",
            "example": 123
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ExpenseCategory` was created (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A custom description of the `ExpenseCategory`.",
            "example": "An expense category"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "The `ExpenseCategory` is visible in the transaction detail.",
            "example": false
          },
          "expense_type": {
            "type": [
              "string"
            ],
            "description": "The type of expense assigned to category.",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `ExpenseCategory` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "integration": {
            "type": [
              "string"
            ],
            "description": "The `ExpenseCategory`'s correlated integration.",
            "example": "Netsuite"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ExpenseCategory` was last updated (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "merchant_categories": {
            "type": [
              "array"
            ],
            "description": "A list of merchant categories this `ExpenseCategory`.",
            "items": {
              "$ref": "#/components/schemas/MerchantCategory"
            },
            "uniqueItems": true
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseCategory`.",
            "example": "category-one"
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the VAT rate linked to the `ExpenseCategory`.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          }
        }
      },
      "ExpenseConfigurationActivityGroup": {
        "type": [
          "string"
        ],
        "enum": [
          "USER",
          "COMPANY",
          "PURCHASE",
          "SUBSCRIPTION",
          "ONLINE_ADS",
          "OUT_OF_PLATFORM_COMPANY",
          "OUT_OF_PLATFORM_PERSONAL"
        ]
      },
      "ExpenseDateType": {
        "type": [
          "string"
        ],
        "enum": [
          "TRANSACTION",
          "SETTLEMENT"
        ]
      },
      "ExpenseItem": {
        "properties": {
          "exported_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `EXPORTED` (sortable: no).",
            "example": 1
          },
          "from_date": {
            "type": [
              "string"
            ],
            "description": "The beginning of the period of the search (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User` (sortable: yes).",
            "example": "CTO"
          },
          "reviewed_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `REVIEWED` (sortable: no).",
            "example": 2
          },
          "to_date": {
            "type": [
              "string"
            ],
            "description": "The end of the period of the search (sortable: no).",
            "example": "2017-06-05T12:48:40Z"
          },
          "to_review_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of the `Transaction` items in status `TO_REVIEW` (sortable: no).",
            "example": 1
          },
          "total_transaction": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The number of `Transaction` items (sortable: no).",
            "example": 3
          },
          "transaction_exported": {
            "type": [
              "array"
            ],
            "description": "The array array contains ID of the `Transaction` in status `EXPORTED` (sortable: no).",
            "items": {
              "example": "4d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          },
          "transaction_reviewed": {
            "type": [
              "array"
            ],
            "description": "The array contains ID of the `Transaction` in status `REVIEWED` (sortable: no).",
            "items": {
              "example": "3d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          },
          "transaction_to_review": {
            "type": [
              "array"
            ],
            "description": "The array contains ID of the `Transaction` in status `TO_REVIEW` (sortable: no).",
            "items": {
              "example": "2d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "user_name": {
            "type": [
              "string"
            ],
            "description": "The name of the `User` (sortable: yes).",
            "example": "JOHN"
          },
          "user_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the `User` (sortable: yes).",
            "example": "DONNE"
          }
        }
      },
      "ExpensePaymentMethod": {
        "type": [
          "string"
        ],
        "description": "It determines the filter by payment method of the transaction.",
        "enum": [
          "USER",
          "COMPANY",
          "PURCHASE",
          "SUBSCRIPTION",
          "ONLINE_ADS",
          "OUT_OF_PLATFORM_COMPANY",
          "OUT_OF_PLATFORM_PERSONAL"
        ]
      },
      "ExpenseReport": {
        "properties": {
          "deduct_amount": {
            "type": [
              "number"
            ],
            "description": "The amount to be deducted from the user."
          },
          "exported_by": {
            "type": [
              "string"
            ],
            "description": "The ID of the user who exported the  `ExpenseReport`."
          },
          "exported_date": {
            "type": [
              "string"
            ],
            "description": "The date when the  `ExpenseReport` got exported."
          },
          "file_url": {
            "type": [
              "string"
            ],
            "description": "The Base64 string of the File URL encrypted by DES in ECB mode, Pkcs7 padding scheme and using Token for key."
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The  `ExpenseReport` ID .",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "number": {
            "type": [
              "string"
            ],
            "description": "The  `ExpenseReport` number."
          },
          "process_amount": {
            "type": [
              "number"
            ],
            "description": "The amount to be processed."
          },
          "processed_by": {
            "type": [
              "string"
            ],
            "description": "The ID of the user who processed the  `ExpenseReport`."
          },
          "processed_date": {
            "type": [
              "string"
            ],
            "description": "The date when the expense report got processed."
          },
          "protocol": {
            "type": [
              "string"
            ],
            "description": "The  `ExpenseReport` ID protocol."
          },
          "reimburse_amount": {
            "type": [
              "number"
            ],
            "description": "The amount to be reimbursed to the user."
          },
          "reimbursement_transaction_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the transaction of the `ExpenseReport`."
          },
          "status": {
            "$ref": "#/components/schemas/ExpenseReportStatusOutput",
            "description": "The status of the  `ExpenseReport`."
          },
          "trx_date_from": {
            "type": [
              "string"
            ],
            "description": "The date of the oldest expense included in the  `ExpenseReport`."
          },
          "trx_date_to": {
            "type": [
              "string"
            ],
            "description": "The date of the most recent expense included in the  `ExpenseReport`."
          },
          "trx_owner_id": {
            "type": [
              "string"
            ],
            "description": "The  ID of the user who made the expenses included in the  `ExpenseReport`."
          },
          "type": {
            "$ref": "#/components/schemas/ExpenseReportType",
            "description": "The type of the  `ExpenseReport`."
          }
        }
      },
      "ExpenseReportDownload": {
        "properties": {
          "file_url": {
            "type": [
              "string"
            ],
            "description": "The  `ExpenseReport`file URL "
          }
        }
      },
      "ExpenseReportFileType": {
        "type": [
          "string"
        ],
        "description": "The expense report file type.",
        "enum": [
          "PDF",
          "PDF_WITH_ATTACHMENTS"
        ],
        "example": "PDF"
      },
      "ExpenseReportStatus": {
        "type": [
          "string"
        ],
        "description": "The `ExpenseReport` status.",
        "enum": [
          "PROCESSED",
          "CANCELLED",
          "TO_BE_PROCESSED"
        ]
      },
      "ExpenseReportStatusOutput": {
        "type": [
          "string"
        ],
        "enum": [
          "PROCESSED",
          "CANCELLED",
          "DELETED",
          "TO_BE_PROCESSED"
        ]
      },
      "ExpenseReportStatusUpdate": {
        "type": [
          "string"
        ],
        "enum": [
          "PROCESSED",
          "CANCELLED"
        ]
      },
      "ExpenseReportType": {
        "type": [
          "string"
        ],
        "enum": [
          "EMPLOYEE",
          "COMPANY"
        ]
      },
      "ExpenseReports": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/ExpenseReport"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "ExpenseReviewConfiguration": {
        "properties": {
          "activity_groups": {
            "type": [
              "array"
            ],
            "description": "It determines the filter by types of `Cards` whose `Transactions` are considered as expenses to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseConfigurationActivityGroup"
            },
            "uniqueItems": true
          },
          "creation_timestamp": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ExpenseReviewConfiguration` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "Indicates the `ExpenseReviewConfiguration` is enabled."
          },
          "locked": {
            "type": [
              "boolean"
            ],
            "description": "Indicates the `ExpenseReviewConfiguration` is locked.",
            "example": false
          },
          "policy_url": {
            "type": [
              "string"
            ],
            "description": "The URL of the company spending policy.",
            "example": "https://www.policy.pdf"
          },
          "start_date": {
            "type": [
              "string"
            ],
            "description": "The starting date from which an `Expense` can be reviewed.",
            "example": "2017-06-01T12:48:40Z"
          },
          "start_date_type": {
            "$ref": "#/components/schemas/ExpenseDateType",
            "description": "It determines the filter by the type of date.",
            "example": "SETTLEMENT"
          },
          "transaction_categories": {
            "type": [
              "array"
            ],
            "description": "It determines the filter by category of the `Transaction`.",
            "items": {
              "$ref": "#/components/schemas/ExpenseTransactionCategory"
            },
            "uniqueItems": true
          },
          "update_timestamp": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ExpenseReviewConfiguration` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          }
        }
      },
      "ExpenseReviewProcess": {
        "properties": {
          "conditions": {
            "type": [
              "array"
            ],
            "description": "The conditions a transaction needs to match in order to be included in the `ExpenseReviewProcess`.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessCondition"
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A textual description of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS DESCRIPTION"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `ExpenseReviewProcess` id.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the`ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS"
          },
          "priority": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The order of priority in which the `ExpenseReviewProcess` will be executed.",
            "example": 2
          },
          "status": {
            "$ref": "#/components/schemas/ExpenseReviewProcessStatus",
            "description": "The status of `ExpenseReviewProcess`.",
            "example": "ACTIVE"
          },
          "steps": {
            "type": [
              "array"
            ],
            "description": "The approval steps a transaction needs to go through in order to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessStep"
            }
          },
          "steps_count": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The total number of approval steps.",
            "example": 2
          }
        },
        "required": [
          "conditions",
          "description",
          "name",
          "status",
          "steps",
          "steps_count"
        ]
      },
      "ExpenseReviewProcessAmountCondition": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount a transaction must exceed / not exceed in order to satisfy the condition.",
            "example": 10.25
          },
          "operator": {
            "$ref": "#/components/schemas/ExpenseReviewProcessComparator",
            "description": "The logical operator to be used in relationship to the transaction amount.",
            "example": "LOWER_EQUAL"
          }
        },
        "required": [
          "amount",
          "operator"
        ]
      },
      "ExpenseReviewProcessAutomationRule": {
        "properties": {
          "amount_condition": {
            "$ref": "#/components/schemas/ExpenseReviewProcessAmountCondition",
            "description": "A condition based on the transaction amount."
          },
          "expense_status": {
            "$ref": "#/components/schemas/ExpenseReviewProcessStepStatus",
            "description": "The status of the expense in case the conditions of the automation rules are satisfied.",
            "example": "PARTIALLY_APPROVED"
          },
          "required_info": {
            "type": [
              "boolean"
            ],
            "default": "false",
            "description": "A boolean to define whether a transaction should have all the required info (as defined on the Reminders feature) completed.",
            "example": true
          }
        },
        "required": [
          "expense_status",
          "required_info"
        ]
      },
      "ExpenseReviewProcessChangeStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "ExpenseReviewProcessComparator": {
        "type": [
          "string"
        ],
        "enum": [
          "HIGHER_EQUAL",
          "LOWER_EQUAL"
        ]
      },
      "ExpenseReviewProcessCondition": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ExpenseReviewProcessConditionType",
            "description": "The type of the condition.",
            "example": "USER"
          },
          "value": {
            "type": [
              "array"
            ],
            "description": "One or more values which identify the type of condition. In case of type `OUT_OF_PLATFORM_COMPANY`, `OUT_OF_PLATFORM_PERSONAL` and `PURCHASE` the value must be `ALL`. In case of `EXPENSE_TYPE` the accepted values are: `COMPANY`, `PERSONAL`, `TRAVEL_AND_ENTERTAINMENT`. In case of `ONLINE_ADS_CARD` and `SUBSCRIPTION_CARD` it’s the ID of the corresponding card. In all the other cases it’s the public ID of the resource as returned by the corresponding endpoint.",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ExpenseReviewProcessConditionType": {
        "type": [
          "string"
        ],
        "enum": [
          "COMPANY_CARD",
          "COMPANY_WALLET",
          "EXPENSE_CATEGORY",
          "EXPENSE_TYPE",
          "MAIN_WALLET",
          "ONLINE_ADS_CARD",
          "OUT_OF_PLATFORM_COMPANY",
          "OUT_OF_PLATFORM_PERSONAL",
          "PURCHASE",
          "SUBSCRIPTION_CARD",
          "TAG",
          "USER",
          "USER_CARD"
        ]
      },
      "ExpenseReviewProcessItems": {
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "A textual description of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS DESCRIPTION"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `ExpenseReviewProcess` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseReviewProcess` (sortable: yes).",
            "example": "EXPENSE REVIEW PROCESS"
          },
          "priority": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The order of priority in which the `ExpenseReviewProcess` will be executed (sortable: yes).",
            "example": 2
          },
          "status": {
            "$ref": "#/components/schemas/ExpenseReviewProcessStatus",
            "description": "The status of the `ExpenseReviewProcess` (sortable: yes).",
            "example": "ACTIVE"
          },
          "steps_count": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The total number of approval steps.",
            "example": 2
          }
        }
      },
      "ExpenseReviewProcessPriorities": {
        "properties": {
          "new_priority": {
            "type": [
              "number"
            ],
            "default": "1",
            "description": "The new order of priority in which the `ExpenseReviewProcess` will be executed.",
            "example": 2,
            "minimum": 1
          },
          "process_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseReviewProcess` for which the priority should be updated.",
            "example": "135fdb6c-2e77-4fc0-a79f-2453fde75ef7"
          }
        },
        "required": [
          "new_priority",
          "process_id"
        ]
      },
      "ExpenseReviewProcessPriority": {
        "description": "Change `ExpenseReviewProcess` priority JSON parameters.",
        "properties": {
          "priorities": {
            "type": [
              "array"
            ],
            "description": "A list of `ExpenseReviewProcesses` for which the priority should be updated with their new priority.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessPriorities"
            }
          }
        },
        "required": [
          "priorities"
        ]
      },
      "ExpenseReviewProcessReviewerInfo": {
        "properties": {
          "id": {
            "type": [
              "array"
            ],
            "description": "The ID of the reviewer as returned by the corresponding endpoint (only required in case of reviewer of type `ROLE` and `USER`).",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "ExpenseReviewProcessReviewerType": {
        "type": [
          "string"
        ],
        "enum": [
          "LINE_MANAGER",
          "ROLE",
          "USER"
        ]
      },
      "ExpenseReviewProcessStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "ExpenseReviewProcessStatusSearch": {
        "type": [
          "string"
        ],
        "description": "The status of the `ExpenseReviewProcess`.",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "ExpenseReviewProcessStep": {
        "properties": {
          "automation_rule": {
            "$ref": "#/components/schemas/ExpenseReviewProcessAutomationRule",
            "description": "An automation to automatically review the step when certain conditions are met."
          },
          "reviewer_info": {
            "$ref": "#/components/schemas/ExpenseReviewProcessReviewerInfo",
            "description": "One or more IDs to identify who can review this step (only required in case of reviewer of type `ROLE` and `USER`)."
          },
          "reviewer_type": {
            "$ref": "#/components/schemas/ExpenseReviewProcessReviewerType",
            "description": "The type of reviewer who can review this step.",
            "example": "USER"
          },
          "step_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "default": "1",
            "description": "A number which identifies the order of the step. The first step should start with `1`, the following steps number should be previous `step_number + 1` without any gap.",
            "example": 2,
            "minimum": 1
          }
        },
        "required": [
          "reviewer_type",
          "step_number"
        ]
      },
      "ExpenseReviewProcessStepStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "APPROVED",
          "PARTIALLY_APPROVED",
          "DECLINED"
        ]
      },
      "ExpenseReviewProcesses": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessItems"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "ExpenseStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "APPROVED",
          "PARTIALLY_APPROVED",
          "DENIED",
          "TO_REVIEW"
        ]
      },
      "ExpenseStatusCategory": {
        "type": [
          "string"
        ],
        "enum": [
          "AGAINST_POLICY",
          "PERSONAL_EXPENSE",
          "OTHER"
        ]
      },
      "ExpenseTransactionCategory": {
        "type": [
          "string"
        ],
        "enum": [
          "Payment",
          "Withdrawal",
          "Refund",
          "Chargeback",
          "MileageReimbursement"
        ]
      },
      "ExpenseTransactionCategoryInput": {
        "type": [
          "string"
        ],
        "enum": [
          "Payment"
        ]
      },
      "ExpenseType": {
        "type": [
          "string"
        ],
        "enum": [
          "COMPANY",
          "PERSONAL",
          "TRAVEL_AND_ENTERTAINMENT"
        ]
      },
      "Expenses": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Expense"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "ExportExpense": {
        "description": "Export the Expenses JSON parameters.",
        "properties": {
          "exported_by_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` who exports the expense.",
            "example": "XMPL1234-000003"
          },
          "transaction_ids": {
            "type": [
              "array"
            ],
            "description": "An array of `Transaction` ID to be exported",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "exported_by_id",
          "transaction_ids"
        ]
      },
      "ExportExpenseReview": {
        "properties": {
          "expense_report_protocol_ids": {
            "type": [
              "array"
            ],
            "description": "The protocol IDs of the `ExpenseReport`.",
            "items": {
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        }
      },
      "ExportStatus": {
        "type": [
          "string"
        ],
        "description": "The export status of the expense.",
        "enum": [
          "EXPORTED",
          "NOT_EXPORTED"
        ],
        "example": "EXPORTED"
      },
      "FinancialEntity": {
        "type": [
          "string"
        ],
        "enum": [
          "SFS-UK",
          "SFS-IRL"
        ]
      },
      "FuelType": {
        "type": [
          "string"
        ],
        "enum": [
          "PETROL",
          "DIESEL",
          "METHANE",
          "LPG",
          "LNG",
          "ELECTRIC",
          "UNKNOWN"
        ]
      },
      "Group": {
        "properties": {
          "cards": {
            "type": [
              "array"
            ],
            "description": "A list of `Card` IDs related to the `Group` (sortable: no).",
            "items": {
              "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
            }
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Group` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `Group` reference in an external system.",
            "example": "hr-division-0001"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Group` ID (sortable: yes).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Group` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "members": {
            "type": [
              "array"
            ],
            "description": "A list of `User` IDs belonging to the `Group` (sortable: no).",
            "items": {
              "example": "XMPL1234-000003"
            }
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Group` (sortable: yes).",
            "example": "HR"
          },
          "note": {
            "type": [
              "string"
            ],
            "description": "Any notes about the `Group` (sortable: no).",
            "example": "division"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType",
            "description": "The `Group` type (sortable: no).",
            "example": "DIVISION"
          },
          "wallets": {
            "type": [
              "array"
            ],
            "description": "A list of `Wallet` IDs related to the `Group` (sortable: no).",
            "items": {
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        }
      },
      "GroupResource": {
        "description": "The `Group` resource to remove.",
        "properties": {
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of either `User`, `Wallet` or `Card` resource.",
            "example": "XMPL1234-000001"
          },
          "type": {
            "$ref": "#/components/schemas/GroupResourceType",
            "description": "The type of resource",
            "example": "USER"
          }
        }
      },
      "GroupResourceType": {
        "type": [
          "string"
        ],
        "enum": [
          "USER",
          "WALLET",
          "CARD"
        ]
      },
      "GroupType": {
        "type": [
          "string"
        ],
        "enum": [
          "TEAM",
          "PROJECT",
          "DEPARTMENT",
          "DIVISION",
          "SQUAD",
          "UNIT",
          "PRODUCTION"
        ]
      },
      "Groups": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "ISO3166CardRuleCountryCode": {
        "type": [
          "string"
        ],
        "enum": [
          "ABW",
          "AFG",
          "AGO",
          "AIA",
          "ALB",
          "AND",
          "ARE",
          "ARG",
          "ARM",
          "ASM",
          "ATG",
          "AUS",
          "AUT",
          "AZE",
          "BDI",
          "BEL",
          "BEN",
          "BES",
          "BFA",
          "BGD",
          "BGR",
          "BHR",
          "BHS",
          "BIH",
          "BLM",
          "BLR",
          "BLZ",
          "BMU",
          "BOL",
          "BRA",
          "BRB",
          "BRN",
          "BTN",
          "BWA",
          "CAF",
          "CAN",
          "CCK",
          "CHE",
          "CHL",
          "CHN",
          "CIV",
          "CMR",
          "COD",
          "COG",
          "COK",
          "COL",
          "COM",
          "CPV",
          "CRI",
          "CUB",
          "CUW",
          "CXR",
          "CYM",
          "CYP",
          "CZE",
          "DEU",
          "DJI",
          "DMA",
          "DNK",
          "DOM",
          "DZA",
          "ECU",
          "EGY",
          "ERI",
          "ESP",
          "EST",
          "ETH",
          "FIN",
          "FJI",
          "FLK",
          "FRA",
          "FRO",
          "FSM",
          "GAB",
          "GBR",
          "GEO",
          "GGY",
          "GHA",
          "GIB",
          "GIN",
          "GMB",
          "GNB",
          "GNQ",
          "GRC",
          "GRD",
          "GRL",
          "GTM",
          "GUM",
          "GUY",
          "HKG",
          "HND",
          "HRV",
          "HTI",
          "HUN",
          "IDN",
          "IMN",
          "IND",
          "IRL",
          "IRN",
          "IRQ",
          "ISL",
          "ISR",
          "ITA",
          "JAM",
          "JEY",
          "JOR",
          "JPN",
          "KAZ",
          "KEN",
          "KGZ",
          "KHM",
          "KIR",
          "KNA",
          "KOR",
          "KWT",
          "LAO",
          "LBN",
          "LBR",
          "LBY",
          "LCA",
          "LIE",
          "LKA",
          "LSO",
          "LTU",
          "LUX",
          "LVA",
          "MAC",
          "MAF",
          "MAR",
          "MCO",
          "MDA",
          "MDG",
          "MDV",
          "MEX",
          "MHL",
          "MKD",
          "MLI",
          "MLT",
          "MMR",
          "MNE",
          "MNG",
          "MNP",
          "MOZ",
          "MRT",
          "MSR",
          "MUS",
          "MWI",
          "MYS",
          "NAM",
          "NCL",
          "NER",
          "NFK",
          "NGA",
          "NIC",
          "NIU",
          "NLD",
          "NOR",
          "NPL",
          "NRU",
          "NZL",
          "OMN",
          "PAK",
          "PAN",
          "PCN",
          "PER",
          "PHL",
          "PLW",
          "PNG",
          "POL",
          "PRI",
          "PRK",
          "PRT",
          "PRY",
          "PSE",
          "PYF",
          "QAT",
          "ROU",
          "RUS",
          "RWA",
          "SAU",
          "SDN",
          "SEN",
          "SGP",
          "SHN",
          "SLB",
          "SLE",
          "SLV",
          "SMR",
          "SOM",
          "SPM",
          "SRB",
          "SSD",
          "STP",
          "SUR",
          "SVK",
          "SVN",
          "SWE",
          "SWZ",
          "SXM",
          "SYC",
          "SYR",
          "TCA",
          "TCD",
          "TGO",
          "THA",
          "TJK",
          "TKL",
          "TKM",
          "TLS",
          "TON",
          "TTO",
          "TUN",
          "TUR",
          "TUV",
          "TWN",
          "TZA",
          "UGA",
          "UKR",
          "URY",
          "USA",
          "UZB",
          "VAT",
          "VCT",
          "VEN",
          "VGB",
          "VIR",
          "VNM",
          "VUT",
          "WLF",
          "WSM",
          "XXK",
          "YEM",
          "ZAF",
          "ZMB",
          "ZWE"
        ]
      },
      "ISO3166Country": {
        "type": [
          "string"
        ],
        "enum": [
          "ASC",
          "AND",
          "ARE",
          "AFG",
          "ATG",
          "AIA",
          "ALB",
          "ARM",
          "ANT",
          "AGO",
          "ATA",
          "ARG",
          "ASM",
          "AUT",
          "AUS",
          "ABW",
          "ALA",
          "AZE",
          "BIH",
          "BRB",
          "BGD",
          "BEL",
          "BFA",
          "BGR",
          "BHR",
          "BDI",
          "BEN",
          "BLM",
          "BMU",
          "BRN",
          "BOL",
          "BES",
          "BRA",
          "BHS",
          "BTN",
          "BUR",
          "BVT",
          "BWA",
          "BLR",
          "BLZ",
          "CAN",
          "CCK",
          "COD",
          "CAF",
          "COG",
          "CHE",
          "CIV",
          "COK",
          "CHL",
          "CMR",
          "CHN",
          "COL",
          "CPT",
          "CRI",
          "CSXX",
          "CUB",
          "CPV",
          "CUW",
          "CXR",
          "CYP",
          "CZE",
          "DEU",
          "DGA",
          "DJI",
          "DNK",
          "DMA",
          "DOM",
          "DZA",
          "ECU",
          "EST",
          "EGY",
          "ESH",
          "ERI",
          "ESP",
          "ETH",
          "FIN",
          "FJI",
          "FLK",
          "FSM",
          "FRO",
          "FRA",
          "FXX",
          "GAB",
          "GBR",
          "GRD",
          "GEO",
          "GUF",
          "GGY",
          "GHA",
          "GIB",
          "GRL",
          "GMB",
          "GIN",
          "GLP",
          "GNQ",
          "GRC",
          "SGS",
          "GTM",
          "GUM",
          "GNB",
          "GUY",
          "HKG",
          "HMD",
          "HND",
          "HRV",
          "HTI",
          "HUN",
          "IDN",
          "IRL",
          "ISR",
          "IMN",
          "IND",
          "IOT",
          "IRQ",
          "IRN",
          "ISL",
          "ITA",
          "JEY",
          "JAM",
          "JOR",
          "JPN",
          "KEN",
          "KGZ",
          "KHM",
          "KIR",
          "COM",
          "KNA",
          "PRK",
          "KOR",
          "KWT",
          "CYM",
          "KAZ",
          "LAO",
          "LBN",
          "LCA",
          "LIE",
          "LKA",
          "LBR",
          "LSO",
          "LTU",
          "LUX",
          "LVA",
          "LBY",
          "MAR",
          "MCO",
          "MDA",
          "MNE",
          "MAF",
          "MDG",
          "MHL",
          "MKD",
          "MLI",
          "MMR",
          "MNG",
          "MAC",
          "MNP",
          "MTQ",
          "MRT",
          "MSR",
          "MLT",
          "MUS",
          "MDV",
          "MWI",
          "MEX",
          "MYS",
          "MOZ",
          "NAM",
          "NCL",
          "NER",
          "NFK",
          "NGA",
          "NIC",
          "NLD",
          "NOR",
          "NPL",
          "NRU",
          "NTZ",
          "NIU",
          "NZL",
          "OMN",
          "PAN",
          "PER",
          "PYF",
          "PNG",
          "PHL",
          "PAK",
          "POL",
          "SPM",
          "PCN",
          "PRI",
          "PSE",
          "PRT",
          "PLW",
          "PRY",
          "QAT",
          "REU",
          "ROU",
          "ROM",
          "SRB",
          "RUS",
          "RWA",
          "SAU",
          "SLB",
          "SYC",
          "SDN",
          "SWE",
          "SGP",
          "SHN",
          "SVN",
          "SJM",
          "SVK",
          "SLE",
          "SMR",
          "SEN",
          "SOM",
          "SUR",
          "SSD",
          "STP",
          "SUN",
          "SLV",
          "SXM",
          "SYR",
          "SWZ",
          "TAA",
          "TCA",
          "TCD",
          "ATF",
          "TGO",
          "THA",
          "TJK",
          "TKL",
          "TLS",
          "TKM",
          "TUN",
          "TON",
          "TUR",
          "TTO",
          "TUV",
          "TWN",
          "TZA",
          "UKR",
          "UGA",
          "UMI",
          "USA",
          "URY",
          "UZB",
          "VAT",
          "VCT",
          "VEN",
          "VGB",
          "VIR",
          "VNM",
          "VUT",
          "WLF",
          "WSM",
          "XKX",
          "XXK",
          "YEM",
          "MYT",
          "YUCS",
          "ZAF",
          "ZMB",
          "ZRCD",
          "ZWE"
        ]
      },
      "ISO4217Currency": {
        "type": [
          "string"
        ],
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BOV",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHE",
          "CHF",
          "CHW",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "COU",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MRU",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MXV",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLE",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "STN",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "USN",
          "UYI",
          "UYU",
          "UYW",
          "UZS",
          "VED",
          "VEF",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XCD",
          "XDR",
          "XOF",
          "XPD",
          "XPF",
          "XPT",
          "XSU",
          "XTS",
          "XUA",
          "XXX",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ]
      },
      "ISO4217SupportedCurrency": {
        "type": [
          "string"
        ],
        "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Statement` to search for.",
        "enum": [
          "EUR",
          "GBP",
          "USD"
        ],
        "example": "EUR"
      },
      "MerchantCategory": {
        "type": [
          "string"
        ],
        "enum": [
          "Advertising",
          "Entertainment",
          "Utilities",
          "Food_Cocktail_Bar",
          "Food_Restaurant",
          "Food_Store",
          "Food_Wine",
          "Services_Business",
          "Services_Cleaning",
          "Services_Contracted",
          "Services_Delivery",
          "Services_Educational",
          "Services_Financial",
          "Services_Gambling",
          "Services_Government",
          "Services_Health",
          "Services_Insurance",
          "Services_Legal",
          "Services_Museum",
          "Services_Organisation",
          "Services_Personal",
          "Services_Repair",
          "Services_Social",
          "Services_Stationery",
          "Services_Telecommunication",
          "Services_Veterinary",
          "Services_Warehouse",
          "Services_Wholesale",
          "Shopping_Accessories",
          "Shopping_Airline",
          "Shopping_Art",
          "Shopping_Automotive",
          "Shopping_Beauty",
          "Shopping_Books",
          "Shopping_Clothes",
          "Shopping_Digital_Goods",
          "Shopping_Direct_Marketing",
          "Shopping_Furnitures",
          "Shopping_Sport",
          "Shopping_Store",
          "Shopping_Technology",
          "Transport_Airports",
          "Transport_Charging_Station",
          "Transport_Parking",
          "Transport_Public_Transportation",
          "Transport_Road",
          "Transport_Service_Station",
          "Transport_Ships",
          "Transport_Taxi",
          "Transport_Toll_Roads",
          "Transport_Trains",
          "Travel_Airlines",
          "Travel_Agency",
          "Travel_Car_Rental",
          "Travel_Hotels",
          "Travel_Time_Shares"
        ]
      },
      "Month": {
        "type": [
          "string"
        ],
        "enum": [
          "JANUARY",
          "FEBRUARY",
          "MARCH",
          "APRIL",
          "MAY",
          "JUNE",
          "JULY",
          "AUGUST",
          "SEPTEMBER",
          "OCTOBER",
          "NOVEMBER",
          "DECEMBER"
        ]
      },
      "OAuth2Token": {
        "properties": {
          "access_token": {
            "type": [
              "string"
            ],
            "description": "The bearer token to be included in all requests sent to our Business API as part of the `Authorization` header.",
            "example": "{{access_token}}"
          },
          "expires_in": {
            "type": [
              "string"
            ],
            "description": "The `access_token` expiration, expressed in seconds. Once the `access_token` is expired your session will be invalidate, you will have to re-authenticate to get a fresh `access_token`.",
            "example": 7200
          },
          "refresh_token": {
            "type": [
              "string"
            ],
            "description": "The token used to refresh the session (this operation is not currently supported).",
            "example": "{{refresh_token}}"
          },
          "token_type": {
            "type": [
              "string"
            ],
            "description": "All requests must be always authenticated using the 'Bearer' scheme.",
            "example": "Bearer"
          }
        }
      },
      "OnlineAds": {
        "properties": {
          "assignees": {
            "type": [
              "array"
            ],
            "description": "List of `User` IDs currently assigned to the `OnlineAds` and its `Cards`.",
            "items": {
              "example": "XMPL1234-000005"
            }
          },
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` reserved for this `OnlineAds` (only available after the `OnlineAds` has been activated).",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `OnlineAds` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A custom description of the `OnlineAds`.",
            "example": "This is an online advertisement"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `OnlineAds` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_spent": {
            "type": [
              "number"
            ],
            "description": "The amount of the last `Transaction` made with the `Card`.",
            "example": 75.01
          },
          "last_spent_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last `Transaction` made with the `Card`.",
            "example": "2020-05-07T12:48:40Z"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `OnlineAds` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `OnlineAds`.",
            "example": "EXAMPLE ONLINE AD"
          },
          "platform": {
            "$ref": "#/components/schemas/OnlineAdsPlatform",
            "description": "The platform the `OnlineAds` are made on.",
            "example": "OTHER"
          },
          "status": {
            "$ref": "#/components/schemas/OnlineAdsStatus",
            "description": "The status of the `OnlineAds`.",
            "example": "ACTIVE"
          },
          "total_spent": {
            "type": [
              "number"
            ],
            "description": "The overall amount spent with the `Card`.",
            "example": 775.01
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID the `OnlineAds` and its `Card` are linked to.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        }
      },
      "OnlineAdsList": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/OnlineAds"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "OnlineAdsPlatform": {
        "type": [
          "string"
        ],
        "enum": [
          "GOOGLE",
          "TWITTER",
          "TABOOLA",
          "PINTEREST",
          "MICROSOFT",
          "FACEBOOK",
          "FACEBOOK_ADS",
          "AMAZON",
          "APPLE",
          "TIKTOK",
          "LINKEDIN",
          "INSTAGRAM",
          "OTHER"
        ]
      },
      "OnlineAdsStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "ASSIGNED",
          "CANCELLED"
        ]
      },
      "Order": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Order` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "error_code": {
            "type": [
              "string"
            ],
            "description": "In case is_valid is false, the error code of the `Order` is shown."
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Order` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "is_valid": {
            "type": [
              "boolean"
            ],
            "description": "It states whether the `Order` is valid.",
            "example": true
          },
          "items": {
            "type": [
              "array"
            ],
            "description": "The products associated with the `Order`.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The last update date of the `Order`.",
            "example": "2017-06-01T12:48:40Z"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "description": "The status of the `Order`.",
            "example": "COMPLETED"
          },
          "total_paid_amount": {
            "type": [
              "number"
            ],
            "description": "The total amount of the `Order`.",
            "example": 10.25
          },
          "total_paid_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency for the total paid amount.",
            "example": "EUR"
          }
        }
      },
      "OrderItem": {
        "properties": {
          "category": {
            "type": [
              "string"
            ],
            "description": "The category of the ordered item."
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of a single item of a specific `Order`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "item_type": {
            "type": [
              "string"
            ],
            "description": "The type of the ordered item.",
            "example": "CARD"
          }
        }
      },
      "OrderStatus": {
        "type": [
          "string"
        ],
        "description": "The status of the `Order`.",
        "enum": [
          "PENDING",
          "ERROR",
          "PLACED",
          "CANCELLED",
          "COMPLETED",
          "COMPLETED_WITH_CREDIT"
        ],
        "example": "PENDING"
      },
      "Orders": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "OutOfOfficeDelegation": {
        "properties": {
          "delegate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the person covering for the delegator.",
            "example": "XMPL1234-000002"
          },
          "delegator_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the person assigning the `out_of_office`.",
            "example": "XMPL1234-000001"
          },
          "features": {
            "type": [
              "array"
            ],
            "description": "The features of `out_of_office`.",
            "items": {
              "$ref": "#/components/schemas/DelegationFeature"
            },
            "uniqueItems": true
          },
          "from_date": {
            "type": [
              "string"
            ],
            "format": "date",
            "description": "Defines when the out_of_office entry starts. fromDate included. (i.e. greater than or equal to) (Format:`yyyy-MM-dd`).",
            "example": "2025-03-05"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "A unique identifier for this `out_of_office` entry.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "status": {
            "$ref": "#/components/schemas/DelegationStatus",
            "description": "The work status of `out_of_office`.",
            "example": "ACTIVE"
          },
          "to_date": {
            "type": [
              "string"
            ],
            "format": "date",
            "description": "Defines when the out_of_office entry ends. toDate included. (i.e. less than) (Format:`yyyy-MM-dd`).",
            "example": "2025-03-07"
          }
        }
      },
      "OutOfOfficeDelegations": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/OutOfOfficeDelegation"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "PageableRequest": {
        "description": "Pagination."
      },
      "Payment": {
        "properties": {
          "fee_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the transaction fee in the currency of the Wallet (sortable: no)."
          },
          "fee_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the fee_amount (sortable: no).",
            "example": "EUR"
          },
          "status": {
            "type": [
              "string"
            ]
          },
          "trn_code": {
            "type": [
              "string"
            ],
            "description": "The transaction Reference Number."
          }
        }
      },
      "PaymentSchema": {
        "type": [
          "string"
        ],
        "enum": [
          "FPS",
          "SEPA",
          "SEPA_INSTANT"
        ]
      },
      "PrimaryUserType": {
        "type": [
          "string"
        ],
        "description": "The type of resource assigned to the `Wallet`.",
        "enum": [
          "main",
          "company",
          "employee",
          "dedicated"
        ],
        "example": "company"
      },
      "Purchase": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The maximum spendable amount of the `Purchase` (sortable: no).",
            "example": 10.25
          },
          "amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency of the `Purchase` ([ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code) (sortable: no).",
            "example": "EUR"
          },
          "assignee_custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference of the `User` assigned to the `Purchase` (sortable: no).",
            "example": "123456-user-1"
          },
          "assignee_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` assigned to the `Purchase` (sortable: no).",
            "example": "XMPL1234-000003"
          },
          "author_custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference of the `User` that created the purchase (sortable: no).",
            "example": "123456-user-2"
          },
          "author_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` that created the `Purchase` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` created by the `Purchase` (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Purchase` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Purchase` (sortable: no).",
            "example": "A purchase to approve"
          },
          "expiration_date": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Purchase` will expire (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "has_attachments": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Purchase` has one or more attachments (sortable: no).",
            "example": true
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Purchase` ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Purchase` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "max_tx_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The max number of the `Transactions` that can be made with the `Card`.",
            "example": 3
          },
          "notes": {
            "type": [
              "string"
            ],
            "description": "The notes of the `Purchase` (sortable: no).",
            "example": "Notes about the purchase request"
          },
          "status": {
            "$ref": "#/components/schemas/PurchaseStatus",
            "description": "The status of the `Purchase` (sortable: no).",
            "example": "ASSIGNED"
          },
          "title": {
            "type": [
              "string"
            ],
            "description": "The name of the `Purchase` (sortable: no).",
            "example": "Tech book"
          },
          "transactions": {
            "type": [
              "array"
            ],
            "description": "The `Transactions` originated by the `Purchase` (sortable: no).",
            "items": {
              "$ref": "#/components/schemas/PurchaseTransaction"
            }
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` the money are taken from, the funding source of the `Purchase` (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "wallet_name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet` the money are taken from, the funding source of the `Purchase` (sortable: no).",
            "example": "John Doe"
          }
        }
      },
      "PurchaseStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "SUCCESSFUL",
          "ACTIVE",
          "ASSIGNED",
          "DELETED",
          "EXPIRED",
          "REQUEST_EXTENSION"
        ]
      },
      "PurchaseTransaction": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The maximum spendable amount of the `Purchase` (sortable: no)",
            "example": 10.25
          },
          "amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency of the `Purchase` ([ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code) (sortable: no)",
            "example": "EUR"
          },
          "completed_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Purchase` was completed (sortable: no)",
            "example": "2017-06-01T12:48:40Z"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` ID (sortable: no)",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "transaction_category": {
            "type": [
              "string"
            ],
            "description": "The category of the `Transaction` (sortable: no)"
          }
        }
      },
      "Purchases": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Purchase"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "RecalculateExpenseReviewProcess": {
        "description": "Recalculate `ExpenseReviewProcess` JSON parameters.",
        "properties": {
          "transaction_ids": {
            "type": [
              "array"
            ],
            "description": "A list of transaction IDs for which the `ExpenseReviewProcess` they’re included into should be recalculated.",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "transaction_ids"
        ]
      },
      "Refueling": {
        "properties": {
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` used for the `Transaction` (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "dri": {
            "type": [
              "string"
            ],
            "description": "DRI (Documento Riepilogativo) code.",
            "example": "DRI00099881"
          },
          "invoice_date": {
            "type": [
              "string"
            ],
            "description": "Invoice date.",
            "example": "2017-06-01T12:48:40Z"
          },
          "invoice_id": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "Invoice ID.",
            "example": 4421109
          },
          "invoice_number": {
            "type": [
              "string"
            ],
            "description": "Invoice number.",
            "example": "NVC112200987"
          },
          "invoice_row": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "Row of the linked invoice.",
            "example": 4
          },
          "invoice_row_amount": {
            "type": [
              "number"
            ],
            "description": "Amount of the transaction's row in the linked invoice.",
            "example": 10.25
          },
          "invoice_total_amount": {
            "type": [
              "number"
            ],
            "description": "Total amount of the linked invoice.",
            "example": 10.25
          },
          "mileage": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The vehicle mileage.",
            "example": 125000
          },
          "plate": {
            "type": [
              "string"
            ],
            "description": "Vehicle's plate number.",
            "example": "AA000BB"
          },
          "public_id": {
            "type": [
              "string"
            ],
            "description": "The refueling ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "quantity": {
            "type": [
              "number"
            ],
            "description": "The fuel quantity as specified in the invoice.",
            "example": 80
          },
          "supplier_vat_id": {
            "type": [
              "string"
            ],
            "description": "Supplier VAT ID.",
            "example": "VT09138461"
          },
          "to_be_ignored": {
            "type": [
              "boolean"
            ],
            "description": "If the transaction link status is set to ignored.",
            "example": true
          },
          "transaction_id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` ID (sortable: yes).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "transaction_sign": {
            "$ref": "#/components/schemas/TransactionSign",
            "description": "The sign of the refueling `Transaction` amount (sortable: no).",
            "example": "Negative"
          },
          "tx_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the refueling `Transaction` in the currency of the merchant (sortable: no).",
            "example": 10.25
          },
          "tx_amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the `tx_amount` (sortable: no).",
            "example": "EUR"
          },
          "tx_country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The country of the refueling `Transaction`  (sortable: no).",
            "example": "GBR"
          },
          "tx_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the transaction at the `Authorised` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "tx_fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type as specified on the transaction.",
            "example": "PETROL"
          },
          "tx_settlement_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the transaction at the `Settled` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "tx_status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the refueling `Transaction` (sortable: yes)."
          },
          "tx_vat_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the VAT in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "tx_vat_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the `vat_amount` (sortable: no).",
            "example": "EUR"
          },
          "unit_price": {
            "type": [
              "number"
            ],
            "description": "The fuel unit price as specified on the transaction.",
            "example": 1.41
          },
          "update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last update to the refueling `Transaction` (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "vat_deductibility_percentage": {
            "type": [
              "string"
            ],
            "description": "The deductible VAT percentage configured for the vehicle.",
            "example": "40%"
          },
          "vehicle_fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "Fuel type specified in the Vehicle's configuration page.",
            "example": "PETROL"
          },
          "vehicle_id": {
            "type": [
              "string"
            ],
            "description": "Vehicle ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "RefuelingType": {
        "type": [
          "string"
        ],
        "description": "The resource `type` to be used together with publicId.",
        "enum": [
          "transaction",
          "vehicle",
          "card"
        ],
        "example": "card"
      },
      "Refuelings": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Refueling"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "RemoveAssignees": {
        "description": "Remove `Subscription` assignees JSON parameters.",
        "properties": {
          "remove_assignees": {
            "type": [
              "array"
            ],
            "description": "List of `User` IDs to remove from assignees.",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "required": [
          "remove_assignees"
        ]
      },
      "RequestExpenseInfo": {
        "properties": {
          "approver_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the SuperAdmin `User` who approves/rejects the expense.",
            "example": "XMPL1234-000003"
          },
          "message": {
            "type": [
              "string"
            ],
            "description": "The request info of the transaction expense review.",
            "example": "Request info to employee"
          }
        },
        "required": [
          "approver_id",
          "message"
        ]
      },
      "ResourceSet": {
        "properties": {
          "configuration": {
            "type": [
              "array"
            ],
            "description": "The configuration of the `ResourceSet`.",
            "items": {
              "$ref": "#/components/schemas/Configuration"
            }
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ResourceSet` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ResourceSet`.",
            "example": "This is a resource set"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `ResourceSet` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `ResourceSet` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ResourceSet`.",
            "example": "Resource set 01"
          }
        }
      },
      "ResourceSetResourceType": {
        "type": [
          "string"
        ],
        "enum": [
          "MAIN_WALLET",
          "COMPANY_WALLET",
          "USER",
          "COMPANY_CARD",
          "GROUP"
        ]
      },
      "ResourceSetScope": {
        "type": [
          "string"
        ],
        "enum": [
          "SELF",
          "LIST",
          "ALL",
          "NONE"
        ]
      },
      "Role": {
        "properties": {
          "category": {
            "type": [
              "string"
            ],
            "description": "The category of the `Role`.",
            "example": "The SuperAdmin role"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Role`.",
            "example": "The SuperAdmin role"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Role`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Role`.",
            "example": "superAdmin"
          },
          "scopes": {
            "type": [
              "array"
            ],
            "description": "The scopes of the `Role`.",
            "items": {
              "example": "ALL"
            }
          }
        }
      },
      "SearchPurchaseDateType": {
        "type": [
          "string"
        ],
        "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
        "enum": [
          "CREATION_TIME",
          "COMPLETED_TIME"
        ],
        "example": "COMPLETED_TIME"
      },
      "SearchTransactionCategory": {
        "type": [
          "string"
        ],
        "description": "It determines the filter by category of the transaction, multiple categories can be included.",
        "enum": [
          "Billing",
          "Chargeback",
          "Conversion",
          "Fee",
          "FeeReversal",
          "InboundFasterPayment",
          "InboundFasterPaymentReversal",
          "Load",
          "LoadReversal",
          "MileageReimbursement",
          "NotRecognized",
          "Payment",
          "Rebalance",
          "RecurringBilling",
          "Refund",
          "SoldoActivity",
          "SoldoCreditOperation",
          "SoldoDebitOperation",
          "Transfer",
          "Wiretransfer",
          "Withdrawal"
        ]
      },
      "SearchTransactionDateType": {
        "type": [
          "string"
        ],
        "default": "TRANSACTION",
        "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
        "enum": [
          "TRANSACTION",
          "SETTLEMENT",
          "UPDATE",
          "REVIEW_TIME"
        ],
        "example": "TRANSACTION"
      },
      "SearchTransactionPaymentMethod": {
        "type": [
          "string"
        ],
        "description": "It determines the filter by payment method of the transaction, multiple payment methods can be included. `OUT_OF_PLATFORM_COMPANY` and `OUT_OF_PLATFORM_PERSONAL` are not included by default.",
        "enum": [
          "USER",
          "COMPANY",
          "PURCHASE",
          "SUBSCRIPTION",
          "ONLINE_ADS",
          "OUT_OF_PLATFORM_COMPANY",
          "OUT_OF_PLATFORM_PERSONAL",
          "WIRETRANSFER"
        ]
      },
      "SearchTransactionRequiredInformation": {
        "type": [
          "string"
        ],
        "enum": [
          "COMPLETE",
          "NOT_COMPLETE"
        ]
      },
      "SearchTransactionResourceType": {
        "type": [
          "string"
        ],
        "description": "The resource `type` to be used together with publicId.",
        "enum": [
          "company",
          "employee",
          "wallet",
          "card",
          "subscription",
          "onlineAd",
          "purchase"
        ],
        "example": "card"
      },
      "SendExpensesReminder": {
        "description": "Send Expense reminder JSON parameters.",
        "properties": {
          "from_date": {
            "$ref": "#/components/schemas/DateParam",
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "to_date": {
            "$ref": "#/components/schemas/DateParam",
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z"
          }
        },
        "required": [
          "from_date",
          "request_timestamp",
          "to_date"
        ]
      },
      "SplitTag": {
        "properties": {
          "dictionary_id": {
            "type": [
              "string"
            ],
            "description": "The `dictionaryId` of the `Tag` of the `SplitTransaction`.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "tag_id": {
            "type": [
              "string"
            ],
            "description": "The `Tags` of the `SplitTransaction`.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        }
      },
      "SplitTransaction": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `SplitTransaction` line.",
            "example": 10.25
          },
          "expense_category_id": {
            "type": [
              "string"
            ],
            "description": "The expense category of the `SplitTransaction` line.",
            "example": "e0d9b9c2-4a13-4ad5-85a4-88882fa065bd"
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the expense of the `SplitTransaction` line.",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "tags": {
            "type": [
              "array"
            ],
            "description": "The IDs of the `Tag` and related `Dictionary` to be assigned to a `SplitTransaction` line.",
            "items": {
              "$ref": "#/components/schemas/SplitTag"
            }
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of VAT Rate of the `SplitTransaction` line.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` assigned to the `SplitTransaction` line.",
            "example": "XMPL1234-000003"
          }
        },
        "required": [
          "amount"
        ]
      },
      "Statement": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/ISO4217SupportedCurrency",
            "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Statement`.",
            "example": "EUR"
          },
          "file_types": {
            "type": [
              "array"
            ],
            "description": "The generated `Statement` file types.",
            "items": {
              "example": "PDF"
            }
          },
          "month": {
            "$ref": "#/components/schemas/Month",
            "description": "The reference month for `Statement`.",
            "example": "JANUARY"
          },
          "year": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The reference year for `Statement`.",
            "example": 2025
          }
        }
      },
      "StatementDownloadUrl": {
        "properties": {
          "presigned_url": {
            "type": [
              "string"
            ],
            "format": "uri",
            "description": "The presigned url where to download the `Statement`.",
            "example": "https://my-demo-bucket.s3.amazonaws.com/example.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20250416%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250416T083000Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
          }
        }
      },
      "StatementFileType": {
        "type": [
          "string"
        ],
        "enum": [
          "PDF",
          "XLSX",
          "CSV"
        ]
      },
      "Statements": {
        "properties": {
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Statement"
            }
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Subscription": {
        "properties": {
          "assignees": {
            "type": [
              "array"
            ],
            "description": "List of `User` ID currently assigned to the `Subscription` and its `Card`.",
            "items": {
              "example": "XMPL1234-000005"
            }
          },
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` reserved for this `Subscription` (only available after the subscription is activated).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Subscription` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A custom description of the `Subscription`.",
            "example": "This is a subscription"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Subscription` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_spent": {
            "type": [
              "number"
            ],
            "description": "The amount of the last `Transaction` made with the `Card`.",
            "example": 75.01
          },
          "last_spent_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last `Transaction` made with the `Card`.",
            "example": "2020-05-07T12:48:40Z"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Subscription` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Subscription`.",
            "example": "EXAMPLE SUBSCRIPTION."
          },
          "payment_frequency": {
            "$ref": "#/components/schemas/SubscriptionPaymentFrequency",
            "description": "The payment frequency indicates how often a `Transaction` is expected to be made.",
            "example": "YEARLY"
          },
          "platform": {
            "$ref": "#/components/schemas/SubscriptionPlatform",
            "description": "The platform the `Subscription` is made on.",
            "example": "OTHER"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus",
            "description": "The status of the `Subscription`.",
            "example": "ACTIVE"
          },
          "total_spent": {
            "type": [
              "number"
            ],
            "description": "The overall amount spent with the `Card`.",
            "example": 775.01
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` the `Subscription` and its `Card` are linked to.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "SubscriptionPaymentFrequency": {
        "type": [
          "string"
        ],
        "enum": [
          "OTHER",
          "YEARLY",
          "WEEKLY",
          "QUARTERLY",
          "MONTHLY",
          "BI_MONTHLY"
        ]
      },
      "SubscriptionPlatform": {
        "type": [
          "string"
        ],
        "enum": [
          "ADOBE",
          "AMAZON",
          "APPLE",
          "ATLASSIAN",
          "FACEBOOK",
          "FIGMA",
          "GITHUB",
          "GOOGLE",
          "HUBSPOT",
          "LINKEDIN",
          "MICROSOFT",
          "NOTION",
          "OTHER",
          "PINTEREST",
          "SALESFORCE",
          "TWITTER",
          "XERO",
          "ZOOM"
        ]
      },
      "SubscriptionStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "ASSIGNED",
          "CANCELLED"
        ]
      },
      "Subscriptions": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Tag": {
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "deprecated": true,
            "description": "The code (Internal property managed by Soldo only) (sortable: no). Deprecated, only for backward compatibility."
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Tag` (sortable: no).",
            "example": "Label to mark transactions"
          },
          "dictionary": {
            "type": [
              "string"
            ],
            "description": "The name of the `List` where the `Tag` is listed (sortable: no).",
            "example": "ExampleTagDictionary"
          },
          "dictionary_id": {
            "type": [
              "string"
            ],
            "description": "The `List` ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Tag` ID (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "percentage": {
            "type": [
              "number"
            ],
            "format": "double",
            "deprecated": true,
            "description": "Percentage value: valid for TAX_RATE type only (sortable: no). Deprecated, only for backward compatibility."
          },
          "tag": {
            "type": [
              "string"
            ],
            "description": "The name of the `Tag` (sortable: yes).",
            "example": "tx-label"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Tag` is visible in the `Transaction` detail (sortable: yes).",
            "example": true
          }
        }
      },
      "TagDictionaries": {
        "properties": {
          "dictionaries": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/TagDictionary"
            }
          }
        }
      },
      "TagDictionary": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `List` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "dictionary": {
            "type": [
              "string"
            ],
            "description": "The name of the `List`.",
            "example": "ExampleTagDictionary"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `List`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "is_unique_select_tag": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether multiple tags of the `List` can be selected.",
            "example": false
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `List` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `List` is active.",
            "example": true
          }
        }
      },
      "Tags": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Transaction": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the amount (sortable: no).",
            "example": "EUR"
          },
          "auth_exchange_rate": {
            "type": [
              "number"
            ],
            "description": "The exchange rate applied at the `Authorised` status (sortable: no).",
            "example": 1
          },
          "carbon_emissions": {
            "$ref": "#/components/schemas/TransactionCarbonEmissionInfo",
            "description": "The amount of CO2e emissions generated as a result of the `Transaction`."
          },
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` used for the `Transaction` (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "category": {
            "$ref": "#/components/schemas/TransactionCategory",
            "description": "The category of the `Transaction` (sortable: yes).",
            "example": "Payment"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference ID of the Cardholder who made the `Transaction` (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "123456-user-1"
          },
          "date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the `Transaction` at the `Authorised` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "details": {
            "$ref": "#/components/schemas/TransactionDetails",
            "description": "The details of the `Transaction`  (sortable: no)."
          },
          "direct_url": {
            "type": [
              "string"
            ],
            "description": "The direct URL to the transaction details page (sortable: no)."
          },
          "exchange_rate": {
            "type": [
              "number"
            ],
            "description": "The exchange rate applied at the `Settled` status (sortable: no).",
            "example": 1
          },
          "expense_approved_amount": {
            "type": [
              "number"
            ],
            "description": "The expense amount that a reviewer has approved (sortable: no).",
            "example": 10.25
          },
          "expense_category": {
            "$ref": "#/components/schemas/ExpenseCategory",
            "description": "The `ExpenseCategory` assigned to the `Transaction`."
          },
          "expense_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last review of the `Expense` (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "expense_last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Expense` was last updated (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "expense_report_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseReport` the `Transaction` is included into (sortable: no).",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "expense_reviewer": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` who reviewed the `Expense` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "expense_status": {
            "$ref": "#/components/schemas/ExpenseStatus",
            "description": "The status of approval of the `Expense` (sortable: no).",
            "example": "APPROVED"
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the `Expense` (sortable: no).",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "fee_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` fee in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "fee_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the fee_amount (sortable: no).",
            "example": "EUR"
          },
          "flags": {
            "type": [
              "array"
            ],
            "description": "List of strings: `forUser`, `forAdmin` or empty. It determines for which kinds of `Users` the transaction is flagged to (sortable: no).",
            "items": {
              "example": "forUser"
            }
          },
          "fuel_details": {
            "$ref": "#/components/schemas/TransactionFuelDetails",
            "description": "The fuel details of the `Transaction`  (sortable: no)."
          },
          "group_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Group` the `Transaction` belongs to (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "has_attachments": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the transaction has one or more `TransactionAttachments` (sortable: no).",
            "example": false
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` ID (sortable: yes).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "masked_pan": {
            "type": [
              "string"
            ],
            "description": "The masked PAN of the `Card` used for the `Transaction` (sortable: yes).",
            "example": "123456******1234"
          },
          "merchant": {
            "$ref": "#/components/schemas/TransactionMerchant",
            "description": "The name of the Merchant of the transaction (only valid for `Payment`, `Withdrawal`, `Refund` transaction categories) (sortable: no)."
          },
          "merchant_category": {
            "$ref": "#/components/schemas/TransactionMerchantCategory",
            "description": "The category of the `Merchant` of the `Transaction` (only valid for `Payment`, `Withdrawal`, `Refund` transaction categories) (sortable: no)."
          },
          "metadata_ids": {
            "type": [
              "array"
            ],
            "description": "A list of IDs related to custom generated `Metadata` of the `Transaction` (sortable: no).",
            "items": {
              "example": "express"
            }
          },
          "notes": {
            "type": [
              "string"
            ],
            "description": "The notes defined by Soldo (sortable: no)."
          },
          "owner_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the Cardholder who made the `Transaction` (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "XMPL1234-000003"
          },
          "owner_name": {
            "type": [
              "string"
            ],
            "description": "The name of the cardholder who made the transaction (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "John"
          },
          "owner_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the cardholder who made the transaction (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "Smith"
          },
          "owner_type": {
            "$ref": "#/components/schemas/TransactionOwnerType",
            "description": "The owner type (`company`, `employee`) (sortable: no).",
            "example": "company"
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod",
            "description": "The payment method of the `Transaction`.",
            "example": "ONLINE_ADS"
          },
          "payment_method_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the payment method, could be the ID of a `Subscription`, `OnlineAds` or `Purchase` resource (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "payment_trn_code": {
            "type": [
              "string"
            ],
            "description": "The Transaction Reference Number (TRN) of the outbound payment generated by Soldo. Available for `SEPA`, `SEPA_INSTANT`.",
            "example": "1234567890123456789012345678IT"
          },
          "purchase_id": {
            "type": [
              "string"
            ],
            "description": "The `Purchase` ID (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "reimbursement_expense_report_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the ExpenseReport that was reimbursed by this payment. Note to developer: if this ID is not null this payment is can be considered a reimbursement. (sortable: no)."
          },
          "required_information": {
            "$ref": "#/components/schemas/SearchTransactionRequiredInformation",
            "description": "It indicates whether a transaction has (or doesn’t have) all details marked as mandatory in the ‘Reminders’ section filled in.",
            "example": "COMPLETE"
          },
          "settlement_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the `Transaction` at the `Settled` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "split": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the transaction has been split (sortable: no).",
            "example": false
          },
          "split_transactions": {
            "type": [
              "array"
            ],
            "description": "The list of `SplitTransactionInfo`.",
            "items": {
              "$ref": "#/components/schemas/TransactionSplitInfo"
            }
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the `Transaction` (sortable: yes).",
            "example": "Settled"
          },
          "tags": {
            "type": [
              "array"
            ],
            "description": "The list of the `Tags` of the `Transaction`.",
            "items": {
              "$ref": "#/components/schemas/TransactionTag"
            }
          },
          "tax_rate": {
            "$ref": "#/components/schemas/VatRate",
            "description": "The `Transaction`'s `VatRate`."
          },
          "timeline": {
            "type": [
              "array"
            ],
            "description": "The timeline of changes affecting the `Transaction` and the related `Wallet`. For each occurrence, the `Wallet` balance is reported before and after the change.",
            "items": {
              "$ref": "#/components/schemas/TransactionTimelineItem"
            }
          },
          "transaction_sign": {
            "$ref": "#/components/schemas/TransactionSign",
            "description": "The sign of the transaction amount (Negative, Positive, None) (sortable: no).",
            "example": "Negative"
          },
          "trx_owner_id": {
            "type": [
              "string"
            ],
            "description": "For User `Card` transactions, when `owner_type` is `employee`, is the cardholder ID, for Company `Card`, when `owner_type` is `company`, is empty or one of the `Card` assignees (sortable: no).",
            "example": "XMPL1234-000003"
          },
          "tx_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` in the currency of the `Merchant` (sortable: no).",
            "example": 10.25
          },
          "tx_amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the `tx_amount` (sortable: no).",
            "example": "EUR"
          },
          "tx_id": {
            "type": [
              "string"
            ],
            "description": "The transaction's internal id (the same ID that can be found on reports and the advanced details section of a `Transaction`).",
            "example": "5-857211147-150603333585014265"
          },
          "update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last update to the `Transaction` (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "user_notes": {
            "type": [
              "string"
            ],
            "description": "The notes defined by the `User` (sortable: no)."
          },
          "vat_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the VAT in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "vat_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the vat_amount (sortable: no).",
            "example": "EUR"
          },
          "vat_percentage": {
            "type": [
              "number"
            ],
            "description": "The VAT percentage applied (sortable: no).",
            "example": 15
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` from where the `Transaction` has been authorised (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "wallet_name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet` from where the `Transaction` has been authorised (sortable: no).",
            "example": "John Doe"
          }
        }
      },
      "TransactionAmount": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` line.",
            "example": 10.25
          },
          "currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the amount.",
            "example": "EUR"
          }
        }
      },
      "TransactionAttachment": {
        "properties": {
          "attachment_id": {
            "type": [
              "string"
            ],
            "description": "The `TransactionAttachment` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "attachment_type": {
            "$ref": "#/components/schemas/TransactionAttachmentType",
            "description": "The type of attachment.",
            "example": "INVOICE"
          },
          "attachment_user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` that uploaded the attachment."
          },
          "compressed_file": {
            "$ref": "#/components/schemas/TransactionAttachmentCompressedFile",
            "description": "The Compressed version of the attachment, Soldo automatically generates a compressedversion of any image type (e.g. `JPG`, `JPEG`, `PNG`) attachment having a size greater than `2.5MB`."
          },
          "content_type": {
            "type": [
              "string"
            ],
            "description": "The type of the `TransactionAttachment` content (default: 'binary/octet-stream').",
            "example": "binary/octet-stream"
          },
          "file_extension": {
            "type": [
              "string"
            ],
            "description": "The file extension of the attachment.",
            "example": ".jpg"
          },
          "file_name": {
            "type": [
              "string"
            ],
            "description": "The file name of the attachment.",
            "example": "invoice01.jpg"
          },
          "file_size": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The file size in bytes.",
            "example": 32768
          },
          "file_url": {
            "type": [
              "string"
            ],
            "deprecated": true,
            "description": "The Base64 string of the File URL encrypted by DES in ECB mode, Pkcs7 padding scheme and using Token for key. Deprecated, use `url` instead."
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `TransactionAttachment` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "metadata": {
            "type": [
              "object"
            ],
            "additionalProperties": {
              "type": [
                "string"
              ]
            },
            "description": "The metadata of the attachment."
          },
          "read_only": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the attachment can be removed or updated."
          },
          "transaction_id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` ID the file is attached to.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "upload_time": {
            "type": [
              "string"
            ],
            "description": "The date of upload.",
            "example": "2017-06-01T12:48:40Z"
          },
          "upload_user_channel": {
            "$ref": "#/components/schemas/UploadUserChannel",
            "description": "The channel used to upload the attachment )."
          },
          "url": {
            "type": [
              "string"
            ],
            "description": "The URL of the attachment."
          },
          "url_type": {
            "$ref": "#/components/schemas/UrlType",
            "description": "The URL type (DOWNLOAD_URL to download the attachment; UPLOAD_URL to upload the attachment).",
            "example": "DOWNLOAD_URL"
          }
        }
      },
      "TransactionAttachmentCompressedFile": {
        "properties": {
          "file_extension": {
            "type": [
              "string"
            ],
            "description": "The file extension of the compressed attachment.",
            "example": ".jpg"
          },
          "file_name": {
            "type": [
              "string"
            ],
            "description": "The file name of the compressed attachment.",
            "example": "invoice01_thumb.jpg"
          },
          "file_size": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The file size of the compressed attachment in bytes.",
            "example": 32768
          },
          "file_url": {
            "type": [
              "string"
            ],
            "deprecated": true,
            "description": "The Base64 string of the Compressed File URL encrypted by DES in ECB mode, Pkcs7 padding scheme and using Token for key. Deprecated, use `url` instead."
          },
          "url": {
            "type": [
              "string"
            ],
            "description": "The fileUrl  of the compressed attachment."
          },
          "url_type": {
            "$ref": "#/components/schemas/UrlType",
            "description": "The URL type (DOWNLOAD_URL to download the attachment; UPLOAD_URL to upload the attachment).",
            "example": "DOWNLOAD_URL"
          }
        }
      },
      "TransactionAttachmentType": {
        "type": [
          "string"
        ],
        "enum": [
          "RECEIPT",
          "INVOICE",
          "MAIL",
          "OTHER",
          "PURCHASE_REQUEST",
          "POP_AUTH",
          "POP_SETTLEMENT"
        ]
      },
      "TransactionAttachments": {
        "properties": {
          "attachments": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/TransactionAttachment"
            }
          }
        }
      },
      "TransactionCarbonEmissionInfo": {
        "properties": {
          "unit": {
            "type": [
              "string"
            ],
            "description": "The unit of measure related to the `value` of greenhouses gas emissions generated."
          },
          "value": {
            "type": [
              "number"
            ],
            "description": "The amount of greenhouses gas emissions generated."
          }
        }
      },
      "TransactionCategory": {
        "type": [
          "string"
        ],
        "enum": [
          "Billing",
          "Chargeback",
          "Conversion",
          "Fee",
          "FeeReversal",
          "InboundFasterPayment",
          "InboundFasterPaymentReversal",
          "Load",
          "LoadReversal",
          "MileageReimbursement",
          "NotRecognized",
          "P2P",
          "Payment",
          "Rebalance",
          "RecurringBilling",
          "Refund",
          "SoldoActivity",
          "SoldoCreditOperation",
          "SoldoDebitOperation",
          "Transfer",
          "Wiretransfer",
          "Withdrawal"
        ]
      },
      "TransactionDateType": {
        "type": [
          "string"
        ],
        "default": "TRANSACTION",
        "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
        "enum": [
          "TRANSACTION",
          "SETTLEMENT",
          "UPDATE"
        ],
        "example": "TRANSACTION"
      },
      "TransactionDetails": {
        "properties": {
          "de022": {
            "type": [
              "string"
            ],
            "description": "Mastercard `DE022` field."
          },
          "de061": {
            "type": [
              "string"
            ],
            "description": "Mastercard `DE061` field."
          },
          "denied_info_description": {
            "type": [
              "string"
            ],
            "description": "The description of the denied reason (only if the `Transaction` is `Declined`)."
          },
          "denied_info_type": {
            "type": [
              "string"
            ],
            "description": "The type of the denied reason of the transaction (only if the `Transaction` is `Declined`)."
          },
          "is_atm_transaction": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the transaction is an ATM withdrawal.",
            "example": false
          },
          "is_card_present": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card was there at the moment of the `Transaction`.",
            "example": false
          },
          "tx_country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The country code where the `Transaction` has been authorised.",
            "example": "GBR"
          }
        }
      },
      "TransactionFuelDetails": {
        "description": "The transaction fuel details `Refueling` resource",
        "properties": {
          "dri": {
            "type": [
              "string"
            ],
            "description": "The DRI (Documento Riepilogativo) code.",
            "example": "DRI00099881"
          },
          "invoice_date": {
            "type": [
              "string"
            ],
            "description": "Invoice date.",
            "example": "2017-06-01T12:48:40Z"
          },
          "invoice_id": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "Invoice ID.",
            "example": 4421109
          },
          "invoice_number": {
            "type": [
              "string"
            ],
            "description": "Invoice number.",
            "example": "NVC112200987"
          },
          "invoice_row": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "Row of the linked invoice.",
            "example": 4
          },
          "invoice_row_amount": {
            "type": [
              "number"
            ],
            "description": "Amount of the transaction's row in the linked invoice.",
            "example": 10.25
          },
          "invoice_total_amount": {
            "type": [
              "number"
            ],
            "description": "Total amount of the linked invoice.",
            "example": 10.25
          },
          "mileage": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The `Vehicle` mileage.",
            "example": 125000
          },
          "plate": {
            "type": [
              "string"
            ],
            "description": "`Vehicle`'s plate number.",
            "example": "AA000BB"
          },
          "quantity": {
            "type": [
              "number"
            ],
            "description": "The fuel quantity as specified in the invoice.",
            "example": 80
          },
          "supplier_vat_id": {
            "type": [
              "string"
            ],
            "description": "Supplier VAT ID.",
            "example": 98746784967
          },
          "to_be_ignored": {
            "type": [
              "boolean"
            ],
            "description": "If the transaction link status is set to ignored.",
            "example": false
          },
          "tx_fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type as specified on the transaction.",
            "example": "PETROL"
          },
          "unit_price": {
            "type": [
              "number"
            ],
            "description": "The fuel unit price as specified on the transaction.",
            "example": 1.41
          },
          "vat_deductibility_percentage": {
            "type": [
              "string"
            ],
            "description": "The deductible VAT percentage configured for the `Vehicle`.",
            "example": "40%"
          },
          "vehicle_fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "Fuel type specified in the `Vehicle`'s configuration page.",
            "example": "PETROL"
          },
          "vehicle_id": {
            "type": [
              "string"
            ],
            "description": "The `Vehicle` ID.",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          }
        }
      },
      "TransactionItem": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the amount (sortable: no).",
            "example": "EUR"
          },
          "auth_exchange_rate": {
            "type": [
              "number"
            ],
            "description": "The exchange rate applied at the `Authorised` status (sortable: no).",
            "example": 1
          },
          "carbon_emissions": {
            "$ref": "#/components/schemas/TransactionCarbonEmissionInfo",
            "description": "The amount of CO2e emissions generated as a result of the `Transaction`."
          },
          "card_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Card` used for the `Transaction` (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "category": {
            "$ref": "#/components/schemas/TransactionCategory",
            "description": "The category of the `Transaction` (sortable: yes).",
            "example": "Payment"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference ID of the Cardholder who made the `Transaction` (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "123456-user-1"
          },
          "date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the `Transaction` at the `Authorised` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "details": {
            "$ref": "#/components/schemas/TransactionDetails",
            "description": "The details of the `Transaction`  (sortable: no)."
          },
          "direct_url": {
            "type": [
              "string"
            ],
            "description": "The direct URL to the transaction details page (sortable: no)."
          },
          "exchange_rate": {
            "type": [
              "number"
            ],
            "description": "The exchange rate applied at the `Settled` status (sortable: no).",
            "example": 1
          },
          "expense_approved_amount": {
            "type": [
              "number"
            ],
            "description": "The expense amount that a reviewer has approved (sortable: no).",
            "example": 10.25
          },
          "expense_category": {
            "$ref": "#/components/schemas/ExpenseCategory",
            "description": "The `ExpenseCategory` assigned to the `Transaction`."
          },
          "expense_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last review of the `Expense` (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "expense_last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Expense` was last updated (sortable: no).",
            "example": "2017-06-01T12:48:40Z"
          },
          "expense_report_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseReport` the `Transaction` is included into (sortable: no).",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
          },
          "expense_reviewer": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` who reviewed the `Expense` (sortable: no).",
            "example": "XMPL1234-000001"
          },
          "expense_status": {
            "$ref": "#/components/schemas/ExpenseStatus",
            "description": "The status of approval of the `Expense` (sortable: no).",
            "example": "APPROVED"
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the `Expense` (sortable: no).",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "fee_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` fee in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "fee_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the fee_amount (sortable: no).",
            "example": "EUR"
          },
          "flags": {
            "type": [
              "array"
            ],
            "description": "List of strings: `forUser`, `forAdmin` or empty. It determines for which kinds of `Users` the transaction is flagged to (sortable: no).",
            "items": {
              "example": "forUser"
            }
          },
          "fuel_details": {
            "$ref": "#/components/schemas/TransactionFuelDetails",
            "description": "The fuel details of the `Transaction`  (sortable: no)."
          },
          "group_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Group` the `Transaction` belongs to (sortable: no).",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "has_attachments": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the transaction has one or more `TransactionAttachments` (sortable: no).",
            "example": false
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` ID (sortable: yes).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "masked_pan": {
            "type": [
              "string"
            ],
            "description": "The masked PAN of the `Card` used for the `Transaction` (sortable: yes).",
            "example": "123456******1234"
          },
          "merchant": {
            "$ref": "#/components/schemas/TransactionMerchant",
            "description": "The name of the Merchant of the transaction (only valid for `Payment`, `Withdrawal`, `Refund` transaction categories) (sortable: no)."
          },
          "merchant_category": {
            "$ref": "#/components/schemas/TransactionMerchantCategory",
            "description": "The category of the `Merchant` of the `Transaction` (only valid for `Payment`, `Withdrawal`, `Refund` transaction categories) (sortable: no)."
          },
          "metadata_ids": {
            "type": [
              "array"
            ],
            "description": "A list of IDs related to custom generated `Metadata` of the `Transaction` (sortable: no).",
            "items": {
              "example": "express"
            }
          },
          "notes": {
            "type": [
              "string"
            ],
            "description": "The notes defined by Soldo (sortable: no)."
          },
          "owner_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the Cardholder who made the `Transaction` (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "XMPL1234-000003"
          },
          "owner_name": {
            "type": [
              "string"
            ],
            "description": "The name of the cardholder who made the transaction (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "John"
          },
          "owner_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the cardholder who made the transaction (only available when `owner_type` is `employee`) (sortable: no).",
            "example": "Smith"
          },
          "owner_type": {
            "$ref": "#/components/schemas/TransactionOwnerType",
            "description": "The owner type (`company`, `employee`) (sortable: no).",
            "example": "company"
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod",
            "description": "The payment method of the `Transaction`.",
            "example": "ONLINE_ADS"
          },
          "payment_method_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the payment method, could be the ID of a `Subscription`, `OnlineAds` or `Purchase` resource (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "payment_trn_code": {
            "type": [
              "string"
            ],
            "description": "The Transaction Reference Number (TRN) of the outbound payment generated by Soldo. Available for `SEPA`, `SEPA_INSTANT`.",
            "example": "1234567890123456789012345678IT"
          },
          "purchase_id": {
            "type": [
              "string"
            ],
            "description": "The `Purchase` ID (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "reimbursement_expense_report_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the ExpenseReport that was reimbursed by this payment. Note to developer: if this ID is not null this payment is can be considered a reimbursement. (sortable: no)."
          },
          "required_information": {
            "$ref": "#/components/schemas/SearchTransactionRequiredInformation",
            "description": "It indicates whether a transaction has (or doesn’t have) all details marked as mandatory in the ‘Reminders’ section filled in.",
            "example": "COMPLETE"
          },
          "settlement_date": {
            "type": [
              "string"
            ],
            "description": "The date and time of the `Transaction` at the `Settled` status (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "split": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the transaction has been split (sortable: no).",
            "example": false
          },
          "split_transactions": {
            "type": [
              "array"
            ],
            "description": "The list of `SplitTransactionInfo`.",
            "items": {
              "$ref": "#/components/schemas/TransactionItemSplitInfo"
            }
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "The status of the `Transaction` (sortable: yes).",
            "example": "Settled"
          },
          "tags": {
            "type": [
              "array"
            ],
            "description": "The list of the `Tags` of the `Transaction`.",
            "items": {
              "$ref": "#/components/schemas/TransactionTag"
            }
          },
          "tax_rate": {
            "$ref": "#/components/schemas/VatRate",
            "description": "The `Transaction`'s `VatRate`."
          },
          "transaction_sign": {
            "$ref": "#/components/schemas/TransactionSign",
            "description": "The sign of the transaction amount (Negative, Positive, None) (sortable: no).",
            "example": "Negative"
          },
          "trx_owner_id": {
            "type": [
              "string"
            ],
            "description": "For User `Card` transactions, when `owner_type` is `employee`, is the cardholder ID, for Company `Card`, when `owner_type` is `company`, is empty or one of the `Card` assignees (sortable: no).",
            "example": "XMPL1234-000003"
          },
          "tx_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the `Transaction` in the currency of the `Merchant` (sortable: no).",
            "example": 10.25
          },
          "tx_amount_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the `tx_amount` (sortable: no).",
            "example": "EUR"
          },
          "tx_id": {
            "type": [
              "string"
            ],
            "description": "The transaction's internal id (the same ID that can be found on reports and the advanced details section of a `Transaction`).",
            "example": "5-857211147-150603333585014265"
          },
          "update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time of the last update to the `Transaction` (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "user_notes": {
            "type": [
              "string"
            ],
            "description": "The notes defined by the `User` (sortable: no)."
          },
          "vat_amount": {
            "type": [
              "number"
            ],
            "description": "The amount of the VAT in the currency of the `Wallet` (sortable: no).",
            "example": 10.25
          },
          "vat_currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the vat_amount (sortable: no).",
            "example": "EUR"
          },
          "vat_percentage": {
            "type": [
              "number"
            ],
            "description": "The VAT percentage applied (sortable: no).",
            "example": 15
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` from where the `Transaction` has been authorised (sortable: no).",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "wallet_name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet` from where the `Transaction` has been authorised (sortable: no).",
            "example": "John Doe"
          }
        }
      },
      "TransactionItemSplitInfo": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/TransactionAmount",
            "description": "The `TransactionList`'s line amount."
          },
          "employee": {
            "$ref": "#/components/schemas/EntityIdDTO",
            "description": "The `User` which the transaction line is assigned to."
          },
          "expense_category": {
            "$ref": "#/components/schemas/EntityIdDTO",
            "description": "The `ExpenseCategory`."
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the expense.",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "line_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The `Transaction`'s line number.",
            "example": 1
          },
          "tax_rate": {
            "$ref": "#/components/schemas/EntityIdDTO",
            "description": "The `VATRate`."
          },
          "vat_amount": {
            "$ref": "#/components/schemas/TransactionAmount",
            "description": "The `TransactionList`'s line VAT amount."
          }
        }
      },
      "TransactionMerchant": {
        "properties": {
          "address": {
            "type": [
              "string"
            ],
            "description": "The `Merchant` address."
          },
          "code": {
            "type": [
              "string"
            ],
            "description": "The Mastercard `Merchant` code."
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Merchant`.",
            "example": 2100846839
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Merchant` (normalised).",
            "example": "SHH HOTEL LONDON"
          },
          "raw_name": {
            "type": [
              "string"
            ],
            "description": "The raw name of the `Merchant`.",
            "example": "SHERLOCK HOLMES HOTEL  LONDON        GBR"
          }
        }
      },
      "TransactionMerchantCategory": {
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "deprecated": true,
            "description": "The merchant category code as defined in the Soldo platform. *Deprecated*: use `description` instead.",
            "example": "Lodging - Hotels, Motels, Resorts - not elsewhere classified"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The merchant category description as defined in the Soldo platform.",
            "example": "Travel"
          },
          "mcc": {
            "type": [
              "string"
            ],
            "description": "The official Mastercard Merchant Category Code (MCC).",
            "example": 7011
          },
          "mcc_description": {
            "type": [
              "string"
            ],
            "description": "The official Mastercard Merchant category description.",
            "example": "Lodging - Hotels, Motels, Resorts - not elsewhere classified"
          },
          "sub_category": {
            "type": [
              "string"
            ],
            "description": "The merchant sub-category as defined in the Soldo platform.",
            "example": "Hotels"
          }
        }
      },
      "TransactionMetadata": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the metadata was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID related to the custom generated Metadata of the `Transaction`."
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the metadata was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "metadata": {
            "type": [
              "object"
            ],
            "additionalProperties": {},
            "description": "A generic JSON."
          }
        }
      },
      "TransactionMetadataList": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/TransactionMetadata"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "TransactionOwnerType": {
        "type": [
          "string"
        ],
        "enum": [
          "employee",
          "company"
        ]
      },
      "TransactionPaymentMethod": {
        "type": [
          "string"
        ],
        "enum": [
          "USER",
          "COMPANY",
          "PURCHASE",
          "SUBSCRIPTION",
          "ONLINE_ADS",
          "OUT_OF_PLATFORM_COMPANY",
          "OUT_OF_PLATFORM_PERSONAL",
          "WIRETRANSFER"
        ]
      },
      "TransactionSign": {
        "type": [
          "string"
        ],
        "enum": [
          "Negative",
          "Positive",
          "None"
        ]
      },
      "TransactionSplitInfo": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/TransactionAmount",
            "description": "The `Transaction`'s line amount."
          },
          "employee": {
            "$ref": "#/components/schemas/User",
            "description": "The `User` which the transaction line is assigned to."
          },
          "expense_category": {
            "$ref": "#/components/schemas/ExpenseCategory",
            "description": "The `ExpenseCategory` object."
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the expense.",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          },
          "line_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The `Transaction`'s line number.",
            "example": 1
          },
          "tags": {
            "type": [
              "array"
            ],
            "description": "The list of the Tags of the Transaction (only returned from [Get Transaction](https://developer.soldo.com/reference/transaction-get)).",
            "items": {
              "$ref": "#/components/schemas/TransactionSplitInfoTag"
            }
          },
          "tax_rate": {
            "$ref": "#/components/schemas/VatRate",
            "description": "The `VATRate` object."
          },
          "vat_amount": {
            "$ref": "#/components/schemas/TransactionAmount",
            "description": "The `Transaction`'s line VAT amount."
          }
        }
      },
      "TransactionSplitInfoTag": {
        "properties": {
          "dictionary": {
            "type": [
              "string"
            ],
            "description": "The name of the `List` where the `Tag` is listed.",
            "example": "ExampleTagDictionary"
          },
          "dictionary_id": {
            "type": [
              "string"
            ],
            "description": "The `List` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Tag` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "tag": {
            "type": [
              "string"
            ],
            "description": "The name of the `Tag`.",
            "example": "tx-label"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Tag` is visible in the `Transaction` detail.",
            "example": true
          }
        }
      },
      "TransactionStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "Authorised",
          "Settled",
          "Cancelled",
          "Declined",
          "DisputeFailed",
          "DisputeOpened",
          "DisputeWon",
          "Moved",
          "Unknown"
        ]
      },
      "TransactionTag": {
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Tag`.",
            "example": "Label to mark transactions"
          },
          "dictionary": {
            "type": [
              "string"
            ],
            "description": "The name of the `List` where the `Tag` is listed.",
            "example": "ExampleTagDictionary"
          },
          "dictionary_id": {
            "type": [
              "string"
            ],
            "description": "The `List` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Tag` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          },
          "tag": {
            "type": [
              "string"
            ],
            "description": "The name of the `Tag`.",
            "example": "tx-label"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Tag` is visible in the `Transaction` detail.",
            "example": true
          }
        }
      },
      "TransactionTimelineBalance": {
        "properties": {
          "available_amount": {
            "type": [
              "number"
            ],
            "description": "The `Wallet` available amount in the currency of the `Wallet`.",
            "example": 10.25
          },
          "ledger_amount": {
            "type": [
              "number"
            ],
            "description": "The `Wallet` ledger amount in the currency of the `Wallet`. This is a shorthand for the sum of available and pending amounts.",
            "example": 10.25
          },
          "pending_amount": {
            "type": [
              "number"
            ],
            "description": "The `Wallet` pending amount in the currency of the `Wallet`. This is also known as `blocked` amount.",
            "example": 10.25
          }
        }
      },
      "TransactionTimelineItem": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The amount related to the change in the currency of the `Wallet`.",
            "example": 10.25
          },
          "balance_after": {
            "$ref": "#/components/schemas/TransactionTimelineBalance",
            "description": "The `Wallet` balance after the change took place.",
            "example": 10.25
          },
          "balance_before": {
            "$ref": "#/components/schemas/TransactionTimelineBalance",
            "description": "The `Wallet` balance before the change took place.",
            "example": 10.25
          },
          "created_at": {
            "type": [
              "string"
            ],
            "description": "The instant the change happened to the `Transaction` and related `Wallet`.",
            "example": "2017-06-01T12:48:40Z"
          },
          "is_fee": {
            "type": [
              "boolean"
            ],
            "description": "Indicate whether the change is a fee.",
            "example": true
          },
          "status": {
            "$ref": "#/components/schemas/TransactionTimelineStatus",
            "description": "What happened in that moment to the `Transaction` and to the related `Wallet`.",
            "example": "Settled"
          }
        }
      },
      "TransactionTimelineStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "Unspecified",
          "Authorized",
          "Reversed",
          "Refunded",
          "Settled",
          "Withdraw",
          "Deposit",
          "Chargeback"
        ]
      },
      "Transactions": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/TransactionItem"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "TransferResult": {
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The transferred amount.",
            "example": 10.25
          },
          "currency": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The currency of the transferred amount.",
            "example": "EUR"
          },
          "datetime": {
            "type": [
              "string"
            ],
            "description": "The date and time of the transaction.",
            "example": "2017-06-01T12:48:40Z"
          },
          "from_wallet": {
            "$ref": "#/components/schemas/Wallet",
            "description": "The source wallet used for the transfer."
          },
          "to_wallet": {
            "$ref": "#/components/schemas/Wallet",
            "description": "The destination wallet used for the transfer."
          }
        }
      },
      "UpdatableUserStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "UpdateAddress": {
        "description": "Update `Address` JSON parameters.",
        "properties": {
          "addressee_name": {
            "type": [
              "string"
            ],
            "description": "The name of the addressee.",
            "example": "John"
          },
          "addressee_surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the addressee.",
            "example": "Smith"
          },
          "city": {
            "type": [
              "string"
            ],
            "description": "The city name.",
            "example": "London"
          },
          "country": {
            "$ref": "#/components/schemas/ISO3166Country",
            "description": "The country code in [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) standard."
          },
          "county": {
            "type": [
              "string"
            ],
            "description": "The county code.",
            "example": "00000"
          },
          "default_shipping": {
            "type": [
              "boolean"
            ],
            "description": "It is `true` if it's the default shipping address (for `COMPANY` addresses only).",
            "example": true
          },
          "employee_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` owner of the `Address`, required only when `resource_type` is `USER`.",
            "example": "XMPL1234-000003"
          },
          "line1": {
            "type": [
              "string"
            ],
            "description": "The actual name of the `Address`.",
            "example": "Actual address of John"
          },
          "line2": {
            "type": [
              "string"
            ],
            "description": "The primary street of the `Address`.",
            "example": "Foo street 33"
          },
          "line3": {
            "type": [
              "string"
            ],
            "description": "The optional secondary street.",
            "example": "Second floor"
          },
          "post_code": {
            "type": [
              "string"
            ],
            "description": "The post code of the city.",
            "example": "00000"
          },
          "resource_type": {
            "$ref": "#/components/schemas/AddressResourceType",
            "description": "The type of the `Address`.",
            "example": "COMPANY"
          }
        },
        "required": [
          "country"
        ]
      },
      "UpdateAutotag": {
        "description": "Update `Autotag` JSON parameters.",
        "properties": {
          "criteria": {
            "type": [
              "array"
            ],
            "description": "The list of `Criteria` that need to be satisfied in order for the `Autotag` to be executed.",
            "items": {
              "$ref": "#/components/schemas/AutotagCriteria"
            }
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Autotag` rule is enabled (if a rule is not enabled, it won't be executed)."
          },
          "expense_category_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `ExpenseCategory` of to be assigned to a `Transaction` satisfying the `Criteria`.",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Autotag`.",
            "example": "Autotag"
          },
          "operation": {
            "$ref": "#/components/schemas/AutotagOperation",
            "description": "The logical operator applied to the `Criteria`."
          },
          "tag_ids": {
            "type": [
              "array"
            ],
            "description": "The IDs of the `Tag` and related `List` to be assigned to a `Transaction` satisfying the `Criteria`.",
            "items": {
              "$ref": "#/components/schemas/AutotagTag"
            }
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `VATRate` to be assigned to a `Transaction` satisfying the `Criteria`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "UpdateCard": {
        "description": "Update `Card` JSON parameters.",
        "properties": {
          "addCardAssignees": {
            "type": [
              "array"
            ],
            "description": "The assignees to be added for the `Card`.",
            "items": {
              "type": [
                "string"
              ]
            }
          },
          "label": {
            "type": [
              "string"
            ],
            "description": "The new label of the `Card`.",
            "example": "CardLabel",
            "maxLength": 20
          },
          "removeCardAssignees": {
            "type": [
              "array"
            ],
            "description": "The assignees to be remove for the `Card`.",
            "items": {
              "type": [
                "string"
              ]
            }
          },
          "vehicle_id": {
            "type": [
              "string"
            ],
            "description": "The `Vehicle` ID to be assigned to the `Card` - only valid for PLASTIC or FUEL cards (To remove a `Vehicle` set the value to an empty string).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "UpdateCardRuleCashPoint": {
        "description": "`CardRuleCashPointRule` parameters.",
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          },
          "max": {
            "type": [
              "number"
            ],
            "format": "double",
            "description": "Maximum spendable amount related to the limit.",
            "example": 10.25
          }
        },
        "required": [
          "enabled",
          "max"
        ]
      },
      "UpdateCardRuleCountries": {
        "description": "`CardRuleCountries` parameters.",
        "properties": {
          "countries": {
            "type": [
              "array"
            ],
            "description": "A list of [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) country code and `enabled` pairs.",
            "items": {}
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          }
        },
        "required": [
          "countries",
          "request_timestamp"
        ]
      },
      "UpdateCardRuleMerchantCategories": {
        "description": "`CardRuleMerchantCategories` parameters.",
        "properties": {
          "merchant_categories": {
            "type": [
              "array"
            ],
            "description": "A list of `MerchantCategory` and `enabled` pairs.",
            "items": {}
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          }
        },
        "required": [
          "merchant_categories",
          "request_timestamp"
        ]
      },
      "UpdateCardRuleSpendingLimit": {
        "description": "SpendingLimit rule parameters.",
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the card rule is enabled.",
            "example": true
          },
          "max": {
            "type": [
              "number"
            ],
            "format": "double",
            "description": "Maximum spendable amount related to the limit.",
            "example": 10.25
          }
        },
        "required": [
          "enabled",
          "max"
        ]
      },
      "UpdateCardRules": {
        "description": "A `CardRule` representation.",
        "properties": {
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the rule is enabled.",
            "example": true
          },
          "name": {
            "$ref": "#/components/schemas/CardRuleName",
            "description": "The name of the `CardRule` to update. To follow the implications of each rule when enabled (`enabled=true`) on a card:\n- `OpenCloseMasterLock`, card is locked and only admins can unlock it\n- `OpenClose`, card is locked and any user who have access to the card can unlock it\n- `OpenCloseAfterOneTx`, card is automatically locked after each transaction\n- `Online`, card can spend online\n- `Contactless`, card can spend contactless",
            "example": "CashPoint"
          }
        },
        "required": [
          "enabled",
          "name"
        ]
      },
      "UpdateContact": {
        "description": "Update `Contact` JSON parameters.",
        "properties": {
          "account_info": {
            "type": [
              "array"
            ],
            "description": "The account info",
            "items": {
              "$ref": "#/components/schemas/AccountInfoContact"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ContactStatus",
            "description": "The status of the `Contact`",
            "example": "CREATED"
          },
          "type": {
            "$ref": "#/components/schemas/ContactType",
            "description": "The type of the `Contact`",
            "example": "SUPPLIER"
          },
          "user_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` the bank details are assigned to (only available for `Contacts` of type `EMPLOYEE`).",
            "example": "XMPL1234-000001"
          }
        }
      },
      "UpdateExpenseCategory": {
        "description": "Update `ExpenseCategory` Request JSON parameters.",
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the `ExpenseCategory`.",
            "example": 123
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ExpenseCategory`.",
            "example": "An expense category"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "(true/false)it determines whether the `ExpenseCategory` is visible on the transaction detail.",
            "example": true
          },
          "expense_type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of expense this category is assigned to.",
            "example": "company"
          },
          "merchant_categories": {
            "type": [
              "array"
            ],
            "description": "A list of merchant categories this `ExpenseCategory` is auto-assigned to.",
            "items": {
              "$ref": "#/components/schemas/MerchantCategory"
            }
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseCategory`.",
            "example": "category-one"
          },
          "tax_rate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the VAT Rate linked to the `ExpenseCategory`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "UpdateExpenseReport": {
        "description": "Update `ExpenseReport` Request JSON parameters.",
        "properties": {
          "approver_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the SuperAdmin `User` who approves/rejects the expense.",
            "example": "XMPL1234-000003"
          },
          "status": {
            "$ref": "#/components/schemas/ExpenseReportStatusUpdate",
            "description": "The status of the  `ExpenseReport`.",
            "example": "PROCESSED"
          }
        }
      },
      "UpdateExpenseReviewConfiguration": {
        "description": "Update Conf JSON parameters.",
        "properties": {
          "activity_groups": {
            "type": [
              "array"
            ],
            "description": "It determines the filter by types of cards whose transactions are considered as expenses to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseConfigurationActivityGroup"
            },
            "uniqueItems": true
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "It indicates ExpenseReview configuration is enabled.",
            "example": false
          },
          "policy_url": {
            "type": [
              "string"
            ],
            "description": "The URL of the company spending policy.",
            "example": "https://www.policy.pdf"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "start_date": {
            "type": [
              "string"
            ],
            "description": "The starting date from which the expenses can be reviewed.",
            "example": "2017-06-01T12:48:40Z"
          },
          "start_date_type": {
            "$ref": "#/components/schemas/ExpenseDateType",
            "description": "It determines the filter by the type of date, multiple statuses can be included.",
            "example": "TRANSACTION"
          }
        },
        "required": [
          "request_timestamp"
        ]
      },
      "UpdateExpenseReviewProcess": {
        "description": "Update ExpenseReviewProcessStatus JSON parameters.",
        "properties": {
          "conditions": {
            "type": [
              "array"
            ],
            "description": "The conditions a transaction needs to match in order to be included in the `ExpenseReviewProcess`.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessCondition"
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS DESCRIPTION"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ExpenseReviewProcess`.",
            "example": "EXPENSE REVIEW PROCESS"
          },
          "steps": {
            "type": [
              "array"
            ],
            "description": "The approval steps a transaction needs to go through in order to be reviewed.",
            "items": {
              "$ref": "#/components/schemas/ExpenseReviewProcessStep"
            }
          }
        },
        "required": [
          "conditions",
          "description",
          "name",
          "steps"
        ]
      },
      "UpdateExpenseReviewProcessStatus": {
        "description": "Update ExpenseReviewProcessStatus JSON parameters.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ExpenseReviewProcessChangeStatus",
            "description": "The status of the `ExpenseReviewProcess`.",
            "example": "ACTIVE"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdateExpenseStatus": {
        "properties": {
          "approver_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the SuperAdmin `User` who approves/rejects the expense.",
            "example": "XMPL1234-000003"
          },
          "status": {
            "$ref": "#/components/schemas/ExpenseStatus",
            "description": "The expense status of the transaction.",
            "example": "APPROVED"
          },
          "status_category": {
            "$ref": "#/components/schemas/ExpenseStatusCategory",
            "description": "The status category of the transaction expense.",
            "example": "AGAINST_POLICY"
          },
          "status_reason": {
            "type": [
              "string"
            ],
            "description": "The reason of the status.",
            "example": "Expense violates company's reimbursement policy"
          }
        },
        "required": [
          "approver_id",
          "status",
          "status_category"
        ]
      },
      "UpdateExpenseType": {
        "properties": {
          "approver_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the 'SuperAdmin' `user` who approves/rejects the expense review.",
            "example": "XMPL1234-000003"
          },
          "type": {
            "$ref": "#/components/schemas/ExpenseType",
            "description": "The type of the `Transaction` expense.",
            "example": "TRAVEL_AND_ENTERTAINMENT"
          }
        },
        "required": [
          "approver_id",
          "type"
        ]
      },
      "UpdateGroup": {
        "description": "Update `Group` JSON parameters.",
        "properties": {
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `Group` reference in an external system.",
            "example": "hr-division-0001"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Group`.",
            "example": "HR"
          },
          "note": {
            "type": [
              "string"
            ],
            "description": "Any notes about the `Group`.",
            "example": "division"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType",
            "description": "The `Group`'s type.",
            "example": "DIVISION"
          }
        }
      },
      "UpdateOnlineAds": {
        "description": "Update `OnlineAd` JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description `OnlineAds`.",
            "example": "Google Ads Campaign"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `OnlineAds`.",
            "example": "Google Ads"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID associated to the `OnlineAds`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "UpdateOutOfOfficeDelegation": {
        "description": "Update `out_of_office` Request JSON parameters.",
        "properties": {
          "delegate_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the person covering for the delegator.",
            "example": "XMPL1234-000002"
          },
          "features": {
            "type": [
              "array"
            ],
            "description": "The features of `out_of_office`.",
            "items": {
              "$ref": "#/components/schemas/DelegationFeature"
            }
          },
          "from_date": {
            "type": [
              "string"
            ],
            "description": "Defines when the out_of_office entry starts. fromDate included.(i.e. greater than or equal to) (Format: `yyyy-MM-dd`).",
            "example": "2020-04-06"
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "to_date": {
            "type": [
              "string"
            ],
            "description": "Defines when the out_of_office entry ends. toDate included.(i.e. less than) (Format: `yyyy-MM-dd`).",
            "example": "2020-04-06"
          }
        },
        "required": [
          "delegate_id",
          "features",
          "request_timestamp"
        ]
      },
      "UpdatePurchase": {
        "description": "Update `Purchase` JSON parameters.",
        "properties": {
          "amount": {
            "type": [
              "number"
            ],
            "description": "The maximum spendable amount of the `Purchase`.",
            "example": 10.25
          },
          "assignee_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` assigned to the `Purchase`.",
            "example": "XMPL1234-000003"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Purchase`.",
            "example": "A purchase to approve"
          },
          "max_tx_number": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "default": "1",
            "description": "The total number of `Transactions` the temporary virtual `Card` can make (default is `1`).",
            "example": 3
          },
          "notes": {
            "type": [
              "string"
            ],
            "description": "The notes of the `Purchase`.",
            "example": "Notes about the purchase request"
          },
          "purchase_id": {
            "type": [
              "string"
            ],
            "description": "The `Purchase` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "title": {
            "type": [
              "string"
            ],
            "description": "The name of the `Purchase`",
            "example": "Tech book"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Wallet` the money are taken from, the funding source of the `Purchase`.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        },
        "required": [
          "purchase_id"
        ]
      },
      "UpdateRefueling": {
        "description": "Update `Refueling` JSON parameters.",
        "properties": {
          "mileage": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The mileage of the `Vehicle`.",
            "example": 125000
          },
          "quantity": {
            "type": [
              "number"
            ],
            "description": "The fuel quantity as specified on the `Transaction`.",
            "example": 80
          },
          "tx_fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type specified on the `Transaction`.",
            "example": "PETROL"
          },
          "unit_price": {
            "type": [
              "number"
            ],
            "description": "The fuel unit price as specified on the `Transaction`.",
            "example": 1.41
          }
        }
      },
      "UpdateResourceSet": {
        "description": "Update `ResourceSet` JSON parameters.",
        "properties": {
          "configuration": {
            "type": [
              "array"
            ],
            "description": "The configuration of the `ResourceSet`.",
            "items": {
              "$ref": "#/components/schemas/Configuration"
            }
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `ResourceSet`.",
            "example": "This is a resource set"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `ResourceSet` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `ResourceSet`.",
            "example": "Resource set 01"
          }
        },
        "required": [
          "configuration",
          "name"
        ]
      },
      "UpdateSubscription": {
        "description": "Update `Subscription` JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Subscription`.",
            "example": "Google Ads Campaign"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Subscription`.",
            "example": "Google Ads"
          },
          "payment_frequency": {
            "$ref": "#/components/schemas/SubscriptionPaymentFrequency",
            "description": "The payment frequency indicates how often a `Transaction` is expected to be made.",
            "example": "YEARLY"
          },
          "wallet_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the associated `Wallet `.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
          }
        }
      },
      "UpdateTransaction": {
        "description": "Update `Transaction` JSON parameters.",
        "properties": {
          "trx_owner_id": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` assignee, one of the `User` ID assigned to the `Company` `Card`.",
            "example": "XMPL1234-000001"
          },
          "user_notes": {
            "type": [
              "string"
            ],
            "description": "The `Transaction` user notes.",
            "example": "something"
          }
        }
      },
      "UpdateTransactionAttachment": {
        "description": "Update `TransactionAttachment` JSON parameters.",
        "properties": {
          "attachment_type": {
            "$ref": "#/components/schemas/TransactionAttachmentType",
            "description": "The type of the attachment",
            "example": "INVOICE"
          },
          "metadata": {
            "type": [
              "object"
            ],
            "additionalProperties": {
              "type": [
                "string"
              ]
            },
            "description": "Generic map of custom metadata"
          },
          "read_only": {
            "type": [
              "boolean"
            ],
            "description": "true if the attachment is not editable",
            "example": false
          }
        }
      },
      "UpdateTransactionSplit": {
        "description": "Update `Transaction` split JSON parameters.",
        "properties": {
          "split_transactions": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/SplitTransaction"
            },
            "minItems": 2
          }
        },
        "required": [
          "split_transactions"
        ]
      },
      "UpdateUser": {
        "description": "Update `User` JSON parameters.",
        "properties": {
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The `User` reference in an external system.",
            "example": "123456-user-1"
          },
          "email": {
            "type": [
              "string"
            ],
            "description": "The email of the `User` it is required for web credentials.",
            "example": "jdoe@fake.soldo.com"
          },
          "enable_mobile_credential": {
            "type": [
              "boolean"
            ],
            "description": "True if the `User` has the mobile access enabled.",
            "example": true
          },
          "enable_web_credential": {
            "type": [
              "boolean"
            ],
            "description": "True if the `User` has the web access enabled.",
            "example": false
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User`.",
            "example": "Business Strategist"
          },
          "mobile_number": {
            "type": [
              "string"
            ],
            "description": "The mobile number of the `User` including the country code.",
            "example": "+44123323232"
          },
          "mobile_prefix": {
            "type": [
              "string"
            ],
            "description": "The mobile number country code, it must be the same included in the `mobile_number` field",
            "example": "+44"
          },
          "reports_to": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` it reports to. In order to remove a previously set value, the field should be included in the payload as an empty string `\"reports_to\"`: `\"\"`.",
            "example": "XMPL1234-000001"
          },
          "skip_credential_notification": {
            "type": [
              "boolean"
            ],
            "description": "Avoid to notify user upon credential status change driven by `enable_mobile_credential` or `enable_web_credential` flags.",
            "example": true
          }
        }
      },
      "UpdateUserAccessModes": {
        "description": "Update `User` access JSON parameters.",
        "properties": {
          "access_modes": {
            "type": [
              "array"
            ],
            "description": "The access modes to apply to the given `User`.",
            "example": "ACTIVE",
            "items": {
              "$ref": "#/components/schemas/UserAccessMode"
            }
          },
          "request_timestamp": {
            "type": [
              "integer"
            ],
            "format": "int64",
            "description": "The epoc timestamp in millis. This is checked in Soldo. Requests with timestamp older than 5 seconds will be rejected.",
            "example": 1576850500000
          },
          "skip_credential_notification": {
            "type": [
              "boolean"
            ],
            "default": "true",
            "description": "Avoid to notify user upon credential status change driven by `access_modes` field.",
            "example": true
          }
        },
        "required": [
          "access_modes",
          "request_timestamp"
        ]
      },
      "UpdateUserRoleAssignment": {
        "description": "Remove `Role` from `User` JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Role`.",
            "example": "The SuperAdmin role"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Role`.",
            "example": "superAdmin"
          },
          "scope": {
            "type": [
              "string"
            ],
            "description": "The name of the scope.",
            "example": "ALL"
          }
        }
      },
      "UpdateUserStatus": {
        "description": "Update `User` status JSON parameters.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdatableUserStatus",
            "description": "The new `User` status.",
            "example": "ACTIVE"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdateVatRate": {
        "description": "Update `VatRate` JSON parameters.",
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the `VATRate`.",
            "example": "code-vat-11"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "the description of the `VATRate`.",
            "example": "something"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "The `VATRate` is visible in the transaction detail.",
            "example": true
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `VATRate`.",
            "example": "Tax 11"
          },
          "percentage": {
            "type": [
              "number"
            ],
            "format": "double",
            "description": "The percentage value of the `VATRate`.",
            "example": 15
          }
        },
        "required": [
          "percentage"
        ]
      },
      "UpdateVehicle": {
        "description": "Update vehicle JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Vehicle`.",
            "example": "Employee electric vehicle"
          },
          "fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type of the `Vehicle`.",
            "example": "PETROL"
          },
          "number_plate": {
            "type": [
              "string"
            ],
            "description": "The plate number of the `Vehicle`.",
            "example": "AA000BB"
          },
          "status": {
            "$ref": "#/components/schemas/VehicleStatus",
            "description": "The status of the `Vehicle`.",
            "example": "ACTIVE"
          },
          "vat_deductible": {
            "$ref": "#/components/schemas/VatDeductibilityPercentage",
            "description": "The VAT deductibility rate.",
            "example": 40
          }
        },
        "required": [
          "description",
          "fuel_type",
          "number_plate",
          "status",
          "vat_deductible"
        ]
      },
      "UpdateWallet": {
        "description": "The `Wallet` JSON parameters.",
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` description.",
            "example": "My company wallet"
          },
          "label": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` label.",
            "example": "JD"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` name.",
            "example": "John Doe"
          }
        },
        "required": [
          "description",
          "label",
          "name"
        ]
      },
      "UpdateWebhookSubscription": {
        "description": "Update `WebhookSubscription` JSON parameters.",
        "properties": {
          "active": {
            "type": [
              "boolean"
            ],
            "description": "The status of the `WebhookSubscription` (if `false`, notifications are not sent).",
            "example": true
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `WebhookSubscription`.",
            "example": "Report updates"
          },
          "enabled_events": {
            "type": [
              "array"
            ],
            "description": "The list of the `WebhookSubscription` enabled events.",
            "items": {
              "$ref": "#/components/schemas/WebhookEventName"
            }
          },
          "webhook_url": {
            "type": [
              "string"
            ],
            "description": "The URL of the `WebhookSubscription`.",
            "example": "https://your_domain.com/xx/xx"
          }
        }
      },
      "UploadUserChannel": {
        "type": [
          "string"
        ],
        "enum": [
          "WEB",
          "MOBILE",
          "BO_USER",
          "business",
          "BAPI",
          "PAPI",
          "OTHER"
        ]
      },
      "UrlType": {
        "type": [
          "string"
        ],
        "enum": [
          "DOWNLOAD_URL",
          "UPLOAD_URL",
          "UPLOAD_COMPLETED",
          "DELETE",
          "THUMBNAILS_DOWNLOAD_URL",
          "UPDATE_METADATA"
        ]
      },
      "User": {
        "properties": {
          "contact_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Contact` assigned to the `User`. This information can be updated from the [Add Contact](ref:contact-add) and [Update Contact](ref:contact-update) endpoints.",
            "example": "135fdb6c-2e77-4fc0-a79f-2453fde75ef7"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `User` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The reference of the employee in an external system (sortable: yes).",
            "example": "123456-user-1"
          },
          "department": {
            "type": [
              "string"
            ],
            "description": "The department of the `User` (sortable: no).",
            "example": "Research & Development"
          },
          "dob": {
            "type": [
              "string"
            ],
            "description": "The Date of birth of the `User`.",
            "example": "1970-10-21"
          },
          "email": {
            "type": [
              "string"
            ],
            "description": "The email address of the `User` (sortable: no).",
            "example": "jdoe@fake.soldo.com"
          },
          "groups": {
            "type": [
              "array"
            ],
            "description": "The list of `Groups` ID the `User` is member of (sortable: no).",
            "items": {
              "example": "776f5018-07e5-426b-a426-8b23fa1e985d"
            }
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `User` ID.",
            "example": "XMPL1234-000001"
          },
          "job_title": {
            "type": [
              "string"
            ],
            "description": "The job title of the `User` (sortable: yes).",
            "example": "Business Strategist"
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `User` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "middlename": {
            "type": [
              "string"
            ],
            "description": "The middlename of the `User` (sortable: no).",
            "example": "John"
          },
          "mobile": {
            "type": [
              "string"
            ],
            "description": "The mobile number of the `User` including the country code (sortable: no).",
            "example": "+44123323232"
          },
          "mobile_access": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `User` has mobile access (sortable: no).",
            "example": true
          },
          "mobile_prefix": {
            "type": [
              "string"
            ],
            "description": "The mobile number country code (sortable: no).",
            "example": "+44"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `User` (sortable: yes).",
            "example": "John"
          },
          "reports_to": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` it reports to.",
            "example": "XMPL1234-000001"
          },
          "roles": {
            "type": [
              "array"
            ],
            "description": "The list of `UserRole` of the `User`.",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address",
            "description": "The shipping `Address` of the `User`."
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus",
            "description": "The status of the `User` (sortable: yes).",
            "example": "ACTIVE"
          },
          "surname": {
            "type": [
              "string"
            ],
            "description": "The surname of the `User` (sortable: yes).",
            "example": "Smith"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `User` is visible in the web console (sortable: yes).",
            "example": true
          },
          "web_access": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `User` has web access (sortable: no).",
            "example": true
          },
          "work_status": {
            "$ref": "#/components/schemas/WorkStatus",
            "description": "The work status of the `User`.",
            "example": "OUT_OF_OFFICE"
          }
        },
        "required": [
          "contact_id"
        ]
      },
      "UserAccessMode": {
        "properties": {
          "auth_mode": {
            "$ref": "#/components/schemas/UserAuthMode",
            "description": "The authentication mode required for the `User` while accessing from the given channel.",
            "example": "SSO"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel",
            "description": "The channel for which the access mode applies.",
            "example": "WEB"
          }
        },
        "required": [
          "auth_mode",
          "channel"
        ]
      },
      "UserAccessModeList": {
        "properties": {
          "user_access_mode": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/UserAccessMode"
            }
          }
        }
      },
      "UserAuthMode": {
        "type": [
          "string"
        ],
        "enum": [
          "SOLDO",
          "SSO"
        ]
      },
      "UserRole": {
        "properties": {
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `UserRole`.",
            "example": "The SuperAdmin role"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `UserRole`.",
            "example": "superAdmin"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `UserRole`.",
            "example": "superAdmin"
          },
          "scope": {
            "type": [
              "string"
            ],
            "description": "The scope of the `UserRole`.",
            "example": "ALL"
          }
        }
      },
      "UserRoles": {
        "properties": {
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "UserStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "INACTIVE",
          "BLOCKED",
          "SUSPENDED",
          "PENDING",
          "ARCHIVED"
        ]
      },
      "Users": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "VatDeductibilityPercentage": {
        "type": [
          "string"
        ],
        "enum": [
          "NONE",
          "40",
          "100"
        ]
      },
      "VatRate": {
        "properties": {
          "code": {
            "type": [
              "string"
            ],
            "description": "The code of the `VATRate`.",
            "example": "code-vat-11"
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `VATRate` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A custom description of the `VATRate`.",
            "example": "Number 11 of Tax code"
          },
          "enabled": {
            "type": [
              "boolean"
            ],
            "description": "The `VATRate` is visible in the transaction detail.",
            "example": true
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `VATRate` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "integration": {
            "type": [
              "string"
            ],
            "description": "The `VATRate`'s corresponding integration.",
            "example": "something"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `VATRate` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `VATRate`",
            "example": "Tax 11"
          },
          "percentage": {
            "type": [
              "number"
            ],
            "format": "double",
            "description": "The percentage value of the `VATRate`",
            "example": 15
          }
        }
      },
      "VatRates": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/VatRate"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Vehicle": {
        "properties": {
          "card_ids": {
            "type": [
              "array"
            ],
            "description": "The list of `Card` ID associated with the vehicle (sortable: no).",
            "items": {
              "example": "776f5018-07e5-426b-a426-8b23fa1e985d"
            }
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Vehicle` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `Vehicle` (sortable: no).",
            "example": "Employee electric vehicle"
          },
          "fuel_type": {
            "$ref": "#/components/schemas/FuelType",
            "description": "The fuel type (sortable: no).",
            "example": "PETROL"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Vehicle` ID (sortable: no).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The last date and time when the `Vehicle` was updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "number_plate": {
            "type": [
              "string"
            ],
            "description": "The plate number of the `Vehicle` (sortable: yes).",
            "example": "AA000BB"
          },
          "status": {
            "$ref": "#/components/schemas/VehicleStatus",
            "description": "The vehicle status (sortable: no).",
            "example": "ACTIVE"
          },
          "vat_deductible": {
            "$ref": "#/components/schemas/VatDeductibilityPercentage",
            "description": "The VAT deductibility rate (sortable: no).",
            "example": 40
          }
        }
      },
      "VehicleStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "ACTIVE",
          "ARCHIVED",
          "DELETED"
        ]
      },
      "Vehicles": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Vehicle"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "Wallet": {
        "properties": {
          "available_amount": {
            "type": [
              "number"
            ],
            "description": "The currently available balance of the `Wallet` (sortable: no)",
            "example": 100
          },
          "blocked_amount": {
            "type": [
              "number"
            ],
            "description": "The blocked balance of the `Wallet` (the overall amount of `Transactions` in `Authorised` status) (sortable: no)",
            "example": 0
          },
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Wallet` was created (sortable: yes)",
            "example": "2017-06-01T12:48:40Z"
          },
          "currency_code": {
            "$ref": "#/components/schemas/ISO4217Currency",
            "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Wallet` (sortable: no)",
            "example": "EUR"
          },
          "custom_reference_id": {
            "type": [
              "string"
            ],
            "description": "The custom reference of the `User` if the `Wallet` is of type `employee`, not available for other wallet types (sortable: yes)",
            "example": "123456-usa-1"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The note of the `Wallet` (sortable: yes)",
            "example": "CompanyWallet1"
          },
          "group_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `Group` the wallet is related to (sortable: no)",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The `Wallet` ID (sortable: yes)",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "label": {
            "type": [
              "string"
            ],
            "description": "The label of the `Wallet` (sortable: yes)",
            "example": "CompanyWallet1"
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `Wallet` was last updated (sortable: yes)",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `Wallet` (sortable: yes)",
            "example": "CompanyWallet1"
          },
          "primary_user_public_id": {
            "type": [
              "string"
            ],
            "description": "The ID of the `User` if the `Wallet` is of type `employee`, not available for other `Wallet` types (sortable: no)",
            "example": "XMPL1234-000001"
          },
          "primary_user_type": {
            "$ref": "#/components/schemas/PrimaryUserType",
            "description": "The type of resource assigned to the `Wallet` (sortable: no)",
            "example": "dedicated"
          },
          "visible": {
            "type": [
              "boolean"
            ],
            "description": "It determines whether the `Wallet` is visible on the web console (sortable: yes)",
            "example": true
          }
        }
      },
      "WalletAutotransferPreset": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time the `AutoTransferPreset` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "currency": {
            "type": [
              "string"
            ],
            "description": "The currency used in the `AutoTransferPreset`.",
            "example": "EUR"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of the `AutoTransferPreset`. (Sortable: No).",
            "example": "Default CardRule preset policy"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The unique identifier of the `AutoTransferPreset`. (Sortable: No).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time the `AutoTransferPreset` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `AutoTransferPreset`. (Sortable: No).",
            "example": "DefaultPreset"
          },
          "number_of_assigned_wallets": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The number of wallets assigned to the `AutoTransferPreset`.",
            "example": 2
          },
          "type": {
            "$ref": "#/components/schemas/WalletPresetType",
            "description": "The type of `AutoTransferPreset`.",
            "example": "PERIODIC"
          },
          "wallet_from": {
            "type": [
              "string"
            ],
            "description": "The from wallet used for the `AutoTransferPreset`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "wallet_to": {
            "type": [
              "array"
            ],
            "description": "The to wallet used for the `AutoTransferPreset`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "WalletAutotransferPresetItems": {
        "properties": {
          "creation_time": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `AutotransferPreset` was created.",
            "example": "2017-06-01T12:48:40Z"
          },
          "currency": {
            "type": [
              "string"
            ],
            "description": "The currency used in the `AutoTransferPreset`.",
            "example": "EUR"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "The description of `AutoTransferPreset` (sortable: no).",
            "example": "Default CardRule preset policy"
          },
          "id": {
            "type": [
              "string"
            ],
            "description": "The unique identifier of the `AutoTransferPreset`. (Sortable: No).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          },
          "last_update_time": {
            "type": [
              "string"
            ],
            "description": "The date and time the `AutoTransferPreset` was last updated.",
            "example": "2017-06-01T12:48:40Z"
          },
          "name": {
            "type": [
              "string"
            ],
            "description": "The name of the `AutoTransferPreset`. (Sortable: No)",
            "example": "DefaultPreset"
          },
          "number_of_assigned_wallets": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "The number of wallets assigned to the `AutoTransferPreset`.",
            "example": 2
          },
          "type": {
            "$ref": "#/components/schemas/WalletPresetType",
            "description": "The type of the `AutoTransferPreset`.",
            "example": "PERIODIC"
          },
          "wallet_from": {
            "type": [
              "string"
            ],
            "description": "The from wallet used for the `AutoTransferPreset`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
          }
        }
      },
      "WalletAutotransferPresets": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/WalletAutotransferPresetItems"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "WalletPresetType": {
        "type": [
          "string"
        ],
        "description": "The type of `AutoTransferPreset`.",
        "enum": [
          "PERIODIC",
          "LOW_BALANCE"
        ]
      },
      "Wallets": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/Wallet"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "WalletsToTransfer": {
        "description": "The `Wallet` JSON parameters.",
        "properties": {
          "walletIds": {
            "type": [
              "array"
            ],
            "description": "A list of `Wallet` IDs.",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "WebhookEventName": {
        "type": [
          "string"
        ],
        "enum": [
          "card_activated",
          "card_change_status",
          "card_creation",
          "card_destroyed",
          "card_lost",
          "card_replaced",
          "card_stolen",
          "add_resources_card",
          "add_resources_member",
          "add_resources_wallet",
          "create_group",
          "delete_group",
          "move_resources_card",
          "move_resources_member",
          "move_resources_wallet",
          "remove_resources_card",
          "remove_resources_member",
          "remove_resources_wallet",
          "update_group",
          "store_order_completed",
          "store_order_placed",
          "balanced_transfer",
          "billing",
          "card_authorization",
          "conversion",
          "customer_care_deposit",
          "customer_care_withdraw",
          "edit_tag",
          "inbound_payment",
          "inbound_payment_reversal",
          "internal_transfer",
          "joule_feed",
          "load_failed",
          "load_money",
          "recurring_billing",
          "scheduled_transfer",
          "transaction_adjustment",
          "unload_money",
          "wiretransfer",
          "upload_completed",
          "attachment_delete",
          "new_user",
          "user_status_changed",
          "user_updated",
          "wallet_created",
          "wallet_deleted",
          "vehicle_create",
          "vehicle_update",
          "vehicle_delete",
          "purchase_create",
          "purchase_update",
          "purchase_delete",
          "purchase_redeem_card",
          "created_expense_configuration",
          "disabled_expense_configuration",
          "enabled_expense_configuration",
          "updated_expense_configuration",
          "completed_transactions_import",
          "updated_transaction",
          "change_expense_type",
          "subscription_activated",
          "subscription_created",
          "subscription_updated",
          "subscription_deleted",
          "subscription_assignee_added",
          "subscription_assignee_removed",
          "online_ads_activated",
          "online_ads_created",
          "online_ads_updated",
          "online_ads_deleted",
          "online_ads_assignee_added",
          "online_ads_assignee_removed",
          "transaction_created",
          "transaction_modified",
          "transaction_deleted"
        ]
      },
      "WebhookSubscription": {
        "properties": {
          "active": {
            "type": [
              "boolean"
            ],
            "description": "The status of the `WebhookSubscription`.",
            "example": true
          },
          "creation_date": {
            "type": [
              "string"
            ],
            "description": "The date and time when the `WebhookSubscription` was created (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "description": {
            "type": [
              "string"
            ],
            "description": "A custom description of the `WebhookSubscription`.",
            "example": "Report updates"
          },
          "enabled_events": {
            "type": [
              "array"
            ],
            "description": "The list of subscribed events.",
            "items": {
              "$ref": "#/components/schemas/WebhookEventName"
            },
            "uniqueItems": true
          },
          "id": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "description": "The `WebhookSubscription` ID."
          },
          "last_update": {
            "type": [
              "string"
            ],
            "description": "The last date and time when the `WebhookSubscription` was last updated (sortable: yes).",
            "example": "2017-06-01T12:48:40Z"
          },
          "webhook_url": {
            "type": [
              "string"
            ],
            "description": "The URL of `WebhookSubscription`.",
            "example": "https://your_domain.com/xx/xx"
          }
        }
      },
      "WebhookSubscriptions": {
        "properties": {
          "current_page": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the current page (the counter starts from zero).",
            "example": 0
          },
          "page_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the number of items per page.",
            "example": 25
          },
          "pages": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available pages.",
            "example": 7
          },
          "results": {
            "type": [
              "array"
            ],
            "items": {
              "$ref": "#/components/schemas/WebhookSubscription"
            }
          },
          "results_size": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It indicates the size of the array results.",
            "example": 25
          },
          "total": {
            "type": [
              "integer"
            ],
            "format": "int32",
            "description": "It represents the total number of available items in the list.",
            "example": 168
          }
        }
      },
      "WhoAmI": {
        "properties": {
          "company_name": {
            "type": [
              "string"
            ],
            "description": "The company name of the user.",
            "example": "Example Inc."
          },
          "scopes": {
            "type": [
              "array"
            ],
            "description": "The list of the scopes granted for the API Key.",
            "example": "company_read",
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "WorkStatus": {
        "type": [
          "string"
        ],
        "enum": [
          "AVAILABLE",
          "OUT_OF_OFFICE"
        ]
      }
    },
    "securitySchemes": {
      "standardAuth": {
        "description": "This API uses OAuth 2 with the \"Client Credentials\" grant flow.",
        "flows": {
          "clientCredentials": {
            "refreshUrl": "https://api.soldo.com/oauth/refresh",
            "scopes": {
              "address_read": "Can read address details.",
              "address_write": "Can update address details.",
              "card_read": "Can read card details.",
              "card_write": "Can change card details.",
              "company_read": "Can read company details.",
              "company_write": "Can change company details.",
              "contact_read": "Can read contact details.",
              "contact_write": "Can change contact details.",
              "employee_read": "Can read employee details.",
              "employee_write": "Can change employee details.",
              "expense_category_read": "Can read expense category details.",
              "expense_category_write": "Can change expense category details.",
              "expense_report_read": "Can read expense report details.",
              "expense_report_write": "Can change expense report details.",
              "expense_review_read": "Can read expense review status.",
              "expense_review_write": "Can change expense review status.",
              "group_read": "Can read group details.",
              "group_write": "Can change groups details.",
              "online_ads_read": "Can read online ads details.",
              "online_ads_write": "Can change online ads details.",
              "payment_read": "Can read payment details.",
              "payment_write": "Can change payment details.",
              "purchase_read": "Can read purchase details.",
              "purchase_write": "Can change purchase details.",
              "refueling_read": "Can read refueling details.",
              "refueling_write": "Can change refueling details.",
              "resource_set_read": "Can read resource set details.",
              "resource_set_write": "Can change resource set details.",
              "role_read": "Can read role details.",
              "statement_read": "Can read statement details.",
              "subscription_read": "Can read subscription details.",
              "subscription_write": "Can change subscription details.",
              "tag_read": "Can read tags.",
              "tag_write": "can change tags.",
              "tax_rate_read": "Can read vat rate details.",
              "tax_rate_write": "Can change vat rate details.",
              "transaction_read": "Can read transaction details.",
              "transaction_write": "Can change transaction details.",
              "vehicle_read": "Can read vehicle details.",
              "vehicle_write": "Can change vehicle details.",
              "wallet_read": "Can read wallet details.",
              "wallet_write": "Can change wallet details.",
              "webhook_subscription_read": "Can read webhook subscription details.",
              "webhook_subscription_write": "Can change webhook subscription details."
            },
            "tokenUrl": "https://api.soldo.com/oauth/authorize"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "paths": {
    "/business/v2/entities/expense-category": {
      "get": {
        "description": "Endpoint to find `ExpenseCategories` using filtering parameters.",
        "operationId": "expense-category-search",
        "parameters": [
          {
            "description": "A simple text to search in the `ExpenseCategory` (`name` or `code`).",
            "example": "expense category",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the `ExpenseCategory` (`name` or `code`).",
              "example": "expense category"
            }
          },
          {
            "description": "It determines if `ExpenseCategory` is enabled.",
            "example": true,
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines if `ExpenseCategory` is enabled.",
              "example": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategories"
                }
              }
            },
            "description": "The result is an array containing `ExpenseCategories`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_category_read"
            ]
          }
        ],
        "summary": "Search Expense Categories",
        "tags": [
          "Accounting Classification"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `ExpenseCategory`.",
        "operationId": "expense-category-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExpenseCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategory"
                }
              }
            },
            "description": "The result is an `ExpenseCategory`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_category_write"
            ]
          }
        ],
        "summary": "Add Expense Category",
        "tags": [
          "Expense Categories"
        ]
      }
    },
    "/business/v2/addresses": {
      "get": {
        "description": "Endpoint to search `Addresses`.",
        "operationId": "address-search",
        "parameters": [
          {
            "description": "The `User` ID.",
            "example": "XMPL1234-000001",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addresses"
                }
              }
            },
            "description": "The result is an array containing `Addresses`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "address_read"
            ]
          }
        ],
        "summary": "Search Addresses",
        "tags": [
          "Addresses"
        ]
      },
      "post": {
        "description": "Endpoint to create an `Address`.",
        "operationId": "address-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "The returned resource is the single `Address` created."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "address_write"
            ]
          }
        ],
        "summary": "Add Address",
        "tags": [
          "Addresses"
        ],
        "x-soldo": {
          "fingerprint-order": "addressee_name, addressee_surname, line1, line2, line3, country, county, city, post_code, default_shipping, resource_type, employee_id, token"
        }
      }
    },
    "/business/v2/addresses/{addressId}": {
      "delete": {
        "description": "Endpoint to remove an `Address`.",
        "operationId": "address-delete",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Address` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "address_write"
            ]
          }
        ],
        "summary": "Delete Address",
        "tags": [
          "Addresses"
        ]
      },
      "get": {
        "description": "Endpoint to get an `Address` by ID.",
        "operationId": "address-get",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Address` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "The returned resource is a single `Address`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "address_read"
            ]
          }
        ],
        "summary": "Get Address",
        "tags": [
          "Addresses"
        ]
      },
      "put": {
        "description": "Endpoint to update an `Address` by ID.",
        "operationId": "address-update",
        "parameters": [
          {
            "in": "path",
            "name": "addressId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Address` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "The returned resource is a single `Address`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "address_write"
            ]
          }
        ],
        "summary": "Update Address",
        "tags": [
          "Addresses"
        ],
        "x-soldo": {
          "fingerprint-order": "addressId, addressee_name, addressee_surname, line1, line2, line3, country, county, city, post_code, default_shipping, resource_type, employee_id, token"
        }
      }
    },
    "/business/v2/ping/whoami": {
      "get": {
        "description": "Endpoint to get information about the owner of the access token.",
        "operationId": "who-am-i",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhoAmI"
                }
              }
            },
            "description": "The returned resource is a minimal representation of a `User`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "company_read"
            ]
          }
        ],
        "summary": "Get who am I",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/oauth/authorize": {
      "post": {
        "description": "Grant access to the API getting an `OAuth2Token`.",
        "operationId": "authorize",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "client_id": {
                    "type": [
                      "string"
                    ],
                    "description": "The client ID issued while [Setting up the API](doc:api-set-up), this works as a username.",
                    "example": "{{client_id}}"
                  },
                  "client_secret": {
                    "type": [
                      "string"
                    ],
                    "description": "The client secret issued while [Setting up the API](doc:api-set-up), this works as a password.",
                    "example": "{{client_secret}}"
                  }
                },
                "required": [
                  "client_id",
                  "client_secret"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Token"
                }
              }
            },
            "description": "The `OAuth2Token`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "403": {
            "description": "The access token you are using is not granted with the necessary permissions or is expired. Check client scopes and fingerprint requirements."
          }
        },
        "summary": "Authenticate",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/business/v2/wallets/autotransfer-presets": {
      "get": {
        "description": "Endpoint to find `AutoTransferPreset` using filtering parameters.",
        "operationId": "wallet-auto-transfer-presets-search",
        "parameters": [
          {
            "description": "The type of `AutoTransferPreset`.",
            "example": "WHEN_BALANCE_IS",
            "in": "query",
            "name": "type",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The type of `AutoTransferPreset`.",
              "items": {
                "$ref": "#/components/schemas/WalletPresetType"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The currency of the `AutoTransferPreset`.",
            "example": "EUR",
            "in": "query",
            "name": "currency",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The currency of the `AutoTransferPreset`.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The currency of the `AutoTransferPreset`."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The full or partial name of the `AutoTransferPreset`.",
            "example": "John Doe",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The full or partial name of the `AutoTransferPreset`.",
              "example": "John Doe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PageableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletAutotransferPresets"
                }
              }
            },
            "description": "The returned resource is an array containing `AutoTransferPresets`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_read"
            ]
          }
        ],
        "summary": "Search Auto-transfer Presets",
        "tags": [
          "Auto-Transfer Presets"
        ]
      }
    },
    "/business/v2/wallets/autotransfer-presets/{presetId}": {
      "get": {
        "description": "Endpoint to get `AutoTransferPreset` by ID.",
        "operationId": "wallet-auto-transfer-preset-get",
        "parameters": [
          {
            "description": "The `AutoTransferPreset` ID",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletAutotransferPreset"
                }
              }
            },
            "description": "The returned resource is an `AutoTransferPreset`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_read"
            ]
          }
        ],
        "summary": "Get Auto-transfer Preset",
        "tags": [
          "Auto-Transfer Presets"
        ]
      }
    },
    "/business/v2/wallets/autotransfer-presets/{presetId}/relate-resource": {
      "put": {
        "description": "Endpoint to add a `Wallets` to `AutoTransferPreset`.",
        "operationId": "wallet-auto-transfer-preset-set",
        "parameters": [
          {
            "description": "The `AutoTransferPreset` ID",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletsToTransfer"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Add wallets to Auto-transfer Preset",
        "tags": [
          "Auto-Transfer Presets"
        ],
        "x-soldo": {
          "fingerprint-order": "presetId, walletIds, token"
        }
      }
    },
    "/business/v2/wallets/autotransfer-presets/{presetId}/unrelate-resource": {
      "put": {
        "description": "Endpoint to remove a `Wallets` from a `AutoTransferPreset`.",
        "operationId": "wallet-auto-transfer-preset-unset",
        "parameters": [
          {
            "description": "The `AutoTransferPreset` ID",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletsToTransfer"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Remove Wallets from Auto-transfer Preset",
        "tags": [
          "Auto-Transfer Presets"
        ]
      }
    },
    "/business/v2/wallets/presets/{presetId}": {
      "delete": {
        "description": "Endpoint to delete a `AutoTransferPreset` by ID.",
        "operationId": "wallet-auto-transfer-preset-delete",
        "parameters": [
          {
            "description": "The `AutoTransferPreset` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Delete Auto-transfer Preset",
        "tags": [
          "Auto-Transfer Presets"
        ]
      }
    },
    "/business/v2/autotags": {
      "get": {
        "description": "Endpoint to find `Autotags` using filtering parameters.",
        "operationId": "autotag-search",
        "parameters": [
          {
            "description": "The name of the `Autotag`.",
            "example": "AutotagRule",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `Autotag`.",
              "example": "AutotagRule"
            }
          },
          {
            "description": "It determines whether the `Autotag` rule is enabled (if a rule is not enabled, it won't be executed).",
            "example": true,
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether the `Autotag` rule is enabled (if a rule is not enabled, it won't be executed).",
              "example": true
            }
          },
          {
            "description": "The ID of the `User` who created the `Autotag`.",
            "example": "XMPL1234-000001",
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `User` who created the `Autotag`.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autotags"
                }
              }
            },
            "description": "The returned resource is an array of `Autotags`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "autotag_read"
            ]
          }
        ],
        "summary": "Search Autotags",
        "tags": [
          "Autotags"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Autotag`.",
        "operationId": "autotag-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutotag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autotag"
                }
              }
            },
            "description": "The returned resource is a single `Autotag`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "autotag_write"
            ]
          }
        ],
        "summary": "Add Autotag",
        "tags": [
          "Autotags"
        ]
      }
    },
    "/business/v2/autotags/{autotagId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Autotag`.",
        "operationId": "autotag-delete",
        "parameters": [
          {
            "in": "path",
            "name": "autotagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Autotag` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "autotag_write"
            ]
          }
        ],
        "summary": "Delete Autotag",
        "tags": [
          "Autotags"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `Autotag` by ID.",
        "operationId": "autotag-get",
        "parameters": [
          {
            "in": "path",
            "name": "autotagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Autotag` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autotag"
                }
              }
            },
            "description": "The returned resource is a single `Autotag`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "autotag_read"
            ]
          }
        ],
        "summary": "Get Autotag",
        "tags": [
          "Autotags"
        ]
      },
      "put": {
        "description": "Endpoint to update the settings of a specific `Autotag`.",
        "operationId": "autotag-update",
        "parameters": [
          {
            "in": "path",
            "name": "autotagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Autotag` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAutotag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autotag"
                }
              }
            },
            "description": "The returned resource is a single `Autotag`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "autotag_write"
            ]
          }
        ],
        "summary": "Update Autotag",
        "tags": [
          "Autotags"
        ]
      }
    },
    "/business/v2/cards/{cardId}/rules": {
      "get": {
        "description": "Endpoint to get the `CardRules` of the `Card`.",
        "operationId": "card-rules-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleList"
                }
              }
            },
            "description": "The returned resource is a list of `CardRule`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Card Rules",
        "tags": [
          "Card Rules"
        ]
      },
      "put": {
        "description": "Endpoint to set the `CardRules`.",
        "operationId": "card-rules-set",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRules"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleList"
                }
              }
            },
            "description": "The result is a list of `CardRule`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Set Card Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "name, enabled, token"
        }
      }
    },
    "/business/v2/cards/{cardId}/rules/cashpoint": {
      "get": {
        "description": "Endpoint to get the `CardRuleCashPointRules` of the `Card`.",
        "operationId": "card-rule-cashpoint-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleCashPointRules"
                }
              }
            },
            "description": "The result is a `CardRuleCashPointRules`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get CashPoint Rules",
        "tags": [
          "Card Rules"
        ]
      }
    },
    "/business/v2/cards/{cardId}/rules/cashpoint/{limitName}": {
      "delete": {
        "description": "Endpoint to unset a `CardRuleCashPointRule` of the `Card`.",
        "operationId": "card-rule-cashpoint-unset",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "limitName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CardRuleCashPointLimitName"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleCashPointRule"
                }
              }
            },
            "description": "The result is a single `CardRuleCashPointRule`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Unset CashPoint Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, limitName, token"
        }
      },
      "post": {
        "description": "Endpoint to set a `CardRuleCashPointRule` of the `Card`.",
        "operationId": "card-rule-cashpoint-set",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "limitName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CardRuleCashPointLimitName"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRuleCashPoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleCashPointRule"
                }
              }
            },
            "description": "The result is a `CardRuleCashPointRules`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Set CashPoint Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "max, enabled, token"
        }
      }
    },
    "/business/v2/cards/{cardId}/rules/countries": {
      "get": {
        "description": "Endpoint to get the `CardRuleCountries` of the `Card`.",
        "operationId": "card-rule-countries-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleCountries"
                }
              }
            },
            "description": "The results is `CardRuleCountries`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Countries Rules",
        "tags": [
          "Card Rules"
        ]
      },
      "post": {
        "description": "Endpoint to set the `CardRuleCountries` of the `Card`.",
        "operationId": "card-rule-countries-set",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRuleCountries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleCountries"
                }
              }
            },
            "description": "The results is `CardRuleCountries`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Set Countries Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, request_timestamp, token"
        }
      }
    },
    "/business/v2/cards/{cardId}/rules/merchantCategories": {
      "get": {
        "description": "Endpoint to get the `CardRuleMerchantCategories` of the `Card`.",
        "operationId": "card-rule-merchant-categories-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleMerchantCategories"
                }
              }
            },
            "description": "The result is a `CardRuleMerchantCategories`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Merchant Categories Rules",
        "tags": [
          "Card Rules"
        ]
      },
      "post": {
        "description": "Endpoint to set the `CardRuleMerchantCategories` of the `Card`.",
        "operationId": "card-rule-merchant-categories-set",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRuleMerchantCategories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleMerchantCategories"
                }
              }
            },
            "description": "The result is a `CardRuleMerchantCategories`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Set Merchant Categories Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, request_timestamp, token"
        }
      }
    },
    "/business/v2/cards/{cardId}/rules/spendingLimits": {
      "get": {
        "description": "Endpoint to get the `CardRuleSpendingLimitsRules` of the `Card`.",
        "operationId": "card-rule-spending-limits-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleSpendingLimitsRules"
                }
              }
            },
            "description": "The result is a `CardRuleSpendingLimitsRules`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Spending Limits Rules",
        "tags": [
          "Card Rules"
        ]
      }
    },
    "/business/v2/cards/{cardId}/rules/spendingLimits/{limitName}": {
      "delete": {
        "description": "Endpoint to unset the `CardRuleSpendingLimitsRule`  of the `Card`.",
        "operationId": "card-rule-spending-limits-unset",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "limitName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CardRuleSpendingLimitsLimitName"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleSpendingLimitsRule"
                }
              }
            },
            "description": "The result is a single `CardRuleSpendingLimitsRule`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Unset Spending Limits Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, limitName, token"
        }
      },
      "post": {
        "description": "Endpoint to set the `CardRuleSpendingLimitsRules` of the `Card`.",
        "operationId": "card-rule-spending-limits-set",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "limitName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CardRuleSpendingLimitsLimitName"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRuleSpendingLimit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRuleSpendingLimitsRule"
                }
              }
            },
            "description": "The result is a single `CardRuleSpendingLimitsRule`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Set Spending Limits Rules",
        "tags": [
          "Card Rules"
        ],
        "x-soldo": {
          "fingerprint-order": "max, enabled, token"
        }
      }
    },
    "/business/v2/cards/presets": {
      "get": {
        "description": "Endpoint to find `CardRulePresets` using filtering parameters.",
        "operationId": "card-rule-preset-search",
        "parameters": [
          {
            "description": "the currency of the `CardRulePreset`.",
            "example": "EUR",
            "in": "query",
            "name": "currency",
            "schema": {
              "type": [
                "array"
              ],
              "description": "the currency of the `CardRulePreset`.",
              "items": {
                "$ref": "#/components/schemas/ISO4217Currency"
              }
            }
          },
          {
            "description": "The name of the `CardRulePreset`.",
            "example": "DefaultPreset",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `CardRulePreset`.",
              "example": "DefaultPreset"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRulePresets"
                }
              }
            },
            "description": "The results array contains `CardRulePreset`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Search Presets",
        "tags": [
          "Card Rules Presets"
        ]
      }
    },
    "/business/v2/cards/presets/{presetId}": {
      "delete": {
        "description": "Endpoint to delete a `CardRulePreset` by ID.",
        "operationId": "card-rule-preset-delete",
        "parameters": [
          {
            "description": "The `CardRulePreset` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Delete Preset",
        "tags": [
          "Card Rules Presets"
        ]
      },
      "get": {
        "description": "Endpoint to get a `CardRulePreset` by ID.",
        "operationId": "card-rule-preset-get",
        "parameters": [
          {
            "description": "The `CardRulePreset` ID",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRulePreset"
                }
              }
            },
            "description": "The returned resource is a `CardRulePreset`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Preset",
        "tags": [
          "Card Rules Presets"
        ]
      }
    },
    "/business/v2/cards/{cardId}/presets/{presetId}": {
      "delete": {
        "description": "Endpoint to remove a `CardRulePreset` from a `Card`.",
        "operationId": "card-rule-preset-unset",
        "parameters": [
          {
            "description": "The `Card` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          },
          {
            "description": "The `CardRulePreset` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Remove Preset from Card",
        "tags": [
          "Card Rules Presets"
        ]
      },
      "put": {
        "description": "Endpoint to add a `CardRulePreset` to a `Card`.",
        "operationId": "card-rule-preset-set",
        "parameters": [
          {
            "description": "The `Card` ID",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          },
          {
            "description": "The `CardRulePreset` ID",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "presetId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ]
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Add Preset to Card",
        "tags": [
          "Card Rules Presets"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, presetId, token"
        }
      }
    },
    "/business/v2/cards": {
      "get": {
        "description": "Endpoint to find `Cards` using filtering parameters.",
        "operationId": "card-search",
        "parameters": [
          {
            "description": "The type of a resource the `Card` is attached to.",
            "example": "wallet",
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/CardAttachedResourceType"
            }
          },
          {
            "description": "The ID of the `type` resource (it's not applicable for `company` resource; it's not required for `employees`).",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "publicId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `type` resource (it's not applicable for `company` resource; it's not required for `employees`).",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The custom reference ID of the `type` resource.",
            "example": "123456-user-1",
            "in": "query",
            "name": "customreferenceId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The custom reference ID of the `type` resource.",
              "example": "123456-user-1"
            }
          },
          {
            "description": "One among the available `Card` statuses of a `Card`.",
            "example": "Normal",
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/CardStatus"
            }
          },
          {
            "description": "The ID of the `Group` the `Card` is related to.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `Group` the `Card` is related to.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The name of the `Card`.",
            "example": "CardName",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `Card`.",
              "example": "CardName"
            }
          },
          {
            "description": "The label of the `Card`.",
            "example": "CardLabel",
            "in": "query",
            "name": "label",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The label of the `Card`.",
              "example": "CardLabel"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cards"
                }
              }
            },
            "description": "The result is an array containing `Cards`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Search Cards",
        "tags": [
          "Cards"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Card`. The created `Card` has the same currency of the `Wallet` it belongs to.",
        "operationId": "card-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The returned resource is a single `Order`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Add Card",
        "tags": [
          "Cards"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, owner_type, owner_public_id, wallet_id, address_id, vehicle_id, token"
        }
      }
    },
    "/business/v2/cards/{cardId}": {
      "delete": {
        "description": "Endpoint to delete a `Card`.",
        "operationId": "card-delete",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Delete Card",
        "tags": [
          "Cards"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `Card` by ID.",
        "operationId": "card-get",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "query",
            "name": "showSensitiveData",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether to show `Card` sensitive data."
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "The returned resource is a single `Card`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_read"
            ]
          }
        ],
        "summary": "Get Card",
        "tags": [
          "Cards"
        ]
      },
      "put": {
        "description": "Endpoint to add and remove assignees for company `Cards`.",
        "operationId": "card-update",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "The returned resource is a single `Card`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write"
            ]
          }
        ],
        "summary": "Update Card",
        "tags": [
          "Cards"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, join(addCardAssignees), join(removeCardAssignees), label, vehicle_id, token"
        }
      }
    },
    "/business/v2/cards/{cardId}/move/{newWalletId}": {
      "put": {
        "description": "Endpoint to switch the `Card` `Wallet`.",
        "operationId": "card-wallet-switch",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Card` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "newWalletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The new `Wallet` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "The returned resource is a single `Card`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "card_write",
              "wallet_write"
            ]
          }
        ],
        "summary": "Switch Card Wallet",
        "tags": [
          "Cards"
        ],
        "x-soldo": {
          "fingerprint-order": "cardId, newWalletId, token"
        }
      }
    },
    "/business/v2/company": {
      "get": {
        "description": "Endpoint to retrieve one's own `Company` info.",
        "operationId": "company-get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            },
            "description": "The returned resource is one's own `Company`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "company_read"
            ]
          }
        ],
        "summary": "Get Company",
        "tags": [
          "Company"
        ]
      }
    },
    "/business/v2/contacts": {
      "get": {
        "description": "Endpoint to search `Contacts` using filtering parameters.",
        "operationId": "contact-search",
        "parameters": [
          {
            "description": "The status of the `Contact`.",
            "example": "CREATED",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of the `Contact`.",
              "items": {
                "$ref": "#/components/schemas/ContactStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The name of the `Contact`.",
            "example": "John",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The name of the `Contact`.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The name of the `Contact`."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The type of the `Contact`.",
            "example": "SUPPLIER",
            "in": "query",
            "name": "type",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The type of the `Contact`.",
              "items": {
                "$ref": "#/components/schemas/ContactType"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) countries of the `Contact`.",
            "example": "ITA",
            "in": "query",
            "name": "countries",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) countries of the `Contact`.",
              "items": {
                "$ref": "#/components/schemas/ISO3166Country"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The ID of the `User` the bank details are assigned.",
            "example": "XMPL1234-000001",
            "in": "query",
            "name": "user",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the `User` the bank details are assigned.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the `User` the bank details are assigned."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contacts"
                }
              }
            },
            "description": "The returned result is a list of `Contacts`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "contact_read"
            ]
          }
        ],
        "summary": "Search Contacts",
        "tags": [
          "Contacts"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Contact`.",
        "operationId": "contact-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            },
            "description": "The returned resource is a single `Contact`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "contact_write"
            ]
          }
        ],
        "summary": "Add Contact",
        "tags": [
          "Contacts"
        ],
        "x-soldo": {
          "fingerprint-order": "name, type, country, join(concat(account_info.type, account_info.identification)),userId, token"
        }
      }
    },
    "/business/v2/contacts/{contactId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Contact`.",
        "operationId": "contact-delete",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Contact` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "contact_write"
            ]
          }
        ],
        "summary": "Delete Contact",
        "tags": [
          "Contacts"
        ]
      },
      "get": {
        "description": "Endpoint to get specific `Contact` by ID.",
        "operationId": "contact-get",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Contact` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            },
            "description": "The returned resource is a single `Contact`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "contact_write"
            ]
          }
        ],
        "summary": "Get Contact",
        "tags": [
          "Contacts"
        ]
      },
      "put": {
        "description": "Endpoint to update `Contact`.",
        "operationId": "contact-update",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Contact` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            },
            "description": "The returned resource is a single `Contact`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "contact_write"
            ]
          }
        ],
        "summary": "Update Contact",
        "tags": [
          "Contacts"
        ],
        "x-soldo": {
          "fingerprint-order": "contactId, type, join(concat(account_info.type, account_info.identification)),userId, token"
        }
      }
    },
    "/business/v2/entities/expense-category/{expenseCategoryId}": {
      "delete": {
        "description": "Endpoint to delete a specific `ExpenseCategory`.",
        "operationId": "expense-category-delete",
        "parameters": [
          {
            "in": "path",
            "name": "expenseCategoryId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseCategory` ID.",
              "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_category_write"
            ]
          }
        ],
        "summary": "Delete Expense Category",
        "tags": [
          "Expense Categories"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `ExpenseCategory` by ID.",
        "operationId": "expense-category-get",
        "parameters": [
          {
            "in": "path",
            "name": "expenseCategoryId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseCategory` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategory"
                }
              }
            },
            "description": "The result is a single `ExpenseCategory`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_category_read"
            ]
          }
        ],
        "summary": "Get Expense Category",
        "tags": [
          "Expense Categories"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `ExpenseCategory`.",
        "operationId": "expense-category-update",
        "parameters": [
          {
            "in": "path",
            "name": "expenseCategoryId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseCategory` ID.",
              "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCategory"
                }
              }
            },
            "description": "The returned resource is a single `ExpenseCategory`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_category_write"
            ]
          }
        ],
        "summary": "Update Expense Category",
        "tags": [
          "Expense Categories"
        ]
      }
    },
    "/business/v2/expense-reports": {
      "get": {
        "description": "Endpoint to search `ExpenseReport` using filtering parameters.",
        "operationId": "expense-report-search",
        "parameters": [
          {
            "description": "The `ExpenseReport`number.",
            "example": "NR9912098",
            "in": "query",
            "name": "number",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReport`number.",
              "example": "NR9912098"
            }
          },
          {
            "description": "The ID of the `User` who made the expenses included in the expense report.",
            "example": "XMPL1234-000003",
            "in": "query",
            "name": "trxOwnerId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `User` who made the expenses included in the expense report.",
              "example": "XMPL1234-000003"
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "trxDateFrom",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "trxDateTo",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The `ExpenseReport` status.",
            "example": "PROCESSED",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `ExpenseReport` status.",
              "items": {
                "$ref": "#/components/schemas/ExpenseReportStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The `ExpenseReport` type.",
            "example": "EMPLOYEE",
            "in": "query",
            "name": "type",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `ExpenseReport` type.",
              "items": {
                "$ref": "#/components/schemas/ExpenseReportType"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It determines whether only reports with or without an amount to be reimbursed should be returned.",
            "example": true,
            "in": "query",
            "name": "toReimburse",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether only reports with or without an amount to be reimbursed should be returned.",
              "example": true
            }
          },
          {
            "description": "The date when the expense report got exported\n(Formats: yyyy-MM-dd, yyyy-MM-ddThh:mm:ss, yyyy-MM-ddThh:mm:ssZ).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "exportedDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReports"
                }
              }
            },
            "description": "The result is an array containing `ExpenseReport`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_report_read"
            ]
          }
        ],
        "summary": "Search Expense Reports",
        "tags": [
          "Expense Reports"
        ]
      }
    },
    "/business/v2/expense-reports/{expenseReportId}": {
      "delete": {
        "description": "Endpoint to delete a specific `ExpenseReport`.",
        "operationId": "expense-report-delete",
        "parameters": [
          {
            "in": "path",
            "name": "expenseReportId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReport` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_report_write"
            ]
          }
        ],
        "summary": "Delete Expense Report",
        "tags": [
          "Expense Reports"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific  `ExpenseReport` by ID.",
        "operationId": "expense-report-get",
        "parameters": [
          {
            "in": "path",
            "name": "expenseReportId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReport` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReport"
                }
              }
            },
            "description": "The result is a single  `ExpenseReport`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_report_read"
            ]
          }
        ],
        "summary": "Get Expense Report",
        "tags": [
          "Expense Reports"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `ExpenseReport`.",
        "operationId": "expense-report-update",
        "parameters": [
          {
            "in": "path",
            "name": "expenseReportId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReport` ID .",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReport"
                }
              }
            },
            "description": "The returned resource is a single `ExpenseReport`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_report_write"
            ]
          }
        ],
        "summary": "Update Expense Report",
        "tags": [
          "Expense Reports"
        ]
      }
    },
    "/business/v2/expense-reports/{expenseReportId}/download": {
      "get": {
        "description": "Endpoint to download `ExpenseReport` by ID.",
        "operationId": "expense-report-download",
        "parameters": [
          {
            "in": "path",
            "name": "expenseReportId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReport` ID .",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The expense report file type.",
            "example": "PDF",
            "in": "query",
            "name": "fileType",
            "schema": {
              "$ref": "#/components/schemas/ExpenseReportFileType"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReportDownload"
                }
              }
            },
            "description": "The result is a URL to download `ExpenseReport`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_report_read"
            ]
          }
        ],
        "summary": "Download Expense Report",
        "tags": [
          "Expense Reports"
        ]
      }
    },
    "/business/v2/expense-review/configuration": {
      "get": {
        "description": "Endpoint to get `ExpenseReview` configuration",
        "operationId": "expense-review-configuration-get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewConfiguration"
                }
              }
            },
            "description": "The result is the configuration of `ExpenseReview` resource."
          },
          "400": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Get Expense Review Configuration",
        "tags": [
          "Expense Review Configuration"
        ]
      },
      "post": {
        "description": "Endpoint to add an `ExpenseReview` configuration.",
        "operationId": "expense-review-configuration-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExpenseReviewConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewConfiguration"
                }
              }
            },
            "description": "The returned resource is a single `ExpenseReview` configuration."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Add Expense Review Configuration",
        "tags": [
          "Expense Review Configuration"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `ExpenseReview` Configuration.",
        "operationId": "expense-review-configuration-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseReviewConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewConfiguration"
                }
              }
            },
            "description": "The returned resource is an `ExpenseReview` configuration."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Update Expense Review Configuration",
        "tags": [
          "Expense Review Configuration"
        ]
      }
    },
    "/business/v2/expense-review/processes": {
      "get": {
        "description": "Endpoint to search `ExpenseReviewProcesses`.",
        "operationId": "expense-review-processes-search",
        "parameters": [
          {
            "description": "The status of the `ExpenseReviewProcess`.",
            "example": "ACTIVE",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of the `ExpenseReviewProcess`.",
              "items": {
                "$ref": "#/components/schemas/ExpenseReviewProcessStatusSearch"
              }
            }
          },
          {
            "description": "A simple text to search `ExpenseReviewProcess` by `name` or `description`.",
            "example": "EXPENSE REVIEW PROCESS",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search `ExpenseReviewProcess` by `name` or `description`.",
              "example": "EXPENSE REVIEW PROCESS"
            }
          },
          {
            "description": "0",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewProcesses"
                }
              }
            },
            "description": "The result is an array containing `ExpenseReviewProcesses`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Search Expense Review Processes",
        "tags": [
          "Expense Review Processes"
        ]
      },
      "post": {
        "description": "Endpoint to add an `ExpenseReviewProcess`.",
        "operationId": "expense-review-process-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExpenseReviewProcess"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewProcess"
                }
              }
            },
            "description": "The result is a single `ExpenseReviewProcess`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Add Expense Review Process",
        "tags": [
          "Expense Review Processes"
        ]
      }
    },
    "/business/v2/expense-review/processes/priority": {
      "post": {
        "description": "Endpoint to change the `ExpenseReviewProcess` order of priority.",
        "operationId": "expense-review-process-priority-change",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseReviewProcessPriority"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Change Expense Review Processes Priority",
        "tags": [
          "Expense Review Processes"
        ]
      }
    },
    "/business/v2/expense-review/processes/recalculate": {
      "post": {
        "description": "Endpoint to recalculate the `ExpenseReviewProcess` a transaction is included into. This is particularly useful in case a change made on an `ExpenseReviewProcess` configuration should be applied to already existing transactions. In case a recalculated transaction is included into the same `ExpenseReviewProcess`, the transaction will remain assigned to the same approval step. This endpoint supports up to 100 transactions per single request.",
        "operationId": "expense-review-process-recalculate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecalculateExpenseReviewProcess"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Recalculate Expense Review Process ",
        "tags": [
          "Expense Review Processes"
        ]
      }
    },
    "/business/v2/expense-review/processes/{processId}": {
      "delete": {
        "description": "Endpoint to delete a `ExpenseReviewProcess`.",
        "operationId": "expense-review-process-delete",
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReviewProcess` ID.",
              "example": " 2d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Delete Expense Review Process",
        "tags": [
          "Expense Review Processes"
        ]
      },
      "get": {
        "description": "Endpoint to get the `ExpenseReviewProcess`.",
        "operationId": "expense-review-process-get",
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReviewProcess` ID.",
              "example": " 2d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewProcess"
                }
              }
            },
            "description": "The result is a single `ExpenseReviewProcess`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Get Expense Review Process",
        "tags": [
          "Expense Review Processes"
        ]
      },
      "put": {
        "description": "Be aware that any change made on the steps of an `ExpenseReviewProcess` configuration is not applied to already existing transactions. If you need to apply the changes to already existing transactions, you can use the [Recalculate Expense Review Processes](ref:expense-review-process-recalculate) endpoint. Also, the object returned upon update might have a different ID.",
        "operationId": "expense-review-process-update",
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReviewProcess` ID.",
              "example": " 2d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseReviewProcess"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewProcess"
                }
              }
            },
            "description": "The result is a single `ExpenseReviewProcess`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Update Expense Review Process",
        "tags": [
          "Expense Review Processes"
        ]
      }
    },
    "/business/v2/expense-review/processes/{processId}/status": {
      "put": {
        "description": "Endpoint to update a specific `ExpenseReviewProcess` status.",
        "operationId": "expense-review-process-status-update",
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseReviewProcess` ID.",
              "example": " 2d9f6514-4004-4122-b7f2-dcf7e034741c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseReviewProcessStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseReviewProcess"
                }
              }
            },
            "description": "The result is a single `ExpenseReviewProcess`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Update Expense Review Process Status",
        "tags": [
          "Expense Review Processes"
        ]
      }
    },
    "/business/v2/expense-review": {
      "get": {
        "description": "Endpoint to find users with `ExpenseReview` using filtering parameters.",
        "operationId": "expense-review-search",
        "parameters": [
          {
            "in": "query",
            "name": "delegatedBy",
            "schema": {
              "type": [
                "array"
              ],
              "description": "Filters expenses by the user who delegated them.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "Filters expenses by the user who delegated them."
              }
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "fromDate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z",
            "in": "query",
            "name": "toDate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "A text to search in the expenses reviewer name or surname.",
            "example": "John",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A text to search in the expenses reviewer name or surname.",
              "example": "John"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expenses"
                }
              }
            },
            "description": "The returned resource is an array of `Expenses`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Search Expense Reviews",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/expense-review/export-expenses/{userId}": {
      "post": {
        "description": "Endpoint to export the `ExpenseReview` of a single `User`.",
        "operationId": "expense-review-export",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportExpense"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportExpenseReview"
                }
              }
            },
            "description": "The result is data containing `ExpenseReview` export."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Export Expense Review",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/expense-review/{userId}": {
      "get": {
        "description": "Endpoint to get the `ExpenseReview` of a specific `User`.",
        "operationId": "expense-review-get",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `User`.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "description": "The status of the `ExpenseReview`.",
            "example": "APPROVED",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of the `ExpenseReview`.",
              "example": "APPROVED",
              "items": {
                "$ref": "#/components/schemas/ExpenseStatus"
              }
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z",
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It determines the filter by payment method of the transaction.",
            "example": "SUBSCRIPTION",
            "in": "query",
            "name": "paymentMethod",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It determines the filter by payment method of the transaction.",
              "items": {
                "$ref": "#/components/schemas/ExpensePaymentMethod"
              }
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseItem"
                }
              }
            },
            "description": "The returned resource is a `ExpenseReview`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Get Expense Review",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/expense-review/{userId}/reminder": {
      "post": {
        "description": "Endpoint to send a reminder of `ExpenseReview` to a specific `User`.",
        "operationId": "expense-review-reminder",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `User`.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendExpensesReminder"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_read"
            ]
          }
        ],
        "summary": "Send Expense Review Reminder",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/expense-review/change-type": {
      "put": {
        "description": "Endpoint to update the type of an `ExpenseReview`.",
        "operationId": "expense-review-update-type",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseType"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Update Expense Review Type",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/expense-review/request-info": {
      "put": {
        "description": "Endpoint to request info to an `User` about an `ExpenseReview`.",
        "operationId": "expense-review-request-info",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestExpenseInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Request Expense Review Info",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/expense-review/update-status": {
      "put": {
        "description": "Endpoint to update the status of an `ExpenseReview`.",
        "operationId": "expense-review-update-status",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "expense_review_write"
            ]
          }
        ],
        "summary": "Update Expense Review Status",
        "tags": [
          "Expense Reviews"
        ]
      }
    },
    "/business/v2/groups": {
      "get": {
        "description": "Endpoint to find `Groups` using filtering parameters.",
        "operationId": "group-search",
        "parameters": [
          {
            "description": "The `Group` reference in an external system.",
            "example": "hr-division-0001",
            "in": "query",
            "name": "customReferenceId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` reference in an external system.",
              "example": "hr-division-0001"
            }
          },
          {
            "description": "The `Group`'s type.",
            "example": "DIVISION",
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/GroupType"
            }
          },
          {
            "description": "The name of the `Group`.",
            "example": "HR",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `Group`.",
              "example": "HR"
            }
          },
          {
            "description": "The note of the `Group`.",
            "example": "division",
            "in": "query",
            "name": "note",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The note of the `Group`.",
              "example": "division"
            }
          },
          {
            "description": "A text contained in the name or note of the `Group`.",
            "example": "HR",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A text contained in the name or note of the `Group`.",
              "example": "HR"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            },
            "description": "The result is an array containing `Groups`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_read"
            ]
          }
        ],
        "summary": "Search Groups",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Group`.",
        "operationId": "group-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "The returned resource is a single `Group`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_write"
            ]
          }
        ],
        "summary": "Add Group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/business/v2/groups/{groupId}": {
      "delete": {
        "description": "Endpoint to delete a `Group`.",
        "operationId": "group-delete",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_write"
            ]
          }
        ],
        "summary": "Delete Group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `Group` by ID.",
        "operationId": "group-get",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "The returned resource is a single `Group`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_read"
            ]
          }
        ],
        "summary": "Get Group",
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `Group`.",
        "operationId": "group-update",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "The returned resource is a single `Group`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_write"
            ]
          }
        ],
        "summary": "Update Group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/business/v2/groups/{groupId}/resource": {
      "delete": {
        "description": "Endpoint to remove a resource from a `Group`.",
        "operationId": "group-resource-remove",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupResource"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_write"
            ]
          }
        ],
        "summary": "Remove resource from Group",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "description": "Endpoint to add a new resource to a `Group`.",
        "operationId": "group-resource-add",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Group` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupResource"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "group_write"
            ]
          }
        ],
        "summary": "Add resource to Group",
        "tags": [
          "Groups"
        ],
        "x-soldo": {
          "fingerprint-order": "groupId, type, token"
        }
      }
    },
    "/business/v2/dictionaries": {
      "get": {
        "description": "Endpoint to search `Lists` using filtering parameters.",
        "operationId": "list-search",
        "parameters": [
          {
            "in": "query",
            "name": "visible",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether the `List` is active.",
              "example": true
            }
          },
          {
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A text to search in the `List` data (name).",
              "example": "something"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDictionaries"
                }
              }
            },
            "description": "The result is an array containing `Lists`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_read"
            ]
          }
        ],
        "summary": "Search Lists",
        "tags": [
          "Lists"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `List`.",
        "operationId": "list-add",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "dictionary": {
                    "type": [
                      "string"
                    ],
                    "description": "The name of the `List`.",
                    "example": "CustomTransactionMetadata"
                  },
                  "required": {
                    "type": [
                      "boolean"
                    ],
                    "description": "It determines required.",
                    "example": false
                  },
                  "uniqueSelectTag": {
                    "type": [
                      "boolean"
                    ],
                    "description": "It determines whether multiple `Tags` of the `List` can be selected.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              }
            },
            "description": "The returned resource is a single `List`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Add List",
        "tags": [
          "Lists"
        ]
      }
    },
    "/business/v2/dictionaries/{listId}": {
      "delete": {
        "description": "Endpoint to delete a `List`.",
        "operationId": "list-delete",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Delete List",
        "tags": [
          "Lists"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `List` by ID.",
        "operationId": "list-get",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              }
            },
            "description": "The returned resource is a single `List`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_read"
            ]
          }
        ],
        "summary": "Get List",
        "tags": [
          "Lists"
        ]
      },
      "put": {
        "description": "Endpoint to update the configuration of a `List`.",
        "operationId": "list-update",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "dictionary": {
                    "type": [
                      "string"
                    ],
                    "description": "The name of the `List`.",
                    "example": "ExampleTagDictionary"
                  },
                  "required": {
                    "type": [
                      "boolean"
                    ],
                    "deprecated": true,
                    "description": "It determines whether it's required or not.",
                    "example": false
                  },
                  "uniqueSelectTag": {
                    "type": [
                      "boolean"
                    ],
                    "description": "It determines whether multiple `Tags` of the `List` can be selected.",
                    "example": false
                  },
                  "visible": {
                    "type": [
                      "boolean"
                    ],
                    "description": "It determines whether the `List` is active.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              }
            },
            "description": "The returned resource is a single `List`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Update List",
        "tags": [
          "Lists"
        ]
      }
    },
    "/business/v2/dictionaries/{listId}/tags": {
      "get": {
        "description": "Endpoint to search `Tags` in a given `List` using filtering parameters.",
        "operationId": "tag-search",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "query",
            "name": "visible",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether the `Tag` is visible in the `Transaction` detail.",
              "example": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `Tag` to search.",
              "example": "something"
            }
          },
          {
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The text of the `Tag` to search by name or description.",
              "example": "something"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tags"
                }
              }
            },
            "description": "The result is an array containing `Tags`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_read"
            ]
          }
        ],
        "summary": "Search Tags",
        "tags": [
          "Lists"
        ]
      },
      "post": {
        "description": "Endpoint to add a `Tag` into a `List`.",
        "operationId": "tag-add",
        "parameters": [
          {
            "description": "The `List` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "description": {
                    "type": [
                      "string"
                    ],
                    "description": "The description of the `Tag`. If needed to support special characters, provide the character encoding in the `Content-Type` header (e.g. `application/x-www-form-urlencoded ; charset=utf-8`).",
                    "example": "Label to mark transactions"
                  },
                  "tag": {
                    "type": [
                      "string"
                    ],
                    "description": "The name of the `Tag`.",
                    "example": "tx-label"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "The returned resource is a single `Tag`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Add Tag to List",
        "tags": [
          "Tags"
        ]
      }
    },
    "/business/v2/online-ads": {
      "get": {
        "description": "Endpoint to search `OnlineAds` using filtering parameters.",
        "operationId": "online-ads-search",
        "parameters": [
          {
            "description": "A simple text to search in the `OnlineAds` data (name, description, assignee name).",
            "example": "onlinename",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the `OnlineAds` data (name, description, assignee name).",
              "example": "onlinename"
            }
          },
          {
            "description": "The `OnlineAds` platform.",
            "example": "GOOGLE",
            "in": "query",
            "name": "platforms",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `OnlineAds` platform.",
              "items": {
                "$ref": "#/components/schemas/OnlineAdsPlatform"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The `OnlineAds` assignees.",
            "example": "XMPL1234-000005",
            "in": "query",
            "name": "assignees",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `OnlineAds` assignees.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The `OnlineAds` assignees."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The Online Ad status.",
            "example": "ACTIVE",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The Online Ad status.",
              "items": {
                "$ref": "#/components/schemas/OnlineAdsStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAdsList"
                }
              }
            },
            "description": "The result is an array containing `OnlineAds`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_read"
            ]
          }
        ],
        "summary": "Search Online Ads",
        "tags": [
          "Online Ads"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `OnlineAd`.",
        "operationId": "online-ads-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOnlineAds"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAdsList"
                }
              }
            },
            "description": "The result is an `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Add Online Ads",
        "tags": [
          "Online Ads"
        ],
        "x-soldo": {
          "fingerprint-order": "name, platform, wallet_id, token"
        }
      }
    },
    "/business/v2/online-ads/{onlineAdId}": {
      "delete": {
        "description": "Endpoint to delete a specific `OnlineAd`.",
        "operationId": "online-ads-delete",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Delete Online Ads",
        "tags": [
          "Online Ads"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `OnlineAd` by ID.",
        "operationId": "online-ads-get",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAds"
                }
              }
            },
            "description": "The result is a single `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_read"
            ]
          }
        ],
        "summary": "Get Online Ads",
        "tags": [
          "Online Ads"
        ]
      },
      "post": {
        "description": "Endpoint to activate a specific `OnlineAd`.",
        "operationId": "online-ads-activate",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The `Order` of the reserved `Card` for the `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Activate Online Ads",
        "tags": [
          "Online Ads"
        ],
        "x-soldo": {
          "fingerprint-order": "id, token"
        }
      },
      "put": {
        "description": "Endpoint to update a specific `OnlineAd`.",
        "operationId": "online-ads-update",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOnlineAds"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAds"
                }
              }
            },
            "description": "The returned resource is a single `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Update Online Ads",
        "tags": [
          "Online Ads"
        ],
        "x-soldo": {
          "fingerprint-order": "id, name, wallet_id, token"
        }
      }
    },
    "/business/v2/online-ads/{onlineAdId}/addAssignees": {
      "put": {
        "description": "Endpoint to add assignees to an `OnlineAd`.",
        "operationId": "online-ads-assignees-add",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssignees"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAds"
                }
              }
            },
            "description": "The returned resource is a single `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Add assignees to Online Ads",
        "tags": [
          "Online Ads"
        ],
        "x-soldo": {
          "fingerprint-order": "id, token"
        }
      }
    },
    "/business/v2/online-ads/{onlineAdId}/removeAssignees": {
      "put": {
        "description": "Endpoint to remove assignees from an `OnlineAd`.",
        "operationId": "online-ads-assignees-remove",
        "parameters": [
          {
            "in": "path",
            "name": "onlineAdId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `OnlineAd` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAssignees"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAds"
                }
              }
            },
            "description": "The returned resource is a single `OnlineAd`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "online_ads_write"
            ]
          }
        ],
        "summary": "Remove assignees from Online Ads",
        "tags": [
          "Online Ads"
        ]
      }
    },
    "/business/v2/orders": {
      "get": {
        "description": "Endpoint to retrieve your `Orders`.",
        "operationId": "order-search",
        "parameters": [
          {
            "description": "The `Order` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "id",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Order` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The status of the `Order`.",
            "example": "PENDING",
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z",
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            },
            "description": "The result is an array containing `Orders`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "company_read"
            ]
          }
        ],
        "summary": "Search Orders",
        "tags": [
          "Orders"
        ]
      }
    },
    "/business/v2/orders/{orderId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Order`. Only resource in ERROR or PLACED status can be deleted.",
        "operationId": "order-delete",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Order` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "company_write"
            ]
          }
        ],
        "summary": "Delete Order",
        "tags": [
          "Orders"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `Order`.",
        "operationId": "order-get",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Order` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The returned resource is a single `Order`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "order_read"
            ]
          }
        ],
        "summary": "Get Order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/business/v2/employees/out-of-office": {
      "get": {
        "description": "Endpoint to search `out_of_office` using filtering parameters.",
        "operationId": "out-of-office-search",
        "parameters": [
          {
            "description": "The ID of the person assigning the `out_of_office`.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "delegatorId",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the person assigning the `out_of_office`.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the person assigning the `out_of_office`."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The ID of the person covering for the delegator.",
            "example": "33333333-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "delegateId",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the person covering for the delegator.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the person covering for the delegator."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "Defines when the out_of_office entry starts. fromDate included. (i.e. greater than or equal to) (Format:`yyyy-MM-dd`).",
            "example": "2025-03-05",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "type": [
                "string"
              ],
              "description": "Defines when the out_of_office entry starts. fromDate included. (i.e. greater than or equal to) (Format:`yyyy-MM-dd`).",
              "example": "2025-03-05"
            }
          },
          {
            "description": "Defines when the out_of_office entry ends, toDate included. (i.e. less than) (Format:`yyyy-MM-ddThh:mm:ssZ`,represents a UTC timezone).",
            "example": "2025-03-07",
            "in": "query",
            "name": "toDate",
            "schema": {
              "type": [
                "string"
              ],
              "description": "Defines when the out_of_office entry ends, toDate included. (i.e. less than) (Format:`yyyy-MM-ddThh:mm:ssZ`,represents a UTC timezone).",
              "example": "2025-03-07"
            }
          },
          {
            "description": "The status of `out_of_office`.",
            "example": "ACTIVE",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of `out_of_office`.",
              "items": {
                "$ref": "#/components/schemas/DelegationStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The features of `out_of_office`.",
            "example": "EXPENSE_REVIEW",
            "in": "query",
            "name": "feature",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The features of `out_of_office`.",
              "items": {
                "$ref": "#/components/schemas/DelegationFeature"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfOfficeDelegations"
                }
              }
            },
            "description": "The result is an array containing `out_of_office`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "out_of_office_delegation_read"
            ]
          }
        ],
        "summary": "Search Out of Office",
        "tags": [
          "Out of Office"
        ]
      },
      "post": {
        "description": "Endpoint to add an `out_of_office`.",
        "operationId": "out-of-office-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutOfOfficeDelegation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfOfficeDelegation"
                }
              }
            },
            "description": "The result is a single `out_of_office`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "out_of_office_delegation_write"
            ]
          }
        ],
        "summary": "Add Out of Office",
        "tags": [
          "Out of Office"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, from_date, to_date, delegator_id, delegate_id, feature, token"
        }
      }
    },
    "/business/v2/employees/out-of-office/{out_of_office_id}": {
      "delete": {
        "description": "Endpoint to delete a specific `out_of_office`.",
        "operationId": "out-of-office-delete",
        "parameters": [
          {
            "in": "path",
            "name": "out_of_office_id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `out_of_office` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "out_of_office_delegation_write"
            ]
          }
        ],
        "summary": "Delete Out of Office",
        "tags": [
          "Out of Office"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `out_of_office` by ID.",
        "operationId": "out-of-office-get",
        "parameters": [
          {
            "in": "path",
            "name": "out_of_office_id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `out_of_office` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfOfficeDelegation"
                }
              }
            },
            "description": "The result is a single `out_of_office`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "out_of_office_delegation_read"
            ]
          }
        ],
        "summary": "Get Out of Office",
        "tags": [
          "Out of Office"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `out_of_office`.",
        "operationId": "out-of-office-update",
        "parameters": [
          {
            "in": "path",
            "name": "out_of_office_id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `out_of_office` ID .",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutOfOfficeDelegation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfOfficeDelegation"
                }
              }
            },
            "description": "The returned resource is a single `out_of_office`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "out_of_office_delegation_write"
            ]
          }
        ],
        "summary": "Update Out of Office",
        "tags": [
          "Out of Office"
        ],
        "x-soldo": {
          "fingerprint-order": "id, request_timestamp, from_date, to_date, delegate_id, feature, token"
        }
      }
    },
    "/business/v2/contacts/{contactId}/make-payment": {
      "post": {
        "description": "Endpoint to make a `Payment` in favor of a `Contact`",
        "operationId": "payment-make",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Contact` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": "The returned resource is a single `Payment`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "payment_write"
            ]
          }
        ],
        "summary": "Make Payment",
        "tags": [
          "Pay Someone"
        ],
        "x-soldo": {
          "fingerprint-order": "contactId, idempotencyId, walletId, schema, reference, amount, token"
        }
      }
    },
    "/business/v2/roles": {
      "get": {
        "description": "Endpoint to retrieve all `User` `Roles`.",
        "operationId": "roles-list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoles"
                }
              }
            },
            "description": "The result is an array of `UserRoles`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "role_read"
            ]
          }
        ],
        "summary": "Get Roles",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/business/v2/purchases": {
      "get": {
        "description": "Endpoint to find `Purchases` using filtering parameters.",
        "operationId": "pre-approved-spend-search",
        "parameters": [
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z",
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
            "example": "COMPLETED_TIME",
            "in": "query",
            "name": "dateType",
            "schema": {
              "$ref": "#/components/schemas/SearchPurchaseDateType"
            }
          },
          {
            "description": "The status of the `Purchase`.",
            "example": "ACTIVE",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of the `Purchase`.",
              "items": {
                "$ref": "#/components/schemas/PurchaseStatus"
              }
            }
          },
          {
            "description": "A simple text to search in the `Purchase` data (`title`, `description`, `assignees`).",
            "example": "something",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the `Purchase` data (`title`, `description`, `assignees`).",
              "example": "something"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchases"
                }
              }
            },
            "description": "The result is an array containing `Purchases`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "purchase_read"
            ]
          }
        ],
        "summary": "Search Purchases",
        "tags": [
          "Pre-approved Spend"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Purchase`.",
        "operationId": "pre-approved-spend-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchase"
                }
              }
            },
            "description": "The returned resource is a single `Purchase`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "purchase_write"
            ]
          }
        ],
        "summary": "Add Purchase",
        "tags": [
          "Pre-approved Spend"
        ],
        "x-soldo": {
          "fingerprint-order": "title, assignee_id, wallet_id, amount, description, token"
        }
      }
    },
    "/business/v2/purchases/{purchaseId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Purchase`.",
        "operationId": "pre-approved-spend-delete",
        "parameters": [
          {
            "in": "path",
            "name": "purchaseId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Purchase` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "purchase_write"
            ]
          }
        ],
        "summary": "Delete Purchase",
        "tags": [
          "Pre-approved Spend"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `Purchase` by ID.",
        "operationId": "pre-approved-spend-get",
        "parameters": [
          {
            "in": "path",
            "name": "purchaseId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Purchase` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchase"
                }
              }
            },
            "description": "The returned resource is a single `Purchase`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "purchase_read"
            ]
          }
        ],
        "summary": "Get Purchases",
        "tags": [
          "Pre-approved Spend"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific `Purchase`.",
        "operationId": "pre-approved-spend-update",
        "parameters": [
          {
            "in": "path",
            "name": "purchaseId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Purchase` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePurchase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchase"
                }
              }
            },
            "description": "The returned resource is a single `Purchase`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "purchase_write"
            ]
          }
        ],
        "summary": "Update Purchase",
        "tags": [
          "Pre-approved Spend"
        ],
        "x-soldo": {
          "fingerprint-order": "purchaseId, title, description,max_tx_number, token"
        }
      }
    },
    "/business/v2/refueling": {
      "get": {
        "description": "Endpoint to search `Refuelings` using filtering parameters.",
        "operationId": "refueling-search",
        "parameters": [
          {
            "description": "The resource `type` to be used together with publicId.",
            "example": "card",
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/RefuelingType"
            }
          },
          {
            "description": "The ID of the `type` resource.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "query",
            "name": "publicId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `type` resource.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-04-06T12:48:40Z",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "2020-05-07T12:48:40Z",
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
            "example": "TRANSACTION",
            "in": "query",
            "name": "dateType",
            "schema": {
              "$ref": "#/components/schemas/TransactionDateType"
            }
          },
          {
            "description": "The [ISO 3166-1 alpha-3](https://www.iso.org/obp/ui/#search/code/) code of the country where the `Transaction` was made.",
            "example": "GBR",
            "in": "query",
            "name": "txCountry",
            "schema": {
              "$ref": "#/components/schemas/ISO3166Country"
            }
          },
          {
            "description": "A list of statuses the searched `Transactions` should be in.",
            "example": "Authorised",
            "in": "query",
            "name": "txStatus",
            "schema": {
              "type": [
                "array"
              ],
              "description": "A list of statuses the searched `Transactions` should be in.",
              "items": {
                "$ref": "#/components/schemas/TransactionStatus"
              }
            }
          },
          {
            "description": "The fuel type specified on the `Transaction`.",
            "example": "PETROL",
            "in": "query",
            "name": "txFuelType",
            "schema": {
              "$ref": "#/components/schemas/FuelType"
            }
          },
          {
            "description": "It determines whether to show further Fuel Details of the `Transaction`.",
            "example": true,
            "in": "query",
            "name": "showFuelDetails",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether to show further Fuel Details of the `Transaction`.",
              "example": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refuelings"
                }
              }
            },
            "description": "The result is an array containing `Refuelings`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Search Refueling Transactions",
        "tags": [
          "Refueling Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "type, publicId, fromDate, toDate, dateType, txCountry, txStatus, txFuelType, token"
        }
      }
    },
    "/business/v2/refueling/{refuelingId}": {
      "get": {
        "description": "Endpoint to get a specific `Refueling` by ID.",
        "operationId": "refueling-get",
        "parameters": [
          {
            "in": "path",
            "name": "refuelingId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Refueling` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refueling"
                }
              }
            },
            "description": "The returned resource is a single `Refueling`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Get Refueling Transaction",
        "tags": [
          "Refueling Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "refuelingId, token"
        }
      },
      "put": {
        "description": "Endpoint to update a specific `Refueling` by ID.",
        "operationId": "refueling-update",
        "parameters": [
          {
            "in": "path",
            "name": "refuelingId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Refueling` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRefueling"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refueling"
                }
              }
            },
            "description": "The returned resource is a single `Refueling`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Update Refueling Transaction",
        "tags": [
          "Refueling Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "refuelingId, mileage, quantity, txFuelType, unitPrice, token"
        }
      }
    },
    "/business/v2/resource-sets": {
      "get": {
        "description": "Endpoint to search `ResourceSet` using filtering parameters.",
        "operationId": "resource-set-search",
        "parameters": [
          {
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A free text search in the `ResourceSet` data",
              "example": "Resource set 01"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceSet"
                  }
                }
              }
            },
            "description": "The result is an array containing `ResourceSets`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "resource_set_read"
            ]
          }
        ],
        "summary": "Search Resource Sets",
        "tags": [
          "Resource Sets"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `ResourceSet`.",
        "operationId": "resource-set-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSet"
                }
              }
            },
            "description": "The returned resource is a single `ResourceSet`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "resource_set_write"
            ]
          }
        ],
        "summary": "Add Resource Set",
        "tags": [
          "Resource Sets"
        ],
        "x-soldo": {
          "fingerprint-order": "name, description, token"
        }
      }
    },
    "/business/v2/resource-sets/{id}": {
      "delete": {
        "description": "Endpoint to delete a specific `ResourceSet` by ID.",
        "operationId": "resource-set-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ResourceSet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "resource_set_write"
            ]
          }
        ],
        "summary": "Delete Resource Set",
        "tags": [
          "Resource Sets"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `ResourceSet` by ID.",
        "operationId": "resource-set-get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ResourceSet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSet"
                }
              }
            },
            "description": "The returned resource is a single `ResourceSet`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "resource_set_read"
            ]
          }
        ],
        "summary": "Get Resource Set",
        "tags": [
          "Resource Sets"
        ]
      },
      "put": {
        "description": "Endpoint to update a `ResourceSet`.",
        "operationId": "resource-set-update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ResourceSet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSet"
                }
              }
            },
            "description": "The returned resource is a single `ResourceSet`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "resource_set_write"
            ]
          }
        ],
        "summary": "Update Resource Set",
        "tags": [
          "Resource Sets"
        ],
        "x-soldo": {
          "fingerprint-order": "resourceSetId, name, description, token"
        }
      }
    },
    "/business/v2/statements": {
      "get": {
        "description": "Endpoint to find `Statements` available for download using filtering parameters.",
        "operationId": "statement-search",
        "parameters": [
          {
            "description": "The year to search for `Statements`.",
            "example": 2025,
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": [
                "array"
              ],
              "description": "The year to search for `Statements`.",
              "items": {
                "type": [
                  "integer"
                ],
                "format": "int32",
                "description": "The year to search for `Statements`."
              }
            }
          },
          {
            "description": "The [ISO 4217](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) code of the currency of the `Statement` to search for.",
            "example": "EUR",
            "in": "query",
            "name": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ISO4217SupportedCurrency"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statements"
                }
              }
            },
            "description": "The result array contains `Statements` available for download."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "statement_read"
            ]
          }
        ],
        "summary": "Search Statements",
        "tags": [
          "Statements"
        ]
      }
    },
    "/business/v2/statements/download": {
      "post": {
        "description": "Endpoint to retrieve the presigned url to download a `Statement`.",
        "operationId": "statement-download",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DownloadStatement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementDownloadUrl"
                }
              }
            },
            "description": "The returned resource is a `Statement` presigned url."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "statement_read"
            ]
          }
        ],
        "summary": "Download Statement",
        "tags": [
          "Statements"
        ]
      }
    },
    "/business/v2/subscriptions": {
      "get": {
        "description": "Endpoint to find `Subscriptions` using filtering parameters.",
        "operationId": "subscription-search",
        "parameters": [
          {
            "description": "A simple text to search in the Subscription data (name, description, assignee name).",
            "example": "something",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the Subscription data (name, description, assignee name).",
              "example": "something"
            }
          },
          {
            "description": "The `Subscription` assignees.",
            "example": "XMPL1234-000005",
            "in": "query",
            "name": "assignees",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `Subscription` assignees.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The `Subscription` assignees."
              }
            }
          },
          {
            "description": "The `Subscription` status.",
            "example": "ACTIVE",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The `Subscription` status.",
              "items": {
                "$ref": "#/components/schemas/SubscriptionStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                }
              }
            },
            "description": "The returned result is an array containing `Subscriptions`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_read"
            ]
          }
        ],
        "summary": "Search Subscriptions",
        "tags": [
          "Subscriptions"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Subscription`.",
        "operationId": "subscription-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": "The returned resource is a `Subscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Add Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "name, platform, wallet_id, payment_frequency, token"
        }
      }
    },
    "/business/v2/subscriptions/{subscriptionId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Subscription`.",
        "operationId": "subscription-delete",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Delete Subscription",
        "tags": [
          "Subscriptions"
        ]
      },
      "get": {
        "operationId": "subscription-get",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` ID",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": "The returned resource is a `Subscription`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_read"
            ]
          }
        ],
        "summary": "Get Subscription",
        "tags": [
          "Subscriptions"
        ]
      },
      "post": {
        "description": "Endpoint to activate a specific `Subscription`.",
        "operationId": "subscription-activate",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The returned resource is an `Order`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Activate Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "id, token"
        }
      },
      "put": {
        "description": "Endpoint to update a specific `Subscription`.",
        "operationId": "subscription-update",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` id.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": "The returned resource is a `Subscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Update Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "id, name, wallet_id, payment_frequency, token"
        }
      }
    },
    "/business/v2/subscriptions/{subscriptionId}/addAssignees": {
      "put": {
        "description": "Endpoint to add assignees to a `Subscription`.",
        "operationId": "subscription-assignees-add",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssignees"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": "The returned resource is a `Subscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Add assignees to Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "id, token"
        }
      }
    },
    "/business/v2/subscriptions/{subscriptionId}/removeAssignees": {
      "put": {
        "description": "Endpoint to remove assignees from a `Subscription`.",
        "operationId": "subscription-assignees-remove",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Subscription` id.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAssignees"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": "The returned resource is a `Subscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "subscription_write"
            ]
          }
        ],
        "summary": "Remove assignees from Subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/business/v2/dictionaries/{listId}/tags/{tagId}": {
      "delete": {
        "description": "Endpoint to delete a `Tag` out of a `List`.",
        "operationId": "tag-delete",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Tag` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Delete Tag from List",
        "tags": [
          "Tags"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `Tag` of a given `List` by ID.",
        "operationId": "tag-get",
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Tag` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "The returned resource is a single `Tag`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_read"
            ]
          }
        ],
        "summary": "Get Tag",
        "tags": [
          "Lists"
        ]
      },
      "put": {
        "description": "Endpoint to update `Tag` data of a `List`.",
        "operationId": "tag-update",
        "parameters": [
          {
            "description": "The `List` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `List` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The `Tag` ID.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Tag` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "description": {
                    "type": [
                      "string"
                    ],
                    "description": "The description of the `Tag`. If needed to support special characters, provide the character encoding in the `Content-Type` header (e.g. `application/x-www-form-urlencoded ; charset=utf-8`).",
                    "example": "Label to mark transactions"
                  },
                  "tag": {
                    "type": [
                      "string"
                    ],
                    "description": "The name of the `Tag`.",
                    "example": "tx-label"
                  },
                  "visible": {
                    "type": [
                      "boolean"
                    ],
                    "description": "It determines whether the `Tag` is visible in the `Transaction` detail.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "The returned resource is a single `Tag`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tag_write"
            ]
          }
        ],
        "summary": "Update Tag",
        "tags": [
          "Tags"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/attachments": {
      "get": {
        "description": "Endpoint to get the list of `TransactionAttachments` of a `Transaction`.",
        "operationId": "transaction-attachment-search",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAttachments"
                }
              }
            },
            "description": "The returned array contains `TransactionAttachment`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Search Transaction Attachments",
        "tags": [
          "Transaction Attachments"
        ]
      },
      "post": {
        "description": "Endpoint to upload a `TransactionAttachment` to a `Transaction`.\nThe first step is to get a temporary URL where to upload the attachment file.",
        "operationId": "transaction-attachment-upload",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "fileName": {
                    "type": [
                      "string"
                    ],
                    "description": "The file name of the attachment.",
                    "example": "invoice87.jpg"
                  },
                  "fileType": {
                    "type": [
                      "string"
                    ],
                    "description": "The file type of the attachment.",
                    "example": "PDF"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAttachment"
                }
              }
            },
            "description": "The returned resource is a single `TransactionAttachment`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Upload Transaction Attachment",
        "tags": [
          "Transaction Attachments"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/attachments/{attachmentId}": {
      "delete": {
        "description": "Endpoint to delete a `TransactionAttachment` by ID.",
        "operationId": "transaction-attachment-delete",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `TransactionAttachment` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Delete Transaction Attachment",
        "tags": [
          "Transaction Attachments"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `TransactionAttachment` by ID.",
        "operationId": "transaction-attachment-get",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `TransactionAttachment` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAttachment"
                }
              }
            },
            "description": "The returned resource is a single `TransactionAttachment`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Get Transaction Attachment",
        "tags": [
          "Transaction Attachments"
        ]
      },
      "post": {
        "description": "After you got the temporary file URL of type `UPLOAD_URL` and the attachment file is uploaded, the upload of the `TransactionAttachment` must be confirmed.",
        "operationId": "transaction-attachment-upload-confirm",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `TransactionAttachment` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "fileName": {
                    "type": [
                      "string"
                    ],
                    "description": "The file name of the attachment.",
                    "example": "invoice87.jpg"
                  },
                  "fileType": {
                    "type": [
                      "string"
                    ],
                    "description": "The file type of the attachment.",
                    "example": "PDF"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAttachment"
                }
              }
            },
            "description": "The returned resource is a single `TransactionAttachment`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Confirm Transaction Attachment Upload",
        "tags": [
          "Transaction Attachments"
        ]
      },
      "put": {
        "description": "Endpoint to update the `TransactionAttachment` Metadata of by ID.",
        "operationId": "transaction-attachment-metadata-update",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `TransactionAttachment` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionAttachment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAttachment"
                }
              }
            },
            "description": "The returned resource is a single `TransactionAttachment`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Update Transaction Attachment Metadata",
        "tags": [
          "Transaction Attachments"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/expense-category": {
      "delete": {
        "description": "Endpoint to remove the `Transaction`'s `ExpenseCategory`",
        "operationId": "transaction-expense-category-unset",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Remove Expense Category from Transaction",
        "tags": [
          "Transaction Expense Category"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/expense-category/{expenseCategoryId}": {
      "post": {
        "description": "Endpoint to assign an `ExpenseCategory` to a `Transaction`.",
        "operationId": "transaction-expense-category-set",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "expenseCategoryId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `ExpenseCategory` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Add Expense Category to Transaction",
        "tags": [
          "Transaction Expense Category"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/metadata": {
      "get": {
        "description": "Endpoint to get the list of metadata of a `Transaction`.",
        "operationId": "transaction-metadata-search",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionMetadataList"
                }
              }
            },
            "description": "The results array contains metadata."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Search Transaction Metadata",
        "tags": [
          "Transaction Metadata"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/metadata/{metadataId}": {
      "delete": {
        "description": "Endpoint to delete metadata of a `Transaction`.",
        "operationId": "transaction-metadata-delete",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "metadataId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID related to the new custom generated metadata of the `Transaction`.",
              "example": "metadata_id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Delete Transaction Metadata",
        "tags": [
          "Transaction Metadata"
        ]
      },
      "get": {
        "description": "Endpoint to get the metadata of a `Transaction` by ID.",
        "operationId": "transaction-metadata-get",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "metadataId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID related to the custom generated metadata of the `Transaction`.",
              "example": "metadata_id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "The returned resource is a generic JSON representing the metadata."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Get Transaction Metadata",
        "tags": [
          "Transaction Metadata"
        ]
      },
      "post": {
        "description": "Endpoint to add metadata to a `Transaction`.",
        "operationId": "transaction-metadata-add",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "metadataId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID related to the new custom generated Metadata of the `Transaction`.",
              "example": "metadata_id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": [
                  "object"
                ],
                "additionalProperties": {
                  "description": "A generic JSON."
                },
                "description": "A generic JSON."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Add Transaction Metadata",
        "tags": [
          "Transaction Metadata"
        ]
      },
      "put": {
        "description": "Endpoint to update metadata of a `Transaction`.",
        "operationId": "transaction-metadata-update",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "metadataId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID related to the new custom generated metadata of the `Transaction`.",
              "example": "metadata_id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": [
                  "object"
                ],
                "additionalProperties": {
                  "description": "A generic JSON."
                },
                "description": "A generic JSON."
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Update Transaction Metadata",
        "tags": [
          "Transaction Metadata"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/split": {
      "delete": {
        "description": "Endpoint to delete the split of a `Transaction`.",
        "operationId": "transaction-split-delete",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Delete Transaction Split",
        "tags": [
          "Transaction Split"
        ]
      },
      "post": {
        "description": "Endpoint to split a `Transaction`.",
        "operationId": "transaction-split-create",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionSplit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Create Transaction Split",
        "tags": [
          "Transaction Split"
        ]
      },
      "put": {
        "description": "Endpoint to update the split of a `Transaction`.",
        "operationId": "transaction-split-update",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionSplit"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Update Transaction Split",
        "tags": [
          "Transaction Split"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/tags/{tagId}": {
      "delete": {
        "description": "Endpoint to remove a `Tag` from a `Transaction`.",
        "operationId": "transaction-tag-remove",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Tag` ID.",
              "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Remove Tag from Transaction",
        "tags": [
          "Transaction Tags"
        ]
      },
      "post": {
        "description": "Endpoint to assign a `Tag` to a `Transaction`.",
        "operationId": "transaction-tag-add",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Tag` ID.",
              "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Add Tag to Transaction",
        "tags": [
          "Transaction Tags"
        ]
      }
    },
    "/business/v2/transactions/{transactionId}/tax-rate": {
      "delete": {
        "description": "Endpoint to remove the `Transaction`'s `VatRate`",
        "operationId": "transaction-tax-rate-unset",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Remove VAT Rate from Transaction ",
        "tags": [
          "Transaction VAT Rate"
        ]
      }
    },
    "/business/v2/transactions": {
      "get": {
        "description": "Endpoint to find `Transactions` using filtering parameters.",
        "operationId": "transaction-search",
        "parameters": [
          {
            "description": "The resource `type` to be used together with publicId.",
            "example": "card",
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/SearchTransactionResourceType"
            }
          },
          {
            "description": "Looks whether or not a `TransactionAttachment` is present.",
            "example": true,
            "in": "query",
            "name": "hasAttachment",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "Looks whether or not a `TransactionAttachment` is present.",
              "example": true
            }
          },
          {
            "description": "The ID of the `type` resource.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "publicId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `type` resource.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The custom reference ID of the cardholder.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "query",
            "name": "customreferenceId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The custom reference ID of the cardholder.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          },
          {
            "description": "The beginning of the period of the search `fromDate` included (i.e. greater than or equal to) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "1970-01-30",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "The end of the period of the search `toDate` included (i.e. less than) (Formats: `yyyy-MM-dd`, `yyyy-MM-ddThh:mm:ss`, `yyyy-MM-ddThh:mm:ssZ`).",
            "example": "1970-01-30",
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/DateParam"
            }
          },
          {
            "description": "It determines the date to be considered for `fromDate` and `toDate` parameters.",
            "example": "TRANSACTION",
            "in": "query",
            "name": "dateType",
            "schema": {
              "$ref": "#/components/schemas/SearchTransactionDateType"
            }
          },
          {
            "description": "The ID of the `Group` of the transactions.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef",
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `Group` of the transactions.",
              "example": "c861cc24-6663-410f-8c78-73f886fff4ef"
            }
          },
          {
            "description": "It determines the filter by category of the transaction, multiple categories can be included.",
            "example": "Payment",
            "in": "query",
            "name": "category",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It determines the filter by category of the transaction, multiple categories can be included.",
              "items": {
                "$ref": "#/components/schemas/SearchTransactionCategory"
              }
            }
          },
          {
            "description": "It determines the filter by status of the transaction, multiple statuses can be included.",
            "example": "Authorised",
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It determines the filter by status of the transaction, multiple statuses can be included.",
              "items": {
                "$ref": "#/components/schemas/TransactionStatus"
              }
            }
          },
          {
            "description": "It determines the filter by payment method of the transaction, multiple payment methods can be included. `OUT_OF_PLATFORM_COMPANY` and `OUT_OF_PLATFORM_PERSONAL` are not included by default.",
            "example": "SUBSCRIPTION",
            "in": "query",
            "name": "paymentMethod",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It determines the filter by payment method of the transaction, multiple payment methods can be included. `OUT_OF_PLATFORM_COMPANY` and `OUT_OF_PLATFORM_PERSONAL` are not included by default.",
              "items": {
                "$ref": "#/components/schemas/SearchTransactionPaymentMethod"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The ID of the `Tag` of the transaction.",
            "example": "6853e657-c797-4985-8d6b-5425d4e51df8",
            "in": "query",
            "name": "tagId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `Tag` of the transaction.",
              "example": "6853e657-c797-4985-8d6b-5425d4e51df8"
            }
          },
          {
            "deprecated": true,
            "description": "The ID of the custom generated `Metadata` of the `Transaction`.",
            "example": "express",
            "in": "query",
            "name": "metadataId",
            "schema": {
              "type": [
                "string"
              ],
              "deprecated": true,
              "description": "The ID of the custom generated `Metadata` of the `Transaction`.",
              "example": "express"
            }
          },
          {
            "description": "A simple text to search in the transaction data (merchant, merchant category, user notes, tag, list, masked pan, card name, tx amount, vehicle plate, vehicle description).",
            "example": "Amazon",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the transaction data (merchant, merchant category, user notes, tag, list, masked pan, card name, tx amount, vehicle plate, vehicle description).",
              "example": "Amazon"
            }
          },
          {
            "description": "The type of the expense.",
            "example": "TRAVEL_AND_ENTERTAINMENT",
            "in": "query",
            "name": "expenseType",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The type of the expense.",
              "example": "TRAVEL_AND_ENTERTAINMENT",
              "items": {
                "$ref": "#/components/schemas/ExpenseType"
              }
            }
          },
          {
            "description": "The status of the expenses.",
            "example": "APPROVED",
            "in": "query",
            "name": "expenseStatus",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The status of the expenses.",
              "items": {
                "$ref": "#/components/schemas/ExpenseStatus"
              }
            }
          },
          {
            "description": "The ID of the Expense category of the transactions, multiple expense categories can be included.",
            "example": "776f5018-07e5-426b-a426-8b23fa1e985d",
            "in": "query",
            "name": "expenseCategoryId",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the Expense category of the transactions, multiple expense categories can be included.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the Expense category of the transactions, multiple expense categories can be included."
              },
              "uniqueItems": true
            }
          },
          {
            "description": "The ID of the Expense Report of the transactions, multiple expense reports can be included.",
            "example": "776f5018-07e5-426b-a426-8b23fa1e985d",
            "in": "query",
            "name": "expenseReportId",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the Expense Report of the transactions, multiple expense reports can be included.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the Expense Report of the transactions, multiple expense reports can be included."
              }
            }
          },
          {
            "description": "The export status of the expense.",
            "example": "EXPORTED",
            "in": "query",
            "name": "exportStatus",
            "schema": {
              "$ref": "#/components/schemas/ExportStatus"
            }
          },
          {
            "description": "The ID of the VAT rate of the transactions, multiple VAT rates can be included.",
            "example": "c861cc24-6663-410f-8c78-73f886fff4ef",
            "in": "query",
            "name": "taxRateId",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The ID of the VAT rate of the transactions, multiple VAT rates can be included.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The ID of the VAT rate of the transactions, multiple VAT rates can be included."
              }
            }
          },
          {
            "description": "To search transactions with (or without) required information. A transaction is `COMPLETE` when all details marked as mandatory in the `Reminders` section have been filled in for the transaction.",
            "example": "COMPLETE",
            "in": "query",
            "name": "requiredInformation",
            "schema": {
              "$ref": "#/components/schemas/SearchTransactionRequiredInformation"
            }
          },
          {
            "description": "Looks whether or not a transaction is split.",
            "example": true,
            "in": "query",
            "name": "isSplit",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "Looks whether or not a transaction is split.",
              "example": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            },
            "description": "The result array contains `Transactions`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Search Transactions",
        "tags": [
          "Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "type, publicId, customReferenceId, groupId, fromDate, toDate, dateType, category, status, tagId, metadataId, text, expenseType, expenseStatus, requiredInformation, token"
        }
      }
    },
    "/business/v2/transactions/{transactionId}": {
      "get": {
        "description": "Endpoint to get a specific `Transaction` by ID.",
        "operationId": "transaction-get",
        "parameters": [
          {
            "description": "The `Transaction` ID.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "It determines whether to show further Details of the `Transaction`.",
            "example": false,
            "in": "query",
            "name": "showDetails",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether to show further Details of the `Transaction`.",
              "example": false
            }
          },
          {
            "description": "It determines whether to show further Fuel Details of the `Transaction`.",
            "example": false,
            "in": "query",
            "name": "showFuelDetails",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines whether to show further Fuel Details of the `Transaction`.",
              "example": false
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "The returned resource is a single `Transaction`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_read"
            ]
          }
        ],
        "summary": "Get Transaction",
        "tags": [
          "Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "transactionId, token"
        }
      },
      "put": {
        "description": "Endpoint to update the assignee of a specific `Transaction` by ID. This method is only available for `Company` `Card` transactions and the `trx_owner_id` must be one of the `Card` assignees.",
        "operationId": "transaction-update",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "The returned resource is a single `Transaction`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Update Transaction",
        "tags": [
          "Transactions"
        ],
        "x-soldo": {
          "fingerprint-order": "transactionId, userNotes, trxOwnerId, token"
        }
      }
    },
    "/business/v2/transactions/{transactionId}/tax-rate/{taxRateId}": {
      "post": {
        "description": "Endpoint to assign a `VatRate` to a `Transaction`.",
        "operationId": "transaction-tax-rate-set",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Transaction` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "taxRateId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `VatRate` ID.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "transaction_write"
            ]
          }
        ],
        "summary": "Add VAT Rate to Transaction ",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/business/v2/employees/{userId}/assignRole": {
      "post": {
        "description": "Endpoint to assign a `Role` to an `User`.",
        "operationId": "user-role-set",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID to assign `Role` to.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignedUserRoles"
                }
              }
            },
            "description": "The returned resource is a single `User`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Add roles to User",
        "tags": [
          "User Roles"
        ],
        "x-soldo": {
          "fingerprint-order": "userId, name, description, scope, token"
        }
      }
    },
    "/business/v2/employees/{userId}/roles": {
      "get": {
        "description": "Endpoint to retrieve roles by `User` ID.",
        "operationId": "user-role-get",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignedUserRoles"
                }
              }
            },
            "description": "The result is the `User` with their `Roles`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_read"
            ]
          }
        ],
        "summary": "Get User Roles",
        "tags": [
          "User Roles"
        ]
      }
    },
    "/business/v2/employees/{userId}/unassignRole": {
      "post": {
        "description": "Endpoint to remove a `Role` from an `User`.",
        "operationId": "user-role-unset",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID to remove `Role` from.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignedUserRoles"
                }
              }
            },
            "description": "The returned resource is a single `User`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Remove roles from User",
        "tags": [
          "User Roles"
        ]
      }
    },
    "/business/v2/employees": {
      "get": {
        "description": "Endpoint to find `Users` using filtering parameters.",
        "operationId": "user-search",
        "parameters": [
          {
            "description": "The reference of the `User` in an external system.",
            "example": "IDEMPLOY111",
            "in": "query",
            "name": "customreferenceId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The reference of the `User` in an external system.",
              "example": "IDEMPLOY111"
            }
          },
          {
            "description": "The name of the `User`.",
            "example": "John",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The name of the `User`.",
              "example": "John"
            }
          },
          {
            "description": "The surname of the `User`.",
            "example": "Doe",
            "in": "query",
            "name": "surname",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The surname of the `User`.",
              "example": "Doe"
            }
          },
          {
            "description": "The visibility property of the `User`.",
            "example": true,
            "in": "query",
            "name": "visible",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "The visibility property of the `User`.",
              "example": true
            }
          },
          {
            "description": "The job title of the `User`.",
            "example": "HR Specialist",
            "in": "query",
            "name": "jobTitle",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The job title of the `User`.",
              "example": "HR Specialist"
            }
          },
          {
            "description": "The department of the `User`.",
            "example": "HR departement",
            "in": "query",
            "name": "department",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The department of the `User`.",
              "example": "HR departement"
            }
          },
          {
            "description": "The email address of the `User`.",
            "example": "johndoe@email.com",
            "in": "query",
            "name": "email",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The email address of the `User`.",
              "example": "johndoe@email.com"
            }
          },
          {
            "description": "The mobile number of the `User`.",
            "example": "johndoe@email.com",
            "in": "query",
            "name": "mobile",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The mobile number of the `User`.",
              "example": "johndoe@email.com"
            }
          },
          {
            "description": "The status of the `User`.",
            "example": "ACTIVE",
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/UserStatus"
            }
          },
          {
            "description": "The ID of the `User`.",
            "example": "XMPL1234-000001",
            "in": "query",
            "name": "id",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `User`.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "description": "The ID of the `Group` the `User` is a member of.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `Group` the `User` is a member of.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          },
          {
            "description": "The IDs of the `User` to which they could report to.",
            "example": "XMPL1234-000005",
            "in": "query",
            "name": "reportsTo",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The IDs of the `User` to which they could report to.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The IDs of the `User` to which they could report to."
              }
            }
          },
          {
            "in": "query",
            "name": "workStatus",
            "schema": {
              "type": [
                "array"
              ],
              "description": "Filters users by their work status.",
              "items": {
                "$ref": "#/components/schemas/WorkStatus"
              },
              "uniqueItems": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            },
            "description": "The result array contains `Users`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_read"
            ]
          }
        ],
        "summary": "Search Users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Endpoint to add a new `User`. *Deprecated*: use [/employees/create](ref:user-create) instead.",
        "operationId": "user-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The returned result is an `Order`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Add User",
        "tags": [
          "Users"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, name, surname, mobile_access, web_access, token"
        }
      }
    },
    "/business/v2/employees/create": {
      "post": {
        "description": "Endpoint to create a new `User`.",
        "operationId": "user-create",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          },
          "description": "Create employee JSON Parameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The returned result is an `User`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, name, surname, mobile_access, web_access, token"
        }
      }
    },
    "/business/v2/employees/{userId}": {
      "delete": {
        "description": "Endpoint to delete an `User`.",
        "operationId": "user-delete",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Delete User",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `User` by ID.",
        "operationId": "user-get",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The returned resource is a single `User`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_read"
            ]
          }
        ],
        "summary": "Get User",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Endpoint to update an `User`.",
        "operationId": "user-update",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The returned result is a single `User`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ],
        "x-soldo": {
          "fingerprint-order": "custom_reference_id, job_title, mobile_number, mobile_prefix, email, enable_mobile_credential, enable_web_credential, token"
        }
      }
    },
    "/business/v2/employees/{userId}/access-modes": {
      "get": {
        "description": "Endpoint to retrieve the `User` access modes.",
        "operationId": "user-access-modes-get",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "in": "query",
            "name": "channel",
            "schema": {
              "$ref": "#/components/schemas/Channel"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessModeList"
                }
              }
            },
            "description": "The access modes configure for the given `User`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_read"
            ]
          }
        ],
        "summary": "Retrieve User Access Modes",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Endpoint to update the `User` access modes.",
        "operationId": "user-access-modes-update",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAccessModes"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Update User Access Modes",
        "tags": [
          "Users"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, userId, token"
        }
      }
    },
    "/business/v2/employees/{userId}/status": {
      "put": {
        "description": "Endpoint to update an `User` status.",
        "operationId": "user-status-update",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `User` ID.",
              "example": "XMPL1234-000001"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The returned result is a single `User`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "employee_write"
            ]
          }
        ],
        "summary": "Update User Status",
        "tags": [
          "Users"
        ],
        "x-soldo": {
          "fingerprint-order": "userId, status, token"
        }
      }
    },
    "/business/v2/entities/tax-rate": {
      "get": {
        "description": "Endpoint to find `VatRate` using filtering parameters.",
        "operationId": "vat-rate-search",
        "parameters": [
          {
            "description": "A simple text to search in the Vat rate data (name, code).",
            "example": "something",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A simple text to search in the Vat rate data (name, code).",
              "example": "something"
            }
          },
          {
            "description": "It determines if Vat rate is enabled.",
            "example": true,
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "It determines if Vat rate is enabled.",
              "example": true
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VatRates"
                }
              }
            },
            "description": "The result is an array containing `VATRates`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tax_rate_read"
            ]
          }
        ],
        "summary": "Search VAT Rates",
        "tags": [
          "VAT Rates"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `VatRate`.",
        "operationId": "vat-rate-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVatRate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VatRate"
                }
              }
            },
            "description": "The result is an `VatRate`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tax_rate_write"
            ]
          }
        ],
        "summary": "Add VAT Rate",
        "tags": [
          "VAT Rates"
        ]
      }
    },
    "/business/v2/entities/tax-rate/{taxRateId}": {
      "delete": {
        "description": "Endpoint to delete a `VatRate`.",
        "operationId": "vat-rate-delete",
        "parameters": [
          {
            "in": "path",
            "name": "taxRateId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `VatRate` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tax_rate_write"
            ]
          }
        ],
        "summary": "Delete VAT Rate",
        "tags": [
          "VAT Rates"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `VatRate` by ID.",
        "operationId": "vat-rate-get",
        "parameters": [
          {
            "in": "path",
            "name": "taxRateId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `VatRate` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VatRate"
                }
              }
            },
            "description": "The returned resource is a single `VatRate`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tax_rate_read"
            ]
          }
        ],
        "summary": "Get VAT Rate",
        "tags": [
          "VAT Rates"
        ]
      },
      "put": {
        "description": "Endpoint to update `VATRate`.",
        "operationId": "vat-rate-update",
        "parameters": [
          {
            "in": "path",
            "name": "taxRateId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `VatRate` ID."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVatRate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VatRate"
                }
              }
            },
            "description": "The returned resource is a single `VatRate`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "tax_rate_write"
            ]
          }
        ],
        "summary": "Update VAT Rate",
        "tags": [
          "VAT Rates"
        ]
      }
    },
    "/business/v2/vehicles": {
      "get": {
        "description": "Endpoint to find Vehicles using filtering parameters.",
        "operationId": "vehicle-search",
        "parameters": [
          {
            "description": "A text to be searched on the number plate and description field.",
            "example": "something",
            "in": "query",
            "name": "text",
            "schema": {
              "type": [
                "string"
              ],
              "description": "A text to be searched on the number plate and description field.",
              "example": "something"
            }
          },
          {
            "description": "The IDs of the vehicles to search.",
            "example": "776f5018-07e5-426b-a426-8b23fa1e985d",
            "in": "query",
            "name": "publicIds",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The IDs of the vehicles to search.",
              "items": {
                "type": [
                  "string"
                ],
                "description": "The IDs of the vehicles to search."
              }
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicles"
                }
              }
            },
            "description": "The returned array contains `Vehicle` resources."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "vehicle_read"
            ]
          }
        ],
        "summary": "Search Vehicle",
        "tags": [
          "Vehicles"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `Vehicle`.",
        "operationId": "vehicle-add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVehicle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            },
            "description": "The returned resource is a new `Vehicle`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "vehicle_write"
            ]
          }
        ],
        "summary": "Add Vehicle",
        "tags": [
          "Vehicles"
        ]
      }
    },
    "/business/v2/vehicles/{vehicleId}": {
      "delete": {
        "description": "Endpoint to delete a specific `Vehicle`.",
        "operationId": "vehicle-delete",
        "parameters": [
          {
            "in": "path",
            "name": "vehicleId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The Vehicle id.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "vehicle_write"
            ]
          }
        ],
        "summary": "Delete Vehicle",
        "tags": [
          "Vehicles"
        ]
      },
      "get": {
        "description": "Endpoint to get a specific `Vehicle` by ID.",
        "operationId": "vehicle-get",
        "parameters": [
          {
            "in": "path",
            "name": "vehicleId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The Vehicle id.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            },
            "description": "The returned resource is a `Vehicle`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "vehicle_read"
            ]
          }
        ],
        "summary": "Get Vehicle",
        "tags": [
          "Vehicles"
        ]
      },
      "put": {
        "description": "Endpoint to update a specific Vehicle",
        "operationId": "vehicle-update",
        "parameters": [
          {
            "in": "path",
            "name": "vehicleId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The Vehicle id.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicle"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            },
            "description": "The returned resource is a `Vehicle`"
          }
        },
        "security": [
          {
            "standardAuth": [
              "vehicle_write"
            ]
          }
        ],
        "summary": "Update Vehicle",
        "tags": [
          "Vehicles"
        ]
      }
    },
    "/business/v2/wallets": {
      "get": {
        "description": "Endpoint to search `Wallets` using filtering parameters.",
        "operationId": "wallet-search",
        "parameters": [
          {
            "description": "The type of resource assigned to the `Wallet`.",
            "example": "company",
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PrimaryUserType"
            }
          },
          {
            "description": "The ID of the `type` resource.",
            "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7",
            "in": "query",
            "name": "publicId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `type` resource.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "description": "The custom reference ID of the `type` resource.",
            "example": "123456-user-1",
            "in": "query",
            "name": "customreferenceId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The custom reference ID of the `type` resource.",
              "example": "123456-user-1"
            }
          },
          {
            "description": "The ID of the `Group` the `Wallet` is related to.",
            "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa",
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The ID of the `Group` the `Wallet` is related to.",
              "example": "2d65bd5e-3fdf-4002-b166-bde7fb8863fa"
            }
          },
          {
            "description": "The full or partial name of the `Wallet`.",
            "example": "John Doe",
            "in": "query",
            "name": "name",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The full or partial name of the `Wallet`.",
              "example": "John Doe"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallets"
                }
              }
            },
            "description": "The returned resource is an array containing `Wallets`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_read"
            ]
          }
        ],
        "summary": "Search Wallets",
        "tags": [
          "Wallets"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Endpoint to add a new `Wallet`. Only company wallets can be created, a user dedicated wallet for each currency supported by your account is automatically created by the Soldo platform. *Deprecated*: use [/wallets/create](ref:wallet-create) instead.",
        "operationId": "wallet-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWalletOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "The returned resource is a single `Order`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Add Wallet",
        "tags": [
          "Wallets"
        ],
        "x-soldo": {
          "fingerprint-order": "request_timestamp, owner_type, currency, name, token"
        }
      }
    },
    "/business/v2/wallets/create": {
      "post": {
        "description": "Endpoint to add a new `Wallet`. Only company wallets can be created, a user dedicated wallet for each currency supported by your account is automatically created by the Soldo platform.",
        "operationId": "wallet-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWallet"
              }
            }
          },
          "description": "Create `Wallet` JSON Parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            },
            "description": "The returned resource is a `Wallet`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Create Wallet",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/business/v2/wallets/internalTransfer/{fromWalletId}/{toWalletId}": {
      "put": {
        "description": "Endpoint to transfer money between two `Wallets` within the same business account.",
        "operationId": "wallet-internal-transfer",
        "parameters": [
          {
            "in": "path",
            "name": "fromWalletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Wallet` ID of the source `Wallet`.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "path",
            "name": "toWalletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Wallet` ID of the destination `Wallet`.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": [
                  "object"
                ],
                "properties": {
                  "amount": {
                    "type": [
                      "number"
                    ],
                    "description": "The amount to transfer.",
                    "example": 10.25
                  },
                  "currencyCode": {
                    "$ref": "#/components/schemas/ISO4217SupportedCurrency"
                  }
                },
                "required": [
                  "amount",
                  "currencyCode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResult"
                }
              }
            },
            "description": "The result is a `TransferResult`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Make Internal Transfer",
        "tags": [
          "Wallets"
        ],
        "x-soldo": {
          "fingerprint-order": "amount, currencyCode, fromWalletId, toWalletId, token"
        }
      }
    },
    "/business/v2/wallets/{walletId}": {
      "delete": {
        "description": "Endpoint to delete the `Wallet`",
        "operationId": "wallet-delete",
        "parameters": [
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Wallet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Delete Wallet",
        "tags": [
          "Wallets"
        ]
      },
      "get": {
        "description": "Endpoint to retrieve a specific `Wallet` by ID.",
        "operationId": "wallet-get",
        "parameters": [
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Wallet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            },
            "description": "The returned resource is a single `Wallet`."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_read"
            ]
          }
        ],
        "summary": "Get Wallet",
        "tags": [
          "Wallets"
        ]
      },
      "put": {
        "description": "Endpoint to update a `Wallet`. Only company wallets can be updated, a `User` dedicated wallet for each currency supported by your account is automatically created by the Soldo platform when a `User` gets created.",
        "operationId": "wallet-update",
        "parameters": [
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `Wallet` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            },
            "description": "The returned resource is a single `Wallet`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "wallet_write"
            ]
          }
        ],
        "summary": "Update Wallet",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/business/v2/webhooks/subscriptions": {
      "get": {
        "description": "Endpoint to search `WebhookSubscriptions` using filtering parameters.",
        "operationId": "webhook-subscription-search",
        "parameters": [
          {
            "in": "query",
            "name": "webhookUrl",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The URL of the `WebhookSubscription`.",
              "example": "https://your_domain.com/xx/xx"
            }
          },
          {
            "in": "query",
            "name": "enabledEvents",
            "schema": {
              "type": [
                "array"
              ],
              "description": "The list of the enabled events of the search.",
              "items": {
                "$ref": "#/components/schemas/WebhookEventName"
              }
            }
          },
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": [
                "boolean"
              ],
              "description": "The status of the webhook (if false, notifications are not sent)."
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": [
                "string"
              ],
              "description": "The description of the `WebhookSubscription`.",
              "example": "Transactions and user webhook"
            }
          },
          {
            "description": "It indicates the specific page to display (the counter starts from zero).",
            "example": 3,
            "in": "query",
            "name": "p",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the specific page to display (the counter starts from zero).",
              "example": 3
            }
          },
          {
            "description": "It indicates the number of items per page.",
            "example": 25,
            "in": "query",
            "name": "s",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "default": 0,
              "description": "It indicates the number of items per page.",
              "example": 25,
              "maximum": 50
            }
          },
          {
            "description": "It indicates how the pages are ordered.",
            "example": "DESC",
            "in": "query",
            "name": "d",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
            "example": "creationTime",
            "in": "query",
            "name": "props",
            "schema": {
              "type": [
                "array"
              ],
              "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
              "example": "creationTime",
              "items": {
                "type": [
                  "string"
                ],
                "description": "It indicates the sorting direction applied to the above parameters. To apply a sorting on multiple parameters, set as many times the `props` parameter in the request.",
                "example": "creationTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptions"
                }
              }
            },
            "description": "The result is an array containing `WebhookSubscriptions`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "webhook_subscription_read"
            ]
          }
        ],
        "summary": "Search Webhook Subscriptions",
        "tags": [
          "Webhook Subscriptions"
        ]
      },
      "post": {
        "description": "Endpoint to add a new `WebhookSubscription`.",
        "operationId": "webhook-subscription-add",
        "parameters": [
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            },
            "description": "The returned resource is a single `WebhookSubscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "webhook_subscription_write"
            ]
          }
        ],
        "summary": "Add Webhook Subscription",
        "tags": [
          "Webhook Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "webhook_url, enabled_events(joined), active, token"
        }
      }
    },
    "/business/v2/webhooks/subscriptions/{webhookSubscriptionId}": {
      "delete": {
        "description": "Endpoint to delete a specific `WebhookSubscription`.",
        "operationId": "webhook-subscription-delete",
        "parameters": [
          {
            "in": "path",
            "name": "webhookSubscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `WebhookSubscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content as result."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          }
        },
        "security": [
          {
            "standardAuth": [
              "webhook_subscription_write"
            ]
          }
        ],
        "summary": "Delete Webhook Subscription",
        "tags": [
          "Webhook Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "id, token"
        }
      },
      "put": {
        "description": "Endpoint to update a specific `WebhookSubscription`.",
        "operationId": "webhook-subscription-update",
        "parameters": [
          {
            "in": "path",
            "name": "webhookSubscriptionId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `WebhookSubscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint}}",
              "description": "[Advanced authentication](ref:advanced-authentication): `SHA512SUM` of the [Fingerprint order](ref:fingerprint-order) values.",
              "example": "{{fingerprint}}"
            }
          },
          {
            "in": "header",
            "name": "X-Soldo-Fingerprint-Signature",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "default": "{{fingerprint_signature}}",
              "description": "[Advanced authentication](ref:advanced-authentication): Signature of the `X-Soldo-Fingerprint`.",
              "example": "{{fingerprint_signature}}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            },
            "description": "The returned resource is a single `WebhookSubscription`."
          },
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          }
        },
        "security": [
          {
            "standardAuth": [
              "webhook_subscription_write"
            ]
          }
        ],
        "summary": "Update Webhook Subscription",
        "tags": [
          "Webhook Subscriptions"
        ],
        "x-soldo": {
          "fingerprint-order": "webhookSubscriptionId, webhook_url, enabled_events (joined), active, token"
        }
      }
    },
    "/business/v2/webhooks/subscriptions/{webhookSubscriptionsId}": {
      "get": {
        "description": "Endpoint to retrieve a specific `WebhookSubscription` by ID.",
        "operationId": "webhook-subscription-get",
        "parameters": [
          {
            "in": "path",
            "name": "webhookSubscriptionsId",
            "required": true,
            "schema": {
              "type": [
                "string"
              ],
              "description": "The `WebhookSubscription` ID.",
              "example": "7bf79328-a7ae-4222-aa54-091ff7f429a7"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Your request has missing arguments or is malformed."
          },
          "404": {
            "description": "One or more resource requested does not exist."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            },
            "description": "The returned resource is a single `WebhookSubscription`."
          }
        },
        "security": [
          {
            "standardAuth": [
              "webhook_subscription_read"
            ]
          }
        ],
        "summary": "Get Webhook Subscription",
        "tags": [
          "Webhook Subscriptions"
        ]
      }
    }
  }
}
