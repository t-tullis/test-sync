{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "test",
    "license": {
      "name": "ISC"
    },
    "description": "Lets see what appears? is anything changing?"
  },
  "servers": [
    {
      "description": "Development Environment",
      "url": "https://testing.dev"
    },
    {
      "description": "Production Environment",
      "url": "https://testing.com"
    }
  ],
  "security": [
    {
      "Oauth": ["write:pets", "read:pets"]
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Retrieves All Users(Moving content test)",
        "operationId": "getAllUsers",
        "description": "Collects all users ",
        "responses": {
          "200": {
            "description": "All good! Users will be displayed here"
          }
        }
      }
    },
    "/users/update/{email}": {
      "put": {
        "operationId": "updateUser",
        "description": "Updates the specific user by email. All fields aren't required to update the user object \n > ðŸ“˜ v3 Endpoints are also available \n > \n> You can visit v3 here: https://linkTov3EndpointHere.com",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The email used to fetch the User to update"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "example": 50
          }
        ],
        "requestBody": {
          "description": "Updates a user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated a user"
          },
          "404": {
            "description": "The User you are trying to update doesn't exist"
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "summary": "Creates a User  \n also an update for version 1.0.2",
        "operationId": "createUser",
        "description": "Creates a new user",
        "requestBody": {
          "description": "Creates a new user object ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Created"
          },
          "400": {
            "description": "Error creating user password and email required"
          }
        }
      }
    },
    "/users/{email}": {
      "get": {
        "summary": "Returns a user with a specific email",
        "operationId": "GetUserByEmail",
        "description": "Returns a user by a specific email",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch. Use test2@gmail.com to test. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User found"
          },
          "404": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "/users/delete/{email}": {
      "delete": {
        "summary": "Deletes a user",
        "operationId": "deleteUserByEmail",
        "description": "Deletes a user by the specified email given",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch and delete. Try hitting the end point that returns all users and pick an email to delete. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User was deleted"
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Bearer"
      },
      "Oauth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://example.com/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://example.com/api/oauth/dialog",
            "tokenUrl": "https://example.com/api/oauth/token",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email"
          },
          "firstName": {
            "type": "string",
            "description": "user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "user'saq last name"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "user's password"
          }
        }
      },
      "Update": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's first name to update"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name to update"
          },
          "password": {
            "type": "string",
            "description": "User's password to update"
          },
          "arrayOfStrings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-readme": {
    "proxy-enabled": false,
    "samples-languages": ["curl", "javascript"]
  }
}
