{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "test",
    "license": {
      "name": "ISC"
    },
    "description": "Lets see what appears? is anything changing?"
  },
  "servers": [
    {
      "url": "https://google.com/{version}"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          ""
        ],
        "summary": "Retrieves All Users",
        "operationId": "getAllUsers",
        "description": "Collects all users ",
        "responses": {            
          "200": {
          "description": "OK"
        },
        "404": {
          "description": "Category not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Teacher not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "School not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request"
        }
      }
    }
  },
    "/users/update/": {
      "put": {
        "tags": [
        ],
        "description": "Updates the specific user by email. All fields aren't required to update the user object",
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "enum": [
                "AKAMAI",
                "THIRD_PARTY"
              ],
              "example": "AKAMAI"
            },
            "required": true,
            "description": "The email used to fetch the User to update"
          }
        ],
        "requestBody": {
          "description": "Updates a user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated a user"
          },
          "404": {
            "description": "The User you are trying to update doesn't exist"
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "security": [
          {
            "TestAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Creates a User (OCT 12th RESYNC TEST)",
        "operationId": "createUser",
        "description": "Creates a new user(TESTING RESYNC)",
        "requestBody": {
          "description": "Creates a new user object(TICKET ENDPOINT)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Created! (click to see more...)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error creating user password and email required"
          }
        }
      }
    },
    "/users/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "quickTest",
        "description": "Returns a user by a specific email",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch. Use test2@gmail.com to test. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Testing something here lol",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Testing"
                }
              }
            }
          },
          "404": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "/users/delete/{email}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "operationId": "deleteUserByEmail",
        "description": "Deletes a user by the specified email given",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch and delete. Try hitting the end point that returns all users and pick an email to delete. ",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "confidences",
            "in": "query",
            "description": "Include Confidence Scores in the PDF.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This is where the description of your response will go and it will populate in the area marked in your first screenshot"
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "The Name here",
        "type": "apiKey"
      },
      "TestAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email"
          },
          "firstName": {
            "type": "string",
            "description": "Adding a description here will will have the description populate in the area marked in your second screenshot"
          },
          "lastName": {
            "type": "string",
            "description": "the user's last name"
          },
          "Testing": {
          "type": "string",
          "description": "Working?"
          },
          "password": {
            "type": "string",
            "description": "user's password"
          },
          "date": {
            "type": "string",
            "description": "Date of Arrival",
            "format": "date",
            "example": {
              "date": "2022-05-03"
            }
          }
        }
      },
      "Testing": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Update"
          },
          {
            "$ref": "#/components/schemas/Test"
          }
        ]
      },
      "Update": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's first name to update"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name to update"
          },
          "password": {
            "type": "string",
            "description": "User's password to update"
          }
        }
      },
      "Test": {
        "type": "object",
        "properties": {
          "test1": {
            "type": "string",
            "description": "Testing allOf 1"
          },
          "test2": {
            "type": "string",
            "description": "Testing allOf 2"
          },
          "test3": {
            "type": "string",
            "description": "Testing allOf 3"
          },
          "link-test": {
            "type": "string",
            "example": {
              "link": "https://www.google.com"
            }
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-enabled": true,    
    "proxy-enabled": true,    
    "samples-languages": [
      "node",
      "curl"
  ]
  }
}